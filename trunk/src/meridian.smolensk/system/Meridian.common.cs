/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Magic date 8/12/2013 11:01:39 PM
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using meridian.core;
using MySql.Data.MySqlClient;
using meridian.smolensk;

namespace meridian.smolensk.system
{
	public partial class Meridian
	{
        private SortedList<string, IEntityStore> m_Stores = new SortedList<string, IEntityStore>();
        private SortedList<string, double> m_LoadingTimes = new SortedList<string, double>();

	    public void DeleteAs<T>(string _proto, long _id) where T : class
	    {
	        var t = GetAs<T>(_proto, _id);

            m_Stores[_proto].DeleteById(_id);
	    }

        public void UpdateAs<T>(string _proto, long _id) where T : class
        {
            var t = GetAs<T>(_proto, _id);
            m_Stores[_proto].UpdateById(_id);
        }

	    public T GetAs<T>(string _proto, long _id) where T : class
	    {
	        var type = typeof (T);
            if (m_Stores.IndexOfKey(_proto) == -1)
            {
                throw new Exception(String.Format("No entity of type {0} found", _proto));
            }

	        var store = m_Stores[_proto];

	        var objectType = store.GetObjectType();

            if (!type.IsAssignableFrom(objectType))
            {
                throw new Exception(String.Format("Type {0} is not assignable to {1}", objectType.Name, type.Name));
            }

	        var obj = store.GetObject(_id);

            if (obj == null)
            {
                throw new Exception(String.Format("Object of type {0} id {1} not found", _proto, _id));
            }

	        var result = obj as T;

            if (result == null)
            {
                throw new Exception(String.Format("Object of type {0} id {1} could not be converted to {2}", _proto, _id, type.Name));
            }

	        return result;
	    }


	}
}
