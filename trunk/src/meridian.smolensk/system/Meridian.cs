/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using meridian.core;
using MySql.Data.MySqlClient;
using meridian.smolensk;

namespace meridian.smolensk.system
{
	public partial class Meridian
	{
		public interface IEntityStore
		{
			object GetObject(long _id);
			Type GetObjectType();
			void DeleteById(long _id);
			void UpdateById(long _id);
		}
		public Meridian()
		{
		}
		public void Init(string _connection)
		{
			ConnectionString = _connection;
			using(var connection = new MySqlConnection(_connection))
			{
				m_Meridian = new Meridian();
				m_Meridian.ConnectionString = _connection;
				connection.Open();
				m_Meridian.Load(connection);
				connection.Close();
			}
		}
		public void Load(MySqlConnection _connection)
		{
			var now = new DateTime();
			account_rolesStore = new protoStore.account_rolesStore();
			m_Stores["account_roles"] = account_rolesStore;
			now = DateTime.Now;
			account_rolesStore.Select(_connection);
			m_LoadingTimes["account_roles select"] = (DateTime.Now - now).TotalMilliseconds;
			action_categoriesStore = new protoStore.action_categoriesStore();
			m_Stores["action_categories"] = action_categoriesStore;
			now = DateTime.Now;
			action_categoriesStore.Select(_connection);
			m_LoadingTimes["action_categories select"] = (DateTime.Now - now).TotalMilliseconds;
			actions_commentsStore = new protoStore.actions_commentsStore();
			m_Stores["actions_comments"] = actions_commentsStore;
			now = DateTime.Now;
			actions_commentsStore.Select(_connection);
			m_LoadingTimes["actions_comments select"] = (DateTime.Now - now).TotalMilliseconds;
			actions_genresStore = new protoStore.actions_genresStore();
			m_Stores["actions_genres"] = actions_genresStore;
			now = DateTime.Now;
			actions_genresStore.Select(_connection);
			m_LoadingTimes["actions_genres select"] = (DateTime.Now - now).TotalMilliseconds;
			actions_photosStore = new protoStore.actions_photosStore();
			m_Stores["actions_photos"] = actions_photosStore;
			now = DateTime.Now;
			actions_photosStore.Select(_connection);
			m_LoadingTimes["actions_photos select"] = (DateTime.Now - now).TotalMilliseconds;
			ad_categoriesStore = new protoStore.ad_categoriesStore();
			m_Stores["ad_categories"] = ad_categoriesStore;
			now = DateTime.Now;
			ad_categoriesStore.Select(_connection);
			m_LoadingTimes["ad_categories select"] = (DateTime.Now - now).TotalMilliseconds;
			ad_field_descriptionsStore = new protoStore.ad_field_descriptionsStore();
			m_Stores["ad_field_descriptions"] = ad_field_descriptionsStore;
			now = DateTime.Now;
			ad_field_descriptionsStore.Select(_connection);
			m_LoadingTimes["ad_field_descriptions select"] = (DateTime.Now - now).TotalMilliseconds;
			ad_lookup_valuesStore = new protoStore.ad_lookup_valuesStore();
			m_Stores["ad_lookup_values"] = ad_lookup_valuesStore;
			now = DateTime.Now;
			ad_lookup_valuesStore.Select(_connection);
			m_LoadingTimes["ad_lookup_values select"] = (DateTime.Now - now).TotalMilliseconds;
			blog_categoriesStore = new protoStore.blog_categoriesStore();
			m_Stores["blog_categories"] = blog_categoriesStore;
			now = DateTime.Now;
			blog_categoriesStore.Select(_connection);
			m_LoadingTimes["blog_categories select"] = (DateTime.Now - now).TotalMilliseconds;
			blog_commentsStore = new protoStore.blog_commentsStore();
			m_Stores["blog_comments"] = blog_commentsStore;
			now = DateTime.Now;
			blog_commentsStore.Select(_connection);
			m_LoadingTimes["blog_comments select"] = (DateTime.Now - now).TotalMilliseconds;
			blog_lastviewsStore = new protoStore.blog_lastviewsStore();
			m_Stores["blog_lastviews"] = blog_lastviewsStore;
			now = DateTime.Now;
			blog_lastviewsStore.Select(_connection);
			m_LoadingTimes["blog_lastviews select"] = (DateTime.Now - now).TotalMilliseconds;
			citiesStore = new protoStore.citiesStore();
			m_Stores["cities"] = citiesStore;
			now = DateTime.Now;
			citiesStore.Select(_connection);
			m_LoadingTimes["cities select"] = (DateTime.Now - now).TotalMilliseconds;
			city_pricesStore = new protoStore.city_pricesStore();
			m_Stores["city_prices"] = city_pricesStore;
			now = DateTime.Now;
			city_pricesStore.Select(_connection);
			m_LoadingTimes["city_prices select"] = (DateTime.Now - now).TotalMilliseconds;
			city_prices_iconsStore = new protoStore.city_prices_iconsStore();
			m_Stores["city_prices_icons"] = city_prices_iconsStore;
			now = DateTime.Now;
			city_prices_iconsStore.Select(_connection);
			m_LoadingTimes["city_prices_icons select"] = (DateTime.Now - now).TotalMilliseconds;
			comments_newsStore = new protoStore.comments_newsStore();
			m_Stores["comments_news"] = comments_newsStore;
			now = DateTime.Now;
			comments_newsStore.Select(_connection);
			m_LoadingTimes["comments_news select"] = (DateTime.Now - now).TotalMilliseconds;
			companies_kind_activitiesStore = new protoStore.companies_kind_activitiesStore();
			m_Stores["companies_kind_activities"] = companies_kind_activitiesStore;
			now = DateTime.Now;
			companies_kind_activitiesStore.Select(_connection);
			m_LoadingTimes["companies_kind_activities select"] = (DateTime.Now - now).TotalMilliseconds;
			company_categoriesStore = new protoStore.company_categoriesStore();
			m_Stores["company_categories"] = company_categoriesStore;
			now = DateTime.Now;
			company_categoriesStore.Select(_connection);
			m_LoadingTimes["company_categories select"] = (DateTime.Now - now).TotalMilliseconds;
			company_commentsStore = new protoStore.company_commentsStore();
			m_Stores["company_comments"] = company_commentsStore;
			now = DateTime.Now;
			company_commentsStore.Select(_connection);
			m_LoadingTimes["company_comments select"] = (DateTime.Now - now).TotalMilliseconds;
			company_filesStore = new protoStore.company_filesStore();
			m_Stores["company_files"] = company_filesStore;
			now = DateTime.Now;
			company_filesStore.Select(_connection);
			m_LoadingTimes["company_files select"] = (DateTime.Now - now).TotalMilliseconds;
			company_kind_activitiesStore = new protoStore.company_kind_activitiesStore();
			m_Stores["company_kind_activities"] = company_kind_activitiesStore;
			now = DateTime.Now;
			company_kind_activitiesStore.Select(_connection);
			m_LoadingTimes["company_kind_activities select"] = (DateTime.Now - now).TotalMilliseconds;
			company_photosStore = new protoStore.company_photosStore();
			m_Stores["company_photos"] = company_photosStore;
			now = DateTime.Now;
			company_photosStore.Select(_connection);
			m_LoadingTimes["company_photos select"] = (DateTime.Now - now).TotalMilliseconds;
			genresStore = new protoStore.genresStore();
			m_Stores["genres"] = genresStore;
			now = DateTime.Now;
			genresStore.Select(_connection);
			m_LoadingTimes["genres select"] = (DateTime.Now - now).TotalMilliseconds;
			main_page_widgetsStore = new protoStore.main_page_widgetsStore();
			m_Stores["main_page_widgets"] = main_page_widgetsStore;
			now = DateTime.Now;
			main_page_widgetsStore.Select(_connection);
			m_LoadingTimes["main_page_widgets select"] = (DateTime.Now - now).TotalMilliseconds;
			news_imagesStore = new protoStore.news_imagesStore();
			m_Stores["news_images"] = news_imagesStore;
			now = DateTime.Now;
			news_imagesStore.Select(_connection);
			m_LoadingTimes["news_images select"] = (DateTime.Now - now).TotalMilliseconds;
			news_marksStore = new protoStore.news_marksStore();
			m_Stores["news_marks"] = news_marksStore;
			now = DateTime.Now;
			news_marksStore.Select(_connection);
			m_LoadingTimes["news_marks select"] = (DateTime.Now - now).TotalMilliseconds;
			news_videosStore = new protoStore.news_videosStore();
			m_Stores["news_videos"] = news_videosStore;
			now = DateTime.Now;
			news_videosStore.Select(_connection);
			m_LoadingTimes["news_videos select"] = (DateTime.Now - now).TotalMilliseconds;
			photobank_categoriesStore = new protoStore.photobank_categoriesStore();
			m_Stores["photobank_categories"] = photobank_categoriesStore;
			now = DateTime.Now;
			photobank_categoriesStore.Select(_connection);
			m_LoadingTimes["photobank_categories select"] = (DateTime.Now - now).TotalMilliseconds;
			photobank_licensesStore = new protoStore.photobank_licensesStore();
			m_Stores["photobank_licenses"] = photobank_licensesStore;
			now = DateTime.Now;
			photobank_licensesStore.Select(_connection);
			m_LoadingTimes["photobank_licenses select"] = (DateTime.Now - now).TotalMilliseconds;
			photobank_photos_ratingStore = new protoStore.photobank_photos_ratingStore();
			m_Stores["photobank_photos_rating"] = photobank_photos_ratingStore;
			now = DateTime.Now;
			photobank_photos_ratingStore.Select(_connection);
			m_LoadingTimes["photobank_photos_rating select"] = (DateTime.Now - now).TotalMilliseconds;
			photobank_tagsStore = new protoStore.photobank_tagsStore();
			m_Stores["photobank_tags"] = photobank_tagsStore;
			now = DateTime.Now;
			photobank_tagsStore.Select(_connection);
			m_LoadingTimes["photobank_tags select"] = (DateTime.Now - now).TotalMilliseconds;
			regionsStore = new protoStore.regionsStore();
			m_Stores["regions"] = regionsStore;
			now = DateTime.Now;
			regionsStore.Select(_connection);
			m_LoadingTimes["regions select"] = (DateTime.Now - now).TotalMilliseconds;
			restaurant_commentsStore = new protoStore.restaurant_commentsStore();
			m_Stores["restaurant_comments"] = restaurant_commentsStore;
			now = DateTime.Now;
			restaurant_commentsStore.Select(_connection);
			m_LoadingTimes["restaurant_comments select"] = (DateTime.Now - now).TotalMilliseconds;
			restaurant_entriesStore = new protoStore.restaurant_entriesStore();
			m_Stores["restaurant_entries"] = restaurant_entriesStore;
			now = DateTime.Now;
			restaurant_entriesStore.Select(_connection);
			m_LoadingTimes["restaurant_entries select"] = (DateTime.Now - now).TotalMilliseconds;
			restaurant_entry_categoriesStore = new protoStore.restaurant_entry_categoriesStore();
			m_Stores["restaurant_entry_categories"] = restaurant_entry_categoriesStore;
			now = DateTime.Now;
			restaurant_entry_categoriesStore.Select(_connection);
			m_LoadingTimes["restaurant_entry_categories select"] = (DateTime.Now - now).TotalMilliseconds;
			restaurant_eventsStore = new protoStore.restaurant_eventsStore();
			m_Stores["restaurant_events"] = restaurant_eventsStore;
			now = DateTime.Now;
			restaurant_eventsStore.Select(_connection);
			m_LoadingTimes["restaurant_events select"] = (DateTime.Now - now).TotalMilliseconds;
			restaurant_photosStore = new protoStore.restaurant_photosStore();
			m_Stores["restaurant_photos"] = restaurant_photosStore;
			now = DateTime.Now;
			restaurant_photosStore.Select(_connection);
			m_LoadingTimes["restaurant_photos select"] = (DateTime.Now - now).TotalMilliseconds;
			restaurants_entriesStore = new protoStore.restaurants_entriesStore();
			m_Stores["restaurants_entries"] = restaurants_entriesStore;
			now = DateTime.Now;
			restaurants_entriesStore.Select(_connection);
			m_LoadingTimes["restaurants_entries select"] = (DateTime.Now - now).TotalMilliseconds;
			vacancies_entriesStore = new protoStore.vacancies_entriesStore();
			m_Stores["vacancies_entries"] = vacancies_entriesStore;
			now = DateTime.Now;
			vacancies_entriesStore.Select(_connection);
			m_LoadingTimes["vacancies_entries select"] = (DateTime.Now - now).TotalMilliseconds;
			vacancies_professionalsStore = new protoStore.vacancies_professionalsStore();
			m_Stores["vacancies_professionals"] = vacancies_professionalsStore;
			now = DateTime.Now;
			vacancies_professionalsStore.Select(_connection);
			m_LoadingTimes["vacancies_professionals select"] = (DateTime.Now - now).TotalMilliseconds;
			vacancy_professionalsStore = new protoStore.vacancy_professionalsStore();
			m_Stores["vacancy_professionals"] = vacancy_professionalsStore;
			now = DateTime.Now;
			vacancy_professionalsStore.Select(_connection);
			m_LoadingTimes["vacancy_professionals select"] = (DateTime.Now - now).TotalMilliseconds;
			pagesStore = new protoStore.pagesStore();
			m_Stores["pages"] = pagesStore;
			now = DateTime.Now;
			pagesStore.Select(_connection);
			m_LoadingTimes["pages select"] = (DateTime.Now - now).TotalMilliseconds;
			pages_filesStore = new protoStore.pages_filesStore();
			m_Stores["pages_files"] = pages_filesStore;
			now = DateTime.Now;
			pages_filesStore.Select(_connection);
			m_LoadingTimes["pages_files select"] = (DateTime.Now - now).TotalMilliseconds;
			newsStore = new protoStore.newsStore();
			m_Stores["news"] = newsStore;
			now = DateTime.Now;
			newsStore.Select(_connection);
			m_LoadingTimes["news select"] = (DateTime.Now - now).TotalMilliseconds;
			photobank_photo_tagsStore = new protoStore.photobank_photo_tagsStore();
			m_Stores["photobank_photo_tags"] = photobank_photo_tagsStore;
			now = DateTime.Now;
			photobank_photo_tagsStore.Select(_connection);
			m_LoadingTimes["photobank_photo_tags select"] = (DateTime.Now - now).TotalMilliseconds;
			resumes_entriesStore = new protoStore.resumes_entriesStore();
			m_Stores["resumes_entries"] = resumes_entriesStore;
			now = DateTime.Now;
			resumes_entriesStore.Select(_connection);
			m_LoadingTimes["resumes_entries select"] = (DateTime.Now - now).TotalMilliseconds;
			resume_educationsStore = new protoStore.resume_educationsStore();
			m_Stores["resume_educations"] = resume_educationsStore;
			now = DateTime.Now;
			resume_educationsStore.Select(_connection);
			m_LoadingTimes["resume_educations select"] = (DateTime.Now - now).TotalMilliseconds;
			resume_worksStore = new protoStore.resume_worksStore();
			m_Stores["resume_works"] = resume_worksStore;
			now = DateTime.Now;
			resume_worksStore.Select(_connection);
			m_LoadingTimes["resume_works select"] = (DateTime.Now - now).TotalMilliseconds;
			resume_trainingsStore = new protoStore.resume_trainingsStore();
			m_Stores["resume_trainings"] = resume_trainingsStore;
			now = DateTime.Now;
			resume_trainingsStore.Select(_connection);
			m_LoadingTimes["resume_trainings select"] = (DateTime.Now - now).TotalMilliseconds;
			resume_linksStore = new protoStore.resume_linksStore();
			m_Stores["resume_links"] = resume_linksStore;
			now = DateTime.Now;
			resume_linksStore.Select(_connection);
			m_LoadingTimes["resume_links select"] = (DateTime.Now - now).TotalMilliseconds;
			resumes_professionalsStore = new protoStore.resumes_professionalsStore();
			m_Stores["resumes_professionals"] = resumes_professionalsStore;
			now = DateTime.Now;
			resumes_professionalsStore.Select(_connection);
			m_LoadingTimes["resumes_professionals select"] = (DateTime.Now - now).TotalMilliseconds;
			vacancy_entry_categoriesStore = new protoStore.vacancy_entry_categoriesStore();
			m_Stores["vacancy_entry_categories"] = vacancy_entry_categoriesStore;
			now = DateTime.Now;
			vacancy_entry_categoriesStore.Select(_connection);
			m_LoadingTimes["vacancy_entry_categories select"] = (DateTime.Now - now).TotalMilliseconds;
			ad_advert_requestsStore = new protoStore.ad_advert_requestsStore();
			m_Stores["ad_advert_requests"] = ad_advert_requestsStore;
			now = DateTime.Now;
			ad_advert_requestsStore.Select(_connection);
			m_LoadingTimes["ad_advert_requests select"] = (DateTime.Now - now).TotalMilliseconds;
			sales_commentsStore = new protoStore.sales_commentsStore();
			m_Stores["sales_comments"] = sales_commentsStore;
			now = DateTime.Now;
			sales_commentsStore.Select(_connection);
			m_LoadingTimes["sales_comments select"] = (DateTime.Now - now).TotalMilliseconds;
			sale_categoriesStore = new protoStore.sale_categoriesStore();
			m_Stores["sale_categories"] = sale_categoriesStore;
			now = DateTime.Now;
			sale_categoriesStore.Select(_connection);
			m_LoadingTimes["sale_categories select"] = (DateTime.Now - now).TotalMilliseconds;
			restaurants_reserveStore = new protoStore.restaurants_reserveStore();
			m_Stores["restaurants_reserve"] = restaurants_reserveStore;
			now = DateTime.Now;
			restaurants_reserveStore.Select(_connection);
			m_LoadingTimes["restaurants_reserve select"] = (DateTime.Now - now).TotalMilliseconds;
			company_ownershipsStore = new protoStore.company_ownershipsStore();
			m_Stores["company_ownerships"] = company_ownershipsStore;
			now = DateTime.Now;
			company_ownershipsStore.Select(_connection);
			m_LoadingTimes["company_ownerships select"] = (DateTime.Now - now).TotalMilliseconds;
			vacancy_facility_variantsStore = new protoStore.vacancy_facility_variantsStore();
			m_Stores["vacancy_facility_variants"] = vacancy_facility_variantsStore;
			now = DateTime.Now;
			vacancy_facility_variantsStore.Select(_connection);
			m_LoadingTimes["vacancy_facility_variants select"] = (DateTime.Now - now).TotalMilliseconds;
			vacancies_facilitiesStore = new protoStore.vacancies_facilitiesStore();
			m_Stores["vacancies_facilities"] = vacancies_facilitiesStore;
			now = DateTime.Now;
			vacancies_facilitiesStore.Select(_connection);
			m_LoadingTimes["vacancies_facilities select"] = (DateTime.Now - now).TotalMilliseconds;
			resumes_facilitiesStore = new protoStore.resumes_facilitiesStore();
			m_Stores["resumes_facilities"] = resumes_facilitiesStore;
			now = DateTime.Now;
			resumes_facilitiesStore.Select(_connection);
			m_LoadingTimes["resumes_facilities select"] = (DateTime.Now - now).TotalMilliseconds;
			companiesStore = new protoStore.companiesStore();
			m_Stores["companies"] = companiesStore;
			now = DateTime.Now;
			companiesStore.Select(_connection);
			m_LoadingTimes["companies select"] = (DateTime.Now - now).TotalMilliseconds;
			my_messagesStore = new protoStore.my_messagesStore();
			m_Stores["my_messages"] = my_messagesStore;
			now = DateTime.Now;
			my_messagesStore.Select(_connection);
			m_LoadingTimes["my_messages select"] = (DateTime.Now - now).TotalMilliseconds;
			actions_ratingStore = new protoStore.actions_ratingStore();
			m_Stores["actions_rating"] = actions_ratingStore;
			now = DateTime.Now;
			actions_ratingStore.Select(_connection);
			m_LoadingTimes["actions_rating select"] = (DateTime.Now - now).TotalMilliseconds;
			blog_marksStore = new protoStore.blog_marksStore();
			m_Stores["blog_marks"] = blog_marksStore;
			now = DateTime.Now;
			blog_marksStore.Select(_connection);
			m_LoadingTimes["blog_marks select"] = (DateTime.Now - now).TotalMilliseconds;
			company_ratingStore = new protoStore.company_ratingStore();
			m_Stores["company_rating"] = company_ratingStore;
			now = DateTime.Now;
			company_ratingStore.Select(_connection);
			m_LoadingTimes["company_rating select"] = (DateTime.Now - now).TotalMilliseconds;
			places_ratingStore = new protoStore.places_ratingStore();
			m_Stores["places_rating"] = places_ratingStore;
			now = DateTime.Now;
			places_ratingStore.Select(_connection);
			m_LoadingTimes["places_rating select"] = (DateTime.Now - now).TotalMilliseconds;
			restaurant_ratingStore = new protoStore.restaurant_ratingStore();
			m_Stores["restaurant_rating"] = restaurant_ratingStore;
			now = DateTime.Now;
			restaurant_ratingStore.Select(_connection);
			m_LoadingTimes["restaurant_rating select"] = (DateTime.Now - now).TotalMilliseconds;
			blogsStore = new protoStore.blogsStore();
			m_Stores["blogs"] = blogsStore;
			now = DateTime.Now;
			blogsStore.Select(_connection);
			m_LoadingTimes["blogs select"] = (DateTime.Now - now).TotalMilliseconds;
			photobank_cartStore = new protoStore.photobank_cartStore();
			m_Stores["photobank_cart"] = photobank_cartStore;
			now = DateTime.Now;
			photobank_cartStore.Select(_connection);
			m_LoadingTimes["photobank_cart select"] = (DateTime.Now - now).TotalMilliseconds;
			photobank_obtainedStore = new protoStore.photobank_obtainedStore();
			m_Stores["photobank_obtained"] = photobank_obtainedStore;
			now = DateTime.Now;
			photobank_obtainedStore.Select(_connection);
			m_LoadingTimes["photobank_obtained select"] = (DateTime.Now - now).TotalMilliseconds;
			accountsStore = new protoStore.accountsStore();
			m_Stores["accounts"] = accountsStore;
			now = DateTime.Now;
			accountsStore.Select(_connection);
			m_LoadingTimes["accounts select"] = (DateTime.Now - now).TotalMilliseconds;
			blog_photosStore = new protoStore.blog_photosStore();
			m_Stores["blog_photos"] = blog_photosStore;
			now = DateTime.Now;
			blog_photosStore.Select(_connection);
			m_LoadingTimes["blog_photos select"] = (DateTime.Now - now).TotalMilliseconds;
			resumesStore = new protoStore.resumesStore();
			m_Stores["resumes"] = resumesStore;
			now = DateTime.Now;
			resumesStore.Select(_connection);
			m_LoadingTimes["resumes select"] = (DateTime.Now - now).TotalMilliseconds;
			restaurantsStore = new protoStore.restaurantsStore();
			m_Stores["restaurants"] = restaurantsStore;
			now = DateTime.Now;
			restaurantsStore.Select(_connection);
			m_LoadingTimes["restaurants select"] = (DateTime.Now - now).TotalMilliseconds;
			ad_advertismentsStore = new protoStore.ad_advertismentsStore();
			m_Stores["ad_advertisments"] = ad_advertismentsStore;
			now = DateTime.Now;
			ad_advertismentsStore.Select(_connection);
			m_LoadingTimes["ad_advertisments select"] = (DateTime.Now - now).TotalMilliseconds;
			accounts_favoritesStore = new protoStore.accounts_favoritesStore();
			m_Stores["accounts_favorites"] = accounts_favoritesStore;
			now = DateTime.Now;
			accounts_favoritesStore.Select(_connection);
			m_LoadingTimes["accounts_favorites select"] = (DateTime.Now - now).TotalMilliseconds;
			quizzesStore = new protoStore.quizzesStore();
			m_Stores["quizzes"] = quizzesStore;
			now = DateTime.Now;
			quizzesStore.Select(_connection);
			m_LoadingTimes["quizzes select"] = (DateTime.Now - now).TotalMilliseconds;
			quiz_optionsStore = new protoStore.quiz_optionsStore();
			m_Stores["quiz_options"] = quiz_optionsStore;
			now = DateTime.Now;
			quiz_optionsStore.Select(_connection);
			m_LoadingTimes["quiz_options select"] = (DateTime.Now - now).TotalMilliseconds;
			quiz_resultsStore = new protoStore.quiz_resultsStore();
			m_Stores["quiz_results"] = quiz_resultsStore;
			now = DateTime.Now;
			quiz_resultsStore.Select(_connection);
			m_LoadingTimes["quiz_results select"] = (DateTime.Now - now).TotalMilliseconds;
			placesStore = new protoStore.placesStore();
			m_Stores["places"] = placesStore;
			now = DateTime.Now;
			placesStore.Select(_connection);
			m_LoadingTimes["places select"] = (DateTime.Now - now).TotalMilliseconds;
			actions_placesStore = new protoStore.actions_placesStore();
			m_Stores["actions_places"] = actions_placesStore;
			now = DateTime.Now;
			actions_placesStore.Select(_connection);
			m_LoadingTimes["actions_places select"] = (DateTime.Now - now).TotalMilliseconds;
			actions_scheduleStore = new protoStore.actions_scheduleStore();
			m_Stores["actions_schedule"] = actions_scheduleStore;
			now = DateTime.Now;
			actions_scheduleStore.Select(_connection);
			m_LoadingTimes["actions_schedule select"] = (DateTime.Now - now).TotalMilliseconds;
			vacanciesStore = new protoStore.vacanciesStore();
			m_Stores["vacancies"] = vacanciesStore;
			now = DateTime.Now;
			vacanciesStore.Select(_connection);
			m_LoadingTimes["vacancies select"] = (DateTime.Now - now).TotalMilliseconds;
			vacancy_entriesStore = new protoStore.vacancy_entriesStore();
			m_Stores["vacancy_entries"] = vacancy_entriesStore;
			now = DateTime.Now;
			vacancy_entriesStore.Select(_connection);
			m_LoadingTimes["vacancy_entries select"] = (DateTime.Now - now).TotalMilliseconds;
			vacancy_facilitiesStore = new protoStore.vacancy_facilitiesStore();
			m_Stores["vacancy_facilities"] = vacancy_facilitiesStore;
			now = DateTime.Now;
			vacancy_facilitiesStore.Select(_connection);
			m_LoadingTimes["vacancy_facilities select"] = (DateTime.Now - now).TotalMilliseconds;
			ad_fieldsStore = new protoStore.ad_fieldsStore();
			m_Stores["ad_fields"] = ad_fieldsStore;
			now = DateTime.Now;
			ad_fieldsStore.Select(_connection);
			m_LoadingTimes["ad_fields select"] = (DateTime.Now - now).TotalMilliseconds;
			photobank_related_photosStore = new protoStore.photobank_related_photosStore();
			m_Stores["photobank_related_photos"] = photobank_related_photosStore;
			now = DateTime.Now;
			photobank_related_photosStore.Select(_connection);
			m_LoadingTimes["photobank_related_photos select"] = (DateTime.Now - now).TotalMilliseconds;
			photobank_photo_pricesStore = new protoStore.photobank_photo_pricesStore();
			m_Stores["photobank_photo_prices"] = photobank_photo_pricesStore;
			now = DateTime.Now;
			photobank_photo_pricesStore.Select(_connection);
			m_LoadingTimes["photobank_photo_prices select"] = (DateTime.Now - now).TotalMilliseconds;
			photobank_photosStore = new protoStore.photobank_photosStore();
			m_Stores["photobank_photos"] = photobank_photosStore;
			now = DateTime.Now;
			photobank_photosStore.Select(_connection);
			m_LoadingTimes["photobank_photos select"] = (DateTime.Now - now).TotalMilliseconds;
			news_categoriesStore = new protoStore.news_categoriesStore();
			m_Stores["news_categories"] = news_categoriesStore;
			now = DateTime.Now;
			news_categoriesStore.Select(_connection);
			m_LoadingTimes["news_categories select"] = (DateTime.Now - now).TotalMilliseconds;
			photobank_user_albumsStore = new protoStore.photobank_user_albumsStore();
			m_Stores["photobank_user_albums"] = photobank_user_albumsStore;
			now = DateTime.Now;
			photobank_user_albumsStore.Select(_connection);
			m_LoadingTimes["photobank_user_albums select"] = (DateTime.Now - now).TotalMilliseconds;
			actionsStore = new protoStore.actionsStore();
			m_Stores["actions"] = actionsStore;
			now = DateTime.Now;
			actionsStore.Select(_connection);
			m_LoadingTimes["actions select"] = (DateTime.Now - now).TotalMilliseconds;
			ad_photosStore = new protoStore.ad_photosStore();
			m_Stores["ad_photos"] = ad_photosStore;
			now = DateTime.Now;
			ad_photosStore.Select(_connection);
			m_LoadingTimes["ad_photos select"] = (DateTime.Now - now).TotalMilliseconds;
			salesStore = new protoStore.salesStore();
			m_Stores["sales"] = salesStore;
			now = DateTime.Now;
			salesStore.Select(_connection);
			m_LoadingTimes["sales select"] = (DateTime.Now - now).TotalMilliseconds;
			sale_typesStore = new protoStore.sale_typesStore();
			m_Stores["sale_types"] = sale_typesStore;
			now = DateTime.Now;
			sale_typesStore.Select(_connection);
			m_LoadingTimes["sale_types select"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			account_rolesStore.LoadAggregations(this);
			m_LoadingTimes["account_roles aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			action_categoriesStore.LoadAggregations(this);
			m_LoadingTimes["action_categories aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			actions_commentsStore.LoadAggregations(this);
			m_LoadingTimes["actions_comments aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			actions_genresStore.LoadAggregations(this);
			m_LoadingTimes["actions_genres aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			actions_photosStore.LoadAggregations(this);
			m_LoadingTimes["actions_photos aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			ad_categoriesStore.LoadAggregations(this);
			m_LoadingTimes["ad_categories aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			ad_field_descriptionsStore.LoadAggregations(this);
			m_LoadingTimes["ad_field_descriptions aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			ad_lookup_valuesStore.LoadAggregations(this);
			m_LoadingTimes["ad_lookup_values aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			blog_categoriesStore.LoadAggregations(this);
			m_LoadingTimes["blog_categories aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			blog_commentsStore.LoadAggregations(this);
			m_LoadingTimes["blog_comments aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			blog_lastviewsStore.LoadAggregations(this);
			m_LoadingTimes["blog_lastviews aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			citiesStore.LoadAggregations(this);
			m_LoadingTimes["cities aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			city_pricesStore.LoadAggregations(this);
			m_LoadingTimes["city_prices aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			city_prices_iconsStore.LoadAggregations(this);
			m_LoadingTimes["city_prices_icons aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			comments_newsStore.LoadAggregations(this);
			m_LoadingTimes["comments_news aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			companies_kind_activitiesStore.LoadAggregations(this);
			m_LoadingTimes["companies_kind_activities aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			company_categoriesStore.LoadAggregations(this);
			m_LoadingTimes["company_categories aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			company_commentsStore.LoadAggregations(this);
			m_LoadingTimes["company_comments aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			company_filesStore.LoadAggregations(this);
			m_LoadingTimes["company_files aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			company_kind_activitiesStore.LoadAggregations(this);
			m_LoadingTimes["company_kind_activities aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			company_photosStore.LoadAggregations(this);
			m_LoadingTimes["company_photos aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			genresStore.LoadAggregations(this);
			m_LoadingTimes["genres aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			main_page_widgetsStore.LoadAggregations(this);
			m_LoadingTimes["main_page_widgets aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			news_imagesStore.LoadAggregations(this);
			m_LoadingTimes["news_images aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			news_marksStore.LoadAggregations(this);
			m_LoadingTimes["news_marks aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			news_videosStore.LoadAggregations(this);
			m_LoadingTimes["news_videos aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			photobank_categoriesStore.LoadAggregations(this);
			m_LoadingTimes["photobank_categories aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			photobank_licensesStore.LoadAggregations(this);
			m_LoadingTimes["photobank_licenses aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			photobank_photos_ratingStore.LoadAggregations(this);
			m_LoadingTimes["photobank_photos_rating aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			photobank_tagsStore.LoadAggregations(this);
			m_LoadingTimes["photobank_tags aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			regionsStore.LoadAggregations(this);
			m_LoadingTimes["regions aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			restaurant_commentsStore.LoadAggregations(this);
			m_LoadingTimes["restaurant_comments aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			restaurant_entriesStore.LoadAggregations(this);
			m_LoadingTimes["restaurant_entries aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			restaurant_entry_categoriesStore.LoadAggregations(this);
			m_LoadingTimes["restaurant_entry_categories aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			restaurant_eventsStore.LoadAggregations(this);
			m_LoadingTimes["restaurant_events aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			restaurant_photosStore.LoadAggregations(this);
			m_LoadingTimes["restaurant_photos aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			restaurants_entriesStore.LoadAggregations(this);
			m_LoadingTimes["restaurants_entries aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			vacancies_entriesStore.LoadAggregations(this);
			m_LoadingTimes["vacancies_entries aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			vacancies_professionalsStore.LoadAggregations(this);
			m_LoadingTimes["vacancies_professionals aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			vacancy_professionalsStore.LoadAggregations(this);
			m_LoadingTimes["vacancy_professionals aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			pagesStore.LoadAggregations(this);
			m_LoadingTimes["pages aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			pages_filesStore.LoadAggregations(this);
			m_LoadingTimes["pages_files aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			newsStore.LoadAggregations(this);
			m_LoadingTimes["news aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			photobank_photo_tagsStore.LoadAggregations(this);
			m_LoadingTimes["photobank_photo_tags aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			resumes_entriesStore.LoadAggregations(this);
			m_LoadingTimes["resumes_entries aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			resume_educationsStore.LoadAggregations(this);
			m_LoadingTimes["resume_educations aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			resume_worksStore.LoadAggregations(this);
			m_LoadingTimes["resume_works aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			resume_trainingsStore.LoadAggregations(this);
			m_LoadingTimes["resume_trainings aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			resume_linksStore.LoadAggregations(this);
			m_LoadingTimes["resume_links aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			resumes_professionalsStore.LoadAggregations(this);
			m_LoadingTimes["resumes_professionals aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			vacancy_entry_categoriesStore.LoadAggregations(this);
			m_LoadingTimes["vacancy_entry_categories aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			ad_advert_requestsStore.LoadAggregations(this);
			m_LoadingTimes["ad_advert_requests aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			sales_commentsStore.LoadAggregations(this);
			m_LoadingTimes["sales_comments aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			sale_categoriesStore.LoadAggregations(this);
			m_LoadingTimes["sale_categories aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			restaurants_reserveStore.LoadAggregations(this);
			m_LoadingTimes["restaurants_reserve aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			company_ownershipsStore.LoadAggregations(this);
			m_LoadingTimes["company_ownerships aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			vacancy_facility_variantsStore.LoadAggregations(this);
			m_LoadingTimes["vacancy_facility_variants aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			vacancies_facilitiesStore.LoadAggregations(this);
			m_LoadingTimes["vacancies_facilities aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			resumes_facilitiesStore.LoadAggregations(this);
			m_LoadingTimes["resumes_facilities aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			companiesStore.LoadAggregations(this);
			m_LoadingTimes["companies aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			my_messagesStore.LoadAggregations(this);
			m_LoadingTimes["my_messages aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			actions_ratingStore.LoadAggregations(this);
			m_LoadingTimes["actions_rating aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			blog_marksStore.LoadAggregations(this);
			m_LoadingTimes["blog_marks aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			company_ratingStore.LoadAggregations(this);
			m_LoadingTimes["company_rating aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			places_ratingStore.LoadAggregations(this);
			m_LoadingTimes["places_rating aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			restaurant_ratingStore.LoadAggregations(this);
			m_LoadingTimes["restaurant_rating aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			blogsStore.LoadAggregations(this);
			m_LoadingTimes["blogs aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			photobank_cartStore.LoadAggregations(this);
			m_LoadingTimes["photobank_cart aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			photobank_obtainedStore.LoadAggregations(this);
			m_LoadingTimes["photobank_obtained aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			accountsStore.LoadAggregations(this);
			m_LoadingTimes["accounts aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			blog_photosStore.LoadAggregations(this);
			m_LoadingTimes["blog_photos aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			resumesStore.LoadAggregations(this);
			m_LoadingTimes["resumes aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			restaurantsStore.LoadAggregations(this);
			m_LoadingTimes["restaurants aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			ad_advertismentsStore.LoadAggregations(this);
			m_LoadingTimes["ad_advertisments aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			accounts_favoritesStore.LoadAggregations(this);
			m_LoadingTimes["accounts_favorites aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			quizzesStore.LoadAggregations(this);
			m_LoadingTimes["quizzes aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			quiz_optionsStore.LoadAggregations(this);
			m_LoadingTimes["quiz_options aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			quiz_resultsStore.LoadAggregations(this);
			m_LoadingTimes["quiz_results aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			placesStore.LoadAggregations(this);
			m_LoadingTimes["places aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			actions_placesStore.LoadAggregations(this);
			m_LoadingTimes["actions_places aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			actions_scheduleStore.LoadAggregations(this);
			m_LoadingTimes["actions_schedule aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			vacanciesStore.LoadAggregations(this);
			m_LoadingTimes["vacancies aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			vacancy_entriesStore.LoadAggregations(this);
			m_LoadingTimes["vacancy_entries aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			vacancy_facilitiesStore.LoadAggregations(this);
			m_LoadingTimes["vacancy_facilities aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			ad_fieldsStore.LoadAggregations(this);
			m_LoadingTimes["ad_fields aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			photobank_related_photosStore.LoadAggregations(this);
			m_LoadingTimes["photobank_related_photos aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			photobank_photo_pricesStore.LoadAggregations(this);
			m_LoadingTimes["photobank_photo_prices aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			photobank_photosStore.LoadAggregations(this);
			m_LoadingTimes["photobank_photos aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			news_categoriesStore.LoadAggregations(this);
			m_LoadingTimes["news_categories aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			photobank_user_albumsStore.LoadAggregations(this);
			m_LoadingTimes["photobank_user_albums aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			actionsStore.LoadAggregations(this);
			m_LoadingTimes["actions aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			ad_photosStore.LoadAggregations(this);
			m_LoadingTimes["ad_photos aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			salesStore.LoadAggregations(this);
			m_LoadingTimes["sales aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			sale_typesStore.LoadAggregations(this);
			m_LoadingTimes["sale_types aggregations"] = (DateTime.Now - now).TotalMilliseconds;
		}
		public static Meridian Default
		{
			get
			{
				return m_Meridian;
			}
		}
		private static Meridian m_Meridian = new Meridian();
		public void TestStores()
		{
			Tracer.I.Debug("Loaded account_rolesStore: {0}", account_rolesStore.All().Count);
			Tracer.I.Debug("Loaded action_categoriesStore: {0}", action_categoriesStore.All().Count);
			Tracer.I.Debug("Loaded actions_commentsStore: {0}", actions_commentsStore.All().Count);
			Tracer.I.Debug("Loaded actions_genresStore: {0}", actions_genresStore.All().Count);
			Tracer.I.Debug("Loaded actions_photosStore: {0}", actions_photosStore.All().Count);
			Tracer.I.Debug("Loaded ad_categoriesStore: {0}", ad_categoriesStore.All().Count);
			Tracer.I.Debug("Loaded ad_field_descriptionsStore: {0}", ad_field_descriptionsStore.All().Count);
			Tracer.I.Debug("Loaded ad_lookup_valuesStore: {0}", ad_lookup_valuesStore.All().Count);
			Tracer.I.Debug("Loaded blog_categoriesStore: {0}", blog_categoriesStore.All().Count);
			Tracer.I.Debug("Loaded blog_commentsStore: {0}", blog_commentsStore.All().Count);
			Tracer.I.Debug("Loaded blog_lastviewsStore: {0}", blog_lastviewsStore.All().Count);
			Tracer.I.Debug("Loaded citiesStore: {0}", citiesStore.All().Count);
			Tracer.I.Debug("Loaded city_pricesStore: {0}", city_pricesStore.All().Count);
			Tracer.I.Debug("Loaded city_prices_iconsStore: {0}", city_prices_iconsStore.All().Count);
			Tracer.I.Debug("Loaded comments_newsStore: {0}", comments_newsStore.All().Count);
			Tracer.I.Debug("Loaded companies_kind_activitiesStore: {0}", companies_kind_activitiesStore.All().Count);
			Tracer.I.Debug("Loaded company_categoriesStore: {0}", company_categoriesStore.All().Count);
			Tracer.I.Debug("Loaded company_commentsStore: {0}", company_commentsStore.All().Count);
			Tracer.I.Debug("Loaded company_filesStore: {0}", company_filesStore.All().Count);
			Tracer.I.Debug("Loaded company_kind_activitiesStore: {0}", company_kind_activitiesStore.All().Count);
			Tracer.I.Debug("Loaded company_photosStore: {0}", company_photosStore.All().Count);
			Tracer.I.Debug("Loaded genresStore: {0}", genresStore.All().Count);
			Tracer.I.Debug("Loaded main_page_widgetsStore: {0}", main_page_widgetsStore.All().Count);
			Tracer.I.Debug("Loaded news_imagesStore: {0}", news_imagesStore.All().Count);
			Tracer.I.Debug("Loaded news_marksStore: {0}", news_marksStore.All().Count);
			Tracer.I.Debug("Loaded news_videosStore: {0}", news_videosStore.All().Count);
			Tracer.I.Debug("Loaded photobank_categoriesStore: {0}", photobank_categoriesStore.All().Count);
			Tracer.I.Debug("Loaded photobank_licensesStore: {0}", photobank_licensesStore.All().Count);
			Tracer.I.Debug("Loaded photobank_photos_ratingStore: {0}", photobank_photos_ratingStore.All().Count);
			Tracer.I.Debug("Loaded photobank_tagsStore: {0}", photobank_tagsStore.All().Count);
			Tracer.I.Debug("Loaded regionsStore: {0}", regionsStore.All().Count);
			Tracer.I.Debug("Loaded restaurant_commentsStore: {0}", restaurant_commentsStore.All().Count);
			Tracer.I.Debug("Loaded restaurant_entriesStore: {0}", restaurant_entriesStore.All().Count);
			Tracer.I.Debug("Loaded restaurant_entry_categoriesStore: {0}", restaurant_entry_categoriesStore.All().Count);
			Tracer.I.Debug("Loaded restaurant_eventsStore: {0}", restaurant_eventsStore.All().Count);
			Tracer.I.Debug("Loaded restaurant_photosStore: {0}", restaurant_photosStore.All().Count);
			Tracer.I.Debug("Loaded restaurants_entriesStore: {0}", restaurants_entriesStore.All().Count);
			Tracer.I.Debug("Loaded vacancies_entriesStore: {0}", vacancies_entriesStore.All().Count);
			Tracer.I.Debug("Loaded vacancies_professionalsStore: {0}", vacancies_professionalsStore.All().Count);
			Tracer.I.Debug("Loaded vacancy_professionalsStore: {0}", vacancy_professionalsStore.All().Count);
			Tracer.I.Debug("Loaded pagesStore: {0}", pagesStore.All().Count);
			Tracer.I.Debug("Loaded pages_filesStore: {0}", pages_filesStore.All().Count);
			Tracer.I.Debug("Loaded newsStore: {0}", newsStore.All().Count);
			Tracer.I.Debug("Loaded photobank_photo_tagsStore: {0}", photobank_photo_tagsStore.All().Count);
			Tracer.I.Debug("Loaded resumes_entriesStore: {0}", resumes_entriesStore.All().Count);
			Tracer.I.Debug("Loaded resume_educationsStore: {0}", resume_educationsStore.All().Count);
			Tracer.I.Debug("Loaded resume_worksStore: {0}", resume_worksStore.All().Count);
			Tracer.I.Debug("Loaded resume_trainingsStore: {0}", resume_trainingsStore.All().Count);
			Tracer.I.Debug("Loaded resume_linksStore: {0}", resume_linksStore.All().Count);
			Tracer.I.Debug("Loaded resumes_professionalsStore: {0}", resumes_professionalsStore.All().Count);
			Tracer.I.Debug("Loaded vacancy_entry_categoriesStore: {0}", vacancy_entry_categoriesStore.All().Count);
			Tracer.I.Debug("Loaded ad_advert_requestsStore: {0}", ad_advert_requestsStore.All().Count);
			Tracer.I.Debug("Loaded sales_commentsStore: {0}", sales_commentsStore.All().Count);
			Tracer.I.Debug("Loaded sale_categoriesStore: {0}", sale_categoriesStore.All().Count);
			Tracer.I.Debug("Loaded restaurants_reserveStore: {0}", restaurants_reserveStore.All().Count);
			Tracer.I.Debug("Loaded company_ownershipsStore: {0}", company_ownershipsStore.All().Count);
			Tracer.I.Debug("Loaded vacancy_facility_variantsStore: {0}", vacancy_facility_variantsStore.All().Count);
			Tracer.I.Debug("Loaded vacancies_facilitiesStore: {0}", vacancies_facilitiesStore.All().Count);
			Tracer.I.Debug("Loaded resumes_facilitiesStore: {0}", resumes_facilitiesStore.All().Count);
			Tracer.I.Debug("Loaded companiesStore: {0}", companiesStore.All().Count);
			Tracer.I.Debug("Loaded my_messagesStore: {0}", my_messagesStore.All().Count);
			Tracer.I.Debug("Loaded actions_ratingStore: {0}", actions_ratingStore.All().Count);
			Tracer.I.Debug("Loaded blog_marksStore: {0}", blog_marksStore.All().Count);
			Tracer.I.Debug("Loaded company_ratingStore: {0}", company_ratingStore.All().Count);
			Tracer.I.Debug("Loaded places_ratingStore: {0}", places_ratingStore.All().Count);
			Tracer.I.Debug("Loaded restaurant_ratingStore: {0}", restaurant_ratingStore.All().Count);
			Tracer.I.Debug("Loaded blogsStore: {0}", blogsStore.All().Count);
			Tracer.I.Debug("Loaded photobank_cartStore: {0}", photobank_cartStore.All().Count);
			Tracer.I.Debug("Loaded photobank_obtainedStore: {0}", photobank_obtainedStore.All().Count);
			Tracer.I.Debug("Loaded accountsStore: {0}", accountsStore.All().Count);
			Tracer.I.Debug("Loaded blog_photosStore: {0}", blog_photosStore.All().Count);
			Tracer.I.Debug("Loaded resumesStore: {0}", resumesStore.All().Count);
			Tracer.I.Debug("Loaded restaurantsStore: {0}", restaurantsStore.All().Count);
			Tracer.I.Debug("Loaded ad_advertismentsStore: {0}", ad_advertismentsStore.All().Count);
			Tracer.I.Debug("Loaded accounts_favoritesStore: {0}", accounts_favoritesStore.All().Count);
			Tracer.I.Debug("Loaded quizzesStore: {0}", quizzesStore.All().Count);
			Tracer.I.Debug("Loaded quiz_optionsStore: {0}", quiz_optionsStore.All().Count);
			Tracer.I.Debug("Loaded quiz_resultsStore: {0}", quiz_resultsStore.All().Count);
			Tracer.I.Debug("Loaded placesStore: {0}", placesStore.All().Count);
			Tracer.I.Debug("Loaded actions_placesStore: {0}", actions_placesStore.All().Count);
			Tracer.I.Debug("Loaded actions_scheduleStore: {0}", actions_scheduleStore.All().Count);
			Tracer.I.Debug("Loaded vacanciesStore: {0}", vacanciesStore.All().Count);
			Tracer.I.Debug("Loaded vacancy_entriesStore: {0}", vacancy_entriesStore.All().Count);
			Tracer.I.Debug("Loaded vacancy_facilitiesStore: {0}", vacancy_facilitiesStore.All().Count);
			Tracer.I.Debug("Loaded ad_fieldsStore: {0}", ad_fieldsStore.All().Count);
			Tracer.I.Debug("Loaded photobank_related_photosStore: {0}", photobank_related_photosStore.All().Count);
			Tracer.I.Debug("Loaded photobank_photo_pricesStore: {0}", photobank_photo_pricesStore.All().Count);
			Tracer.I.Debug("Loaded photobank_photosStore: {0}", photobank_photosStore.All().Count);
			Tracer.I.Debug("Loaded news_categoriesStore: {0}", news_categoriesStore.All().Count);
			Tracer.I.Debug("Loaded photobank_user_albumsStore: {0}", photobank_user_albumsStore.All().Count);
			Tracer.I.Debug("Loaded actionsStore: {0}", actionsStore.All().Count);
			Tracer.I.Debug("Loaded ad_photosStore: {0}", ad_photosStore.All().Count);
			Tracer.I.Debug("Loaded salesStore: {0}", salesStore.All().Count);
			Tracer.I.Debug("Loaded sale_typesStore: {0}", sale_typesStore.All().Count);
		}
		public void PassUpdate(MySqlConnection _conn, string _protoName, int _action, long _protoId)
		{
			switch (_protoName)
			{
				case "account_roles":
				switch (_action)
				{
					case 0: account_rolesStore.InsertSync(_conn, _protoId, this); break;
					case 1: account_rolesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: account_rolesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "action_categories":
				switch (_action)
				{
					case 0: action_categoriesStore.InsertSync(_conn, _protoId, this); break;
					case 1: action_categoriesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: action_categoriesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "actions_comments":
				switch (_action)
				{
					case 0: actions_commentsStore.InsertSync(_conn, _protoId, this); break;
					case 1: actions_commentsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: actions_commentsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "actions_genres":
				switch (_action)
				{
					case 0: actions_genresStore.InsertSync(_conn, _protoId, this); break;
					case 1: actions_genresStore.UpdateSync(_conn, _protoId, this); break;
					case 2: actions_genresStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "actions_photos":
				switch (_action)
				{
					case 0: actions_photosStore.InsertSync(_conn, _protoId, this); break;
					case 1: actions_photosStore.UpdateSync(_conn, _protoId, this); break;
					case 2: actions_photosStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "ad_categories":
				switch (_action)
				{
					case 0: ad_categoriesStore.InsertSync(_conn, _protoId, this); break;
					case 1: ad_categoriesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: ad_categoriesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "ad_field_descriptions":
				switch (_action)
				{
					case 0: ad_field_descriptionsStore.InsertSync(_conn, _protoId, this); break;
					case 1: ad_field_descriptionsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: ad_field_descriptionsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "ad_lookup_values":
				switch (_action)
				{
					case 0: ad_lookup_valuesStore.InsertSync(_conn, _protoId, this); break;
					case 1: ad_lookup_valuesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: ad_lookup_valuesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "blog_categories":
				switch (_action)
				{
					case 0: blog_categoriesStore.InsertSync(_conn, _protoId, this); break;
					case 1: blog_categoriesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: blog_categoriesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "blog_comments":
				switch (_action)
				{
					case 0: blog_commentsStore.InsertSync(_conn, _protoId, this); break;
					case 1: blog_commentsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: blog_commentsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "blog_lastviews":
				switch (_action)
				{
					case 0: blog_lastviewsStore.InsertSync(_conn, _protoId, this); break;
					case 1: blog_lastviewsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: blog_lastviewsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "cities":
				switch (_action)
				{
					case 0: citiesStore.InsertSync(_conn, _protoId, this); break;
					case 1: citiesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: citiesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "city_prices":
				switch (_action)
				{
					case 0: city_pricesStore.InsertSync(_conn, _protoId, this); break;
					case 1: city_pricesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: city_pricesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "city_prices_icons":
				switch (_action)
				{
					case 0: city_prices_iconsStore.InsertSync(_conn, _protoId, this); break;
					case 1: city_prices_iconsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: city_prices_iconsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "comments_news":
				switch (_action)
				{
					case 0: comments_newsStore.InsertSync(_conn, _protoId, this); break;
					case 1: comments_newsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: comments_newsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "companies_kind_activities":
				switch (_action)
				{
					case 0: companies_kind_activitiesStore.InsertSync(_conn, _protoId, this); break;
					case 1: companies_kind_activitiesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: companies_kind_activitiesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "company_categories":
				switch (_action)
				{
					case 0: company_categoriesStore.InsertSync(_conn, _protoId, this); break;
					case 1: company_categoriesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: company_categoriesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "company_comments":
				switch (_action)
				{
					case 0: company_commentsStore.InsertSync(_conn, _protoId, this); break;
					case 1: company_commentsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: company_commentsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "company_files":
				switch (_action)
				{
					case 0: company_filesStore.InsertSync(_conn, _protoId, this); break;
					case 1: company_filesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: company_filesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "company_kind_activities":
				switch (_action)
				{
					case 0: company_kind_activitiesStore.InsertSync(_conn, _protoId, this); break;
					case 1: company_kind_activitiesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: company_kind_activitiesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "company_photos":
				switch (_action)
				{
					case 0: company_photosStore.InsertSync(_conn, _protoId, this); break;
					case 1: company_photosStore.UpdateSync(_conn, _protoId, this); break;
					case 2: company_photosStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "genres":
				switch (_action)
				{
					case 0: genresStore.InsertSync(_conn, _protoId, this); break;
					case 1: genresStore.UpdateSync(_conn, _protoId, this); break;
					case 2: genresStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "main_page_widgets":
				switch (_action)
				{
					case 0: main_page_widgetsStore.InsertSync(_conn, _protoId, this); break;
					case 1: main_page_widgetsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: main_page_widgetsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "news_images":
				switch (_action)
				{
					case 0: news_imagesStore.InsertSync(_conn, _protoId, this); break;
					case 1: news_imagesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: news_imagesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "news_marks":
				switch (_action)
				{
					case 0: news_marksStore.InsertSync(_conn, _protoId, this); break;
					case 1: news_marksStore.UpdateSync(_conn, _protoId, this); break;
					case 2: news_marksStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "news_videos":
				switch (_action)
				{
					case 0: news_videosStore.InsertSync(_conn, _protoId, this); break;
					case 1: news_videosStore.UpdateSync(_conn, _protoId, this); break;
					case 2: news_videosStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "photobank_categories":
				switch (_action)
				{
					case 0: photobank_categoriesStore.InsertSync(_conn, _protoId, this); break;
					case 1: photobank_categoriesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: photobank_categoriesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "photobank_licenses":
				switch (_action)
				{
					case 0: photobank_licensesStore.InsertSync(_conn, _protoId, this); break;
					case 1: photobank_licensesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: photobank_licensesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "photobank_photos_rating":
				switch (_action)
				{
					case 0: photobank_photos_ratingStore.InsertSync(_conn, _protoId, this); break;
					case 1: photobank_photos_ratingStore.UpdateSync(_conn, _protoId, this); break;
					case 2: photobank_photos_ratingStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "photobank_tags":
				switch (_action)
				{
					case 0: photobank_tagsStore.InsertSync(_conn, _protoId, this); break;
					case 1: photobank_tagsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: photobank_tagsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "regions":
				switch (_action)
				{
					case 0: regionsStore.InsertSync(_conn, _protoId, this); break;
					case 1: regionsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: regionsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "restaurant_comments":
				switch (_action)
				{
					case 0: restaurant_commentsStore.InsertSync(_conn, _protoId, this); break;
					case 1: restaurant_commentsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: restaurant_commentsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "restaurant_entries":
				switch (_action)
				{
					case 0: restaurant_entriesStore.InsertSync(_conn, _protoId, this); break;
					case 1: restaurant_entriesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: restaurant_entriesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "restaurant_entry_categories":
				switch (_action)
				{
					case 0: restaurant_entry_categoriesStore.InsertSync(_conn, _protoId, this); break;
					case 1: restaurant_entry_categoriesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: restaurant_entry_categoriesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "restaurant_events":
				switch (_action)
				{
					case 0: restaurant_eventsStore.InsertSync(_conn, _protoId, this); break;
					case 1: restaurant_eventsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: restaurant_eventsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "restaurant_photos":
				switch (_action)
				{
					case 0: restaurant_photosStore.InsertSync(_conn, _protoId, this); break;
					case 1: restaurant_photosStore.UpdateSync(_conn, _protoId, this); break;
					case 2: restaurant_photosStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "restaurants_entries":
				switch (_action)
				{
					case 0: restaurants_entriesStore.InsertSync(_conn, _protoId, this); break;
					case 1: restaurants_entriesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: restaurants_entriesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "vacancies_entries":
				switch (_action)
				{
					case 0: vacancies_entriesStore.InsertSync(_conn, _protoId, this); break;
					case 1: vacancies_entriesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: vacancies_entriesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "vacancies_professionals":
				switch (_action)
				{
					case 0: vacancies_professionalsStore.InsertSync(_conn, _protoId, this); break;
					case 1: vacancies_professionalsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: vacancies_professionalsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "vacancy_professionals":
				switch (_action)
				{
					case 0: vacancy_professionalsStore.InsertSync(_conn, _protoId, this); break;
					case 1: vacancy_professionalsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: vacancy_professionalsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "pages":
				switch (_action)
				{
					case 0: pagesStore.InsertSync(_conn, _protoId, this); break;
					case 1: pagesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: pagesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "pages_files":
				switch (_action)
				{
					case 0: pages_filesStore.InsertSync(_conn, _protoId, this); break;
					case 1: pages_filesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: pages_filesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "news":
				switch (_action)
				{
					case 0: newsStore.InsertSync(_conn, _protoId, this); break;
					case 1: newsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: newsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "photobank_photo_tags":
				switch (_action)
				{
					case 0: photobank_photo_tagsStore.InsertSync(_conn, _protoId, this); break;
					case 1: photobank_photo_tagsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: photobank_photo_tagsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "resumes_entries":
				switch (_action)
				{
					case 0: resumes_entriesStore.InsertSync(_conn, _protoId, this); break;
					case 1: resumes_entriesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: resumes_entriesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "resume_educations":
				switch (_action)
				{
					case 0: resume_educationsStore.InsertSync(_conn, _protoId, this); break;
					case 1: resume_educationsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: resume_educationsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "resume_works":
				switch (_action)
				{
					case 0: resume_worksStore.InsertSync(_conn, _protoId, this); break;
					case 1: resume_worksStore.UpdateSync(_conn, _protoId, this); break;
					case 2: resume_worksStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "resume_trainings":
				switch (_action)
				{
					case 0: resume_trainingsStore.InsertSync(_conn, _protoId, this); break;
					case 1: resume_trainingsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: resume_trainingsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "resume_links":
				switch (_action)
				{
					case 0: resume_linksStore.InsertSync(_conn, _protoId, this); break;
					case 1: resume_linksStore.UpdateSync(_conn, _protoId, this); break;
					case 2: resume_linksStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "resumes_professionals":
				switch (_action)
				{
					case 0: resumes_professionalsStore.InsertSync(_conn, _protoId, this); break;
					case 1: resumes_professionalsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: resumes_professionalsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "vacancy_entry_categories":
				switch (_action)
				{
					case 0: vacancy_entry_categoriesStore.InsertSync(_conn, _protoId, this); break;
					case 1: vacancy_entry_categoriesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: vacancy_entry_categoriesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "ad_advert_requests":
				switch (_action)
				{
					case 0: ad_advert_requestsStore.InsertSync(_conn, _protoId, this); break;
					case 1: ad_advert_requestsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: ad_advert_requestsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "sales_comments":
				switch (_action)
				{
					case 0: sales_commentsStore.InsertSync(_conn, _protoId, this); break;
					case 1: sales_commentsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: sales_commentsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "sale_categories":
				switch (_action)
				{
					case 0: sale_categoriesStore.InsertSync(_conn, _protoId, this); break;
					case 1: sale_categoriesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: sale_categoriesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "restaurants_reserve":
				switch (_action)
				{
					case 0: restaurants_reserveStore.InsertSync(_conn, _protoId, this); break;
					case 1: restaurants_reserveStore.UpdateSync(_conn, _protoId, this); break;
					case 2: restaurants_reserveStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "company_ownerships":
				switch (_action)
				{
					case 0: company_ownershipsStore.InsertSync(_conn, _protoId, this); break;
					case 1: company_ownershipsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: company_ownershipsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "vacancy_facility_variants":
				switch (_action)
				{
					case 0: vacancy_facility_variantsStore.InsertSync(_conn, _protoId, this); break;
					case 1: vacancy_facility_variantsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: vacancy_facility_variantsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "vacancies_facilities":
				switch (_action)
				{
					case 0: vacancies_facilitiesStore.InsertSync(_conn, _protoId, this); break;
					case 1: vacancies_facilitiesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: vacancies_facilitiesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "resumes_facilities":
				switch (_action)
				{
					case 0: resumes_facilitiesStore.InsertSync(_conn, _protoId, this); break;
					case 1: resumes_facilitiesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: resumes_facilitiesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "companies":
				switch (_action)
				{
					case 0: companiesStore.InsertSync(_conn, _protoId, this); break;
					case 1: companiesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: companiesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "my_messages":
				switch (_action)
				{
					case 0: my_messagesStore.InsertSync(_conn, _protoId, this); break;
					case 1: my_messagesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: my_messagesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "actions_rating":
				switch (_action)
				{
					case 0: actions_ratingStore.InsertSync(_conn, _protoId, this); break;
					case 1: actions_ratingStore.UpdateSync(_conn, _protoId, this); break;
					case 2: actions_ratingStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "blog_marks":
				switch (_action)
				{
					case 0: blog_marksStore.InsertSync(_conn, _protoId, this); break;
					case 1: blog_marksStore.UpdateSync(_conn, _protoId, this); break;
					case 2: blog_marksStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "company_rating":
				switch (_action)
				{
					case 0: company_ratingStore.InsertSync(_conn, _protoId, this); break;
					case 1: company_ratingStore.UpdateSync(_conn, _protoId, this); break;
					case 2: company_ratingStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "places_rating":
				switch (_action)
				{
					case 0: places_ratingStore.InsertSync(_conn, _protoId, this); break;
					case 1: places_ratingStore.UpdateSync(_conn, _protoId, this); break;
					case 2: places_ratingStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "restaurant_rating":
				switch (_action)
				{
					case 0: restaurant_ratingStore.InsertSync(_conn, _protoId, this); break;
					case 1: restaurant_ratingStore.UpdateSync(_conn, _protoId, this); break;
					case 2: restaurant_ratingStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "blogs":
				switch (_action)
				{
					case 0: blogsStore.InsertSync(_conn, _protoId, this); break;
					case 1: blogsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: blogsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "photobank_cart":
				switch (_action)
				{
					case 0: photobank_cartStore.InsertSync(_conn, _protoId, this); break;
					case 1: photobank_cartStore.UpdateSync(_conn, _protoId, this); break;
					case 2: photobank_cartStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "photobank_obtained":
				switch (_action)
				{
					case 0: photobank_obtainedStore.InsertSync(_conn, _protoId, this); break;
					case 1: photobank_obtainedStore.UpdateSync(_conn, _protoId, this); break;
					case 2: photobank_obtainedStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "accounts":
				switch (_action)
				{
					case 0: accountsStore.InsertSync(_conn, _protoId, this); break;
					case 1: accountsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: accountsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "blog_photos":
				switch (_action)
				{
					case 0: blog_photosStore.InsertSync(_conn, _protoId, this); break;
					case 1: blog_photosStore.UpdateSync(_conn, _protoId, this); break;
					case 2: blog_photosStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "resumes":
				switch (_action)
				{
					case 0: resumesStore.InsertSync(_conn, _protoId, this); break;
					case 1: resumesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: resumesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "restaurants":
				switch (_action)
				{
					case 0: restaurantsStore.InsertSync(_conn, _protoId, this); break;
					case 1: restaurantsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: restaurantsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "ad_advertisments":
				switch (_action)
				{
					case 0: ad_advertismentsStore.InsertSync(_conn, _protoId, this); break;
					case 1: ad_advertismentsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: ad_advertismentsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "accounts_favorites":
				switch (_action)
				{
					case 0: accounts_favoritesStore.InsertSync(_conn, _protoId, this); break;
					case 1: accounts_favoritesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: accounts_favoritesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "quizzes":
				switch (_action)
				{
					case 0: quizzesStore.InsertSync(_conn, _protoId, this); break;
					case 1: quizzesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: quizzesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "quiz_options":
				switch (_action)
				{
					case 0: quiz_optionsStore.InsertSync(_conn, _protoId, this); break;
					case 1: quiz_optionsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: quiz_optionsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "quiz_results":
				switch (_action)
				{
					case 0: quiz_resultsStore.InsertSync(_conn, _protoId, this); break;
					case 1: quiz_resultsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: quiz_resultsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "places":
				switch (_action)
				{
					case 0: placesStore.InsertSync(_conn, _protoId, this); break;
					case 1: placesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: placesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "actions_places":
				switch (_action)
				{
					case 0: actions_placesStore.InsertSync(_conn, _protoId, this); break;
					case 1: actions_placesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: actions_placesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "actions_schedule":
				switch (_action)
				{
					case 0: actions_scheduleStore.InsertSync(_conn, _protoId, this); break;
					case 1: actions_scheduleStore.UpdateSync(_conn, _protoId, this); break;
					case 2: actions_scheduleStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "vacancies":
				switch (_action)
				{
					case 0: vacanciesStore.InsertSync(_conn, _protoId, this); break;
					case 1: vacanciesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: vacanciesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "vacancy_entries":
				switch (_action)
				{
					case 0: vacancy_entriesStore.InsertSync(_conn, _protoId, this); break;
					case 1: vacancy_entriesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: vacancy_entriesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "vacancy_facilities":
				switch (_action)
				{
					case 0: vacancy_facilitiesStore.InsertSync(_conn, _protoId, this); break;
					case 1: vacancy_facilitiesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: vacancy_facilitiesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "ad_fields":
				switch (_action)
				{
					case 0: ad_fieldsStore.InsertSync(_conn, _protoId, this); break;
					case 1: ad_fieldsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: ad_fieldsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "photobank_related_photos":
				switch (_action)
				{
					case 0: photobank_related_photosStore.InsertSync(_conn, _protoId, this); break;
					case 1: photobank_related_photosStore.UpdateSync(_conn, _protoId, this); break;
					case 2: photobank_related_photosStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "photobank_photo_prices":
				switch (_action)
				{
					case 0: photobank_photo_pricesStore.InsertSync(_conn, _protoId, this); break;
					case 1: photobank_photo_pricesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: photobank_photo_pricesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "photobank_photos":
				switch (_action)
				{
					case 0: photobank_photosStore.InsertSync(_conn, _protoId, this); break;
					case 1: photobank_photosStore.UpdateSync(_conn, _protoId, this); break;
					case 2: photobank_photosStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "news_categories":
				switch (_action)
				{
					case 0: news_categoriesStore.InsertSync(_conn, _protoId, this); break;
					case 1: news_categoriesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: news_categoriesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "photobank_user_albums":
				switch (_action)
				{
					case 0: photobank_user_albumsStore.InsertSync(_conn, _protoId, this); break;
					case 1: photobank_user_albumsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: photobank_user_albumsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "actions":
				switch (_action)
				{
					case 0: actionsStore.InsertSync(_conn, _protoId, this); break;
					case 1: actionsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: actionsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "ad_photos":
				switch (_action)
				{
					case 0: ad_photosStore.InsertSync(_conn, _protoId, this); break;
					case 1: ad_photosStore.UpdateSync(_conn, _protoId, this); break;
					case 2: ad_photosStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "sales":
				switch (_action)
				{
					case 0: salesStore.InsertSync(_conn, _protoId, this); break;
					case 1: salesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: salesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "sale_types":
				switch (_action)
				{
					case 0: sale_typesStore.InsertSync(_conn, _protoId, this); break;
					case 1: sale_typesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: sale_typesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
			}
		}
		/*
		                GO
		                IF OBJECT_ID ('account_roles_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.account_roles_insert;
		                GO
		                CREATE TRIGGER [dbo].[account_roles_insert]
		                   ON  [dbo].[account_roles]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('account_roles',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('account_roles_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.account_roles_update;
		                GO
		                CREATE TRIGGER [dbo].[account_roles_update]
		                   ON  [dbo].[account_roles]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('account_roles',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('account_roles_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.account_roles_delete;
		                GO
		                CREATE TRIGGER [dbo].[account_roles_delete]
		                   ON  [dbo].[account_roles]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('account_roles',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('action_categories_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.action_categories_insert;
		                GO
		                CREATE TRIGGER [dbo].[action_categories_insert]
		                   ON  [dbo].[action_categories]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('action_categories',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('action_categories_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.action_categories_update;
		                GO
		                CREATE TRIGGER [dbo].[action_categories_update]
		                   ON  [dbo].[action_categories]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('action_categories',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('action_categories_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.action_categories_delete;
		                GO
		                CREATE TRIGGER [dbo].[action_categories_delete]
		                   ON  [dbo].[action_categories]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('action_categories',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('actions_comments_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.actions_comments_insert;
		                GO
		                CREATE TRIGGER [dbo].[actions_comments_insert]
		                   ON  [dbo].[actions_comments]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('actions_comments',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('actions_comments_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.actions_comments_update;
		                GO
		                CREATE TRIGGER [dbo].[actions_comments_update]
		                   ON  [dbo].[actions_comments]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('actions_comments',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('actions_comments_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.actions_comments_delete;
		                GO
		                CREATE TRIGGER [dbo].[actions_comments_delete]
		                   ON  [dbo].[actions_comments]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('actions_comments',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('actions_genres_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.actions_genres_insert;
		                GO
		                CREATE TRIGGER [dbo].[actions_genres_insert]
		                   ON  [dbo].[actions_genres]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('actions_genres',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('actions_genres_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.actions_genres_update;
		                GO
		                CREATE TRIGGER [dbo].[actions_genres_update]
		                   ON  [dbo].[actions_genres]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('actions_genres',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('actions_genres_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.actions_genres_delete;
		                GO
		                CREATE TRIGGER [dbo].[actions_genres_delete]
		                   ON  [dbo].[actions_genres]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('actions_genres',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('actions_photos_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.actions_photos_insert;
		                GO
		                CREATE TRIGGER [dbo].[actions_photos_insert]
		                   ON  [dbo].[actions_photos]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('actions_photos',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('actions_photos_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.actions_photos_update;
		                GO
		                CREATE TRIGGER [dbo].[actions_photos_update]
		                   ON  [dbo].[actions_photos]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('actions_photos',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('actions_photos_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.actions_photos_delete;
		                GO
		                CREATE TRIGGER [dbo].[actions_photos_delete]
		                   ON  [dbo].[actions_photos]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('actions_photos',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('ad_categories_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.ad_categories_insert;
		                GO
		                CREATE TRIGGER [dbo].[ad_categories_insert]
		                   ON  [dbo].[ad_categories]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('ad_categories',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('ad_categories_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.ad_categories_update;
		                GO
		                CREATE TRIGGER [dbo].[ad_categories_update]
		                   ON  [dbo].[ad_categories]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('ad_categories',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('ad_categories_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.ad_categories_delete;
		                GO
		                CREATE TRIGGER [dbo].[ad_categories_delete]
		                   ON  [dbo].[ad_categories]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('ad_categories',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('ad_field_descriptions_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.ad_field_descriptions_insert;
		                GO
		                CREATE TRIGGER [dbo].[ad_field_descriptions_insert]
		                   ON  [dbo].[ad_field_descriptions]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('ad_field_descriptions',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('ad_field_descriptions_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.ad_field_descriptions_update;
		                GO
		                CREATE TRIGGER [dbo].[ad_field_descriptions_update]
		                   ON  [dbo].[ad_field_descriptions]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('ad_field_descriptions',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('ad_field_descriptions_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.ad_field_descriptions_delete;
		                GO
		                CREATE TRIGGER [dbo].[ad_field_descriptions_delete]
		                   ON  [dbo].[ad_field_descriptions]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('ad_field_descriptions',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('ad_lookup_values_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.ad_lookup_values_insert;
		                GO
		                CREATE TRIGGER [dbo].[ad_lookup_values_insert]
		                   ON  [dbo].[ad_lookup_values]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('ad_lookup_values',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('ad_lookup_values_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.ad_lookup_values_update;
		                GO
		                CREATE TRIGGER [dbo].[ad_lookup_values_update]
		                   ON  [dbo].[ad_lookup_values]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('ad_lookup_values',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('ad_lookup_values_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.ad_lookup_values_delete;
		                GO
		                CREATE TRIGGER [dbo].[ad_lookup_values_delete]
		                   ON  [dbo].[ad_lookup_values]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('ad_lookup_values',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('blog_categories_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.blog_categories_insert;
		                GO
		                CREATE TRIGGER [dbo].[blog_categories_insert]
		                   ON  [dbo].[blog_categories]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('blog_categories',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('blog_categories_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.blog_categories_update;
		                GO
		                CREATE TRIGGER [dbo].[blog_categories_update]
		                   ON  [dbo].[blog_categories]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('blog_categories',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('blog_categories_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.blog_categories_delete;
		                GO
		                CREATE TRIGGER [dbo].[blog_categories_delete]
		                   ON  [dbo].[blog_categories]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('blog_categories',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('blog_comments_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.blog_comments_insert;
		                GO
		                CREATE TRIGGER [dbo].[blog_comments_insert]
		                   ON  [dbo].[blog_comments]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('blog_comments',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('blog_comments_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.blog_comments_update;
		                GO
		                CREATE TRIGGER [dbo].[blog_comments_update]
		                   ON  [dbo].[blog_comments]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('blog_comments',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('blog_comments_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.blog_comments_delete;
		                GO
		                CREATE TRIGGER [dbo].[blog_comments_delete]
		                   ON  [dbo].[blog_comments]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('blog_comments',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('blog_lastviews_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.blog_lastviews_insert;
		                GO
		                CREATE TRIGGER [dbo].[blog_lastviews_insert]
		                   ON  [dbo].[blog_lastviews]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('blog_lastviews',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('blog_lastviews_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.blog_lastviews_update;
		                GO
		                CREATE TRIGGER [dbo].[blog_lastviews_update]
		                   ON  [dbo].[blog_lastviews]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('blog_lastviews',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('blog_lastviews_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.blog_lastviews_delete;
		                GO
		                CREATE TRIGGER [dbo].[blog_lastviews_delete]
		                   ON  [dbo].[blog_lastviews]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('blog_lastviews',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('cities_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.cities_insert;
		                GO
		                CREATE TRIGGER [dbo].[cities_insert]
		                   ON  [dbo].[cities]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('cities',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('cities_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.cities_update;
		                GO
		                CREATE TRIGGER [dbo].[cities_update]
		                   ON  [dbo].[cities]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('cities',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('cities_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.cities_delete;
		                GO
		                CREATE TRIGGER [dbo].[cities_delete]
		                   ON  [dbo].[cities]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('cities',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('city_prices_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.city_prices_insert;
		                GO
		                CREATE TRIGGER [dbo].[city_prices_insert]
		                   ON  [dbo].[city_prices]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('city_prices',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('city_prices_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.city_prices_update;
		                GO
		                CREATE TRIGGER [dbo].[city_prices_update]
		                   ON  [dbo].[city_prices]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('city_prices',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('city_prices_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.city_prices_delete;
		                GO
		                CREATE TRIGGER [dbo].[city_prices_delete]
		                   ON  [dbo].[city_prices]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('city_prices',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('city_prices_icons_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.city_prices_icons_insert;
		                GO
		                CREATE TRIGGER [dbo].[city_prices_icons_insert]
		                   ON  [dbo].[city_prices_icons]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('city_prices_icons',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('city_prices_icons_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.city_prices_icons_update;
		                GO
		                CREATE TRIGGER [dbo].[city_prices_icons_update]
		                   ON  [dbo].[city_prices_icons]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('city_prices_icons',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('city_prices_icons_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.city_prices_icons_delete;
		                GO
		                CREATE TRIGGER [dbo].[city_prices_icons_delete]
		                   ON  [dbo].[city_prices_icons]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('city_prices_icons',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('comments_news_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.comments_news_insert;
		                GO
		                CREATE TRIGGER [dbo].[comments_news_insert]
		                   ON  [dbo].[comments_news]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('comments_news',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('comments_news_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.comments_news_update;
		                GO
		                CREATE TRIGGER [dbo].[comments_news_update]
		                   ON  [dbo].[comments_news]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('comments_news',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('comments_news_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.comments_news_delete;
		                GO
		                CREATE TRIGGER [dbo].[comments_news_delete]
		                   ON  [dbo].[comments_news]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('comments_news',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('companies_kind_activities_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.companies_kind_activities_insert;
		                GO
		                CREATE TRIGGER [dbo].[companies_kind_activities_insert]
		                   ON  [dbo].[companies_kind_activities]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('companies_kind_activities',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('companies_kind_activities_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.companies_kind_activities_update;
		                GO
		                CREATE TRIGGER [dbo].[companies_kind_activities_update]
		                   ON  [dbo].[companies_kind_activities]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('companies_kind_activities',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('companies_kind_activities_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.companies_kind_activities_delete;
		                GO
		                CREATE TRIGGER [dbo].[companies_kind_activities_delete]
		                   ON  [dbo].[companies_kind_activities]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('companies_kind_activities',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('company_categories_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.company_categories_insert;
		                GO
		                CREATE TRIGGER [dbo].[company_categories_insert]
		                   ON  [dbo].[company_categories]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('company_categories',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('company_categories_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.company_categories_update;
		                GO
		                CREATE TRIGGER [dbo].[company_categories_update]
		                   ON  [dbo].[company_categories]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('company_categories',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('company_categories_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.company_categories_delete;
		                GO
		                CREATE TRIGGER [dbo].[company_categories_delete]
		                   ON  [dbo].[company_categories]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('company_categories',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('company_comments_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.company_comments_insert;
		                GO
		                CREATE TRIGGER [dbo].[company_comments_insert]
		                   ON  [dbo].[company_comments]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('company_comments',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('company_comments_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.company_comments_update;
		                GO
		                CREATE TRIGGER [dbo].[company_comments_update]
		                   ON  [dbo].[company_comments]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('company_comments',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('company_comments_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.company_comments_delete;
		                GO
		                CREATE TRIGGER [dbo].[company_comments_delete]
		                   ON  [dbo].[company_comments]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('company_comments',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('company_files_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.company_files_insert;
		                GO
		                CREATE TRIGGER [dbo].[company_files_insert]
		                   ON  [dbo].[company_files]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('company_files',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('company_files_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.company_files_update;
		                GO
		                CREATE TRIGGER [dbo].[company_files_update]
		                   ON  [dbo].[company_files]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('company_files',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('company_files_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.company_files_delete;
		                GO
		                CREATE TRIGGER [dbo].[company_files_delete]
		                   ON  [dbo].[company_files]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('company_files',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('company_kind_activities_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.company_kind_activities_insert;
		                GO
		                CREATE TRIGGER [dbo].[company_kind_activities_insert]
		                   ON  [dbo].[company_kind_activities]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('company_kind_activities',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('company_kind_activities_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.company_kind_activities_update;
		                GO
		                CREATE TRIGGER [dbo].[company_kind_activities_update]
		                   ON  [dbo].[company_kind_activities]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('company_kind_activities',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('company_kind_activities_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.company_kind_activities_delete;
		                GO
		                CREATE TRIGGER [dbo].[company_kind_activities_delete]
		                   ON  [dbo].[company_kind_activities]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('company_kind_activities',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('company_photos_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.company_photos_insert;
		                GO
		                CREATE TRIGGER [dbo].[company_photos_insert]
		                   ON  [dbo].[company_photos]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('company_photos',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('company_photos_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.company_photos_update;
		                GO
		                CREATE TRIGGER [dbo].[company_photos_update]
		                   ON  [dbo].[company_photos]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('company_photos',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('company_photos_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.company_photos_delete;
		                GO
		                CREATE TRIGGER [dbo].[company_photos_delete]
		                   ON  [dbo].[company_photos]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('company_photos',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('genres_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.genres_insert;
		                GO
		                CREATE TRIGGER [dbo].[genres_insert]
		                   ON  [dbo].[genres]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('genres',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('genres_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.genres_update;
		                GO
		                CREATE TRIGGER [dbo].[genres_update]
		                   ON  [dbo].[genres]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('genres',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('genres_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.genres_delete;
		                GO
		                CREATE TRIGGER [dbo].[genres_delete]
		                   ON  [dbo].[genres]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('genres',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('main_page_widgets_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.main_page_widgets_insert;
		                GO
		                CREATE TRIGGER [dbo].[main_page_widgets_insert]
		                   ON  [dbo].[main_page_widgets]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('main_page_widgets',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('main_page_widgets_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.main_page_widgets_update;
		                GO
		                CREATE TRIGGER [dbo].[main_page_widgets_update]
		                   ON  [dbo].[main_page_widgets]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('main_page_widgets',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('main_page_widgets_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.main_page_widgets_delete;
		                GO
		                CREATE TRIGGER [dbo].[main_page_widgets_delete]
		                   ON  [dbo].[main_page_widgets]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('main_page_widgets',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('news_images_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.news_images_insert;
		                GO
		                CREATE TRIGGER [dbo].[news_images_insert]
		                   ON  [dbo].[news_images]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('news_images',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('news_images_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.news_images_update;
		                GO
		                CREATE TRIGGER [dbo].[news_images_update]
		                   ON  [dbo].[news_images]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('news_images',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('news_images_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.news_images_delete;
		                GO
		                CREATE TRIGGER [dbo].[news_images_delete]
		                   ON  [dbo].[news_images]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('news_images',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('news_marks_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.news_marks_insert;
		                GO
		                CREATE TRIGGER [dbo].[news_marks_insert]
		                   ON  [dbo].[news_marks]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('news_marks',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('news_marks_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.news_marks_update;
		                GO
		                CREATE TRIGGER [dbo].[news_marks_update]
		                   ON  [dbo].[news_marks]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('news_marks',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('news_marks_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.news_marks_delete;
		                GO
		                CREATE TRIGGER [dbo].[news_marks_delete]
		                   ON  [dbo].[news_marks]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('news_marks',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('news_videos_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.news_videos_insert;
		                GO
		                CREATE TRIGGER [dbo].[news_videos_insert]
		                   ON  [dbo].[news_videos]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('news_videos',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('news_videos_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.news_videos_update;
		                GO
		                CREATE TRIGGER [dbo].[news_videos_update]
		                   ON  [dbo].[news_videos]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('news_videos',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('news_videos_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.news_videos_delete;
		                GO
		                CREATE TRIGGER [dbo].[news_videos_delete]
		                   ON  [dbo].[news_videos]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('news_videos',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_categories_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_categories_insert;
		                GO
		                CREATE TRIGGER [dbo].[photobank_categories_insert]
		                   ON  [dbo].[photobank_categories]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_categories',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_categories_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_categories_update;
		                GO
		                CREATE TRIGGER [dbo].[photobank_categories_update]
		                   ON  [dbo].[photobank_categories]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_categories',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_categories_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_categories_delete;
		                GO
		                CREATE TRIGGER [dbo].[photobank_categories_delete]
		                   ON  [dbo].[photobank_categories]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_categories',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_licenses_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_licenses_insert;
		                GO
		                CREATE TRIGGER [dbo].[photobank_licenses_insert]
		                   ON  [dbo].[photobank_licenses]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_licenses',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_licenses_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_licenses_update;
		                GO
		                CREATE TRIGGER [dbo].[photobank_licenses_update]
		                   ON  [dbo].[photobank_licenses]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_licenses',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_licenses_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_licenses_delete;
		                GO
		                CREATE TRIGGER [dbo].[photobank_licenses_delete]
		                   ON  [dbo].[photobank_licenses]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_licenses',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_photos_rating_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_photos_rating_insert;
		                GO
		                CREATE TRIGGER [dbo].[photobank_photos_rating_insert]
		                   ON  [dbo].[photobank_photos_rating]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_photos_rating',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_photos_rating_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_photos_rating_update;
		                GO
		                CREATE TRIGGER [dbo].[photobank_photos_rating_update]
		                   ON  [dbo].[photobank_photos_rating]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_photos_rating',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_photos_rating_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_photos_rating_delete;
		                GO
		                CREATE TRIGGER [dbo].[photobank_photos_rating_delete]
		                   ON  [dbo].[photobank_photos_rating]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_photos_rating',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_tags_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_tags_insert;
		                GO
		                CREATE TRIGGER [dbo].[photobank_tags_insert]
		                   ON  [dbo].[photobank_tags]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_tags',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_tags_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_tags_update;
		                GO
		                CREATE TRIGGER [dbo].[photobank_tags_update]
		                   ON  [dbo].[photobank_tags]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_tags',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_tags_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_tags_delete;
		                GO
		                CREATE TRIGGER [dbo].[photobank_tags_delete]
		                   ON  [dbo].[photobank_tags]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_tags',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('regions_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.regions_insert;
		                GO
		                CREATE TRIGGER [dbo].[regions_insert]
		                   ON  [dbo].[regions]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('regions',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('regions_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.regions_update;
		                GO
		                CREATE TRIGGER [dbo].[regions_update]
		                   ON  [dbo].[regions]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('regions',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('regions_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.regions_delete;
		                GO
		                CREATE TRIGGER [dbo].[regions_delete]
		                   ON  [dbo].[regions]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('regions',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurant_comments_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurant_comments_insert;
		                GO
		                CREATE TRIGGER [dbo].[restaurant_comments_insert]
		                   ON  [dbo].[restaurant_comments]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurant_comments',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurant_comments_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurant_comments_update;
		                GO
		                CREATE TRIGGER [dbo].[restaurant_comments_update]
		                   ON  [dbo].[restaurant_comments]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurant_comments',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurant_comments_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurant_comments_delete;
		                GO
		                CREATE TRIGGER [dbo].[restaurant_comments_delete]
		                   ON  [dbo].[restaurant_comments]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurant_comments',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurant_entries_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurant_entries_insert;
		                GO
		                CREATE TRIGGER [dbo].[restaurant_entries_insert]
		                   ON  [dbo].[restaurant_entries]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurant_entries',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurant_entries_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurant_entries_update;
		                GO
		                CREATE TRIGGER [dbo].[restaurant_entries_update]
		                   ON  [dbo].[restaurant_entries]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurant_entries',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurant_entries_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurant_entries_delete;
		                GO
		                CREATE TRIGGER [dbo].[restaurant_entries_delete]
		                   ON  [dbo].[restaurant_entries]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurant_entries',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurant_entry_categories_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurant_entry_categories_insert;
		                GO
		                CREATE TRIGGER [dbo].[restaurant_entry_categories_insert]
		                   ON  [dbo].[restaurant_entry_categories]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurant_entry_categories',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurant_entry_categories_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurant_entry_categories_update;
		                GO
		                CREATE TRIGGER [dbo].[restaurant_entry_categories_update]
		                   ON  [dbo].[restaurant_entry_categories]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurant_entry_categories',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurant_entry_categories_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurant_entry_categories_delete;
		                GO
		                CREATE TRIGGER [dbo].[restaurant_entry_categories_delete]
		                   ON  [dbo].[restaurant_entry_categories]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurant_entry_categories',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurant_events_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurant_events_insert;
		                GO
		                CREATE TRIGGER [dbo].[restaurant_events_insert]
		                   ON  [dbo].[restaurant_events]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurant_events',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurant_events_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurant_events_update;
		                GO
		                CREATE TRIGGER [dbo].[restaurant_events_update]
		                   ON  [dbo].[restaurant_events]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurant_events',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurant_events_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurant_events_delete;
		                GO
		                CREATE TRIGGER [dbo].[restaurant_events_delete]
		                   ON  [dbo].[restaurant_events]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurant_events',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurant_photos_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurant_photos_insert;
		                GO
		                CREATE TRIGGER [dbo].[restaurant_photos_insert]
		                   ON  [dbo].[restaurant_photos]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurant_photos',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurant_photos_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurant_photos_update;
		                GO
		                CREATE TRIGGER [dbo].[restaurant_photos_update]
		                   ON  [dbo].[restaurant_photos]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurant_photos',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurant_photos_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurant_photos_delete;
		                GO
		                CREATE TRIGGER [dbo].[restaurant_photos_delete]
		                   ON  [dbo].[restaurant_photos]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurant_photos',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurants_entries_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurants_entries_insert;
		                GO
		                CREATE TRIGGER [dbo].[restaurants_entries_insert]
		                   ON  [dbo].[restaurants_entries]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurants_entries',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurants_entries_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurants_entries_update;
		                GO
		                CREATE TRIGGER [dbo].[restaurants_entries_update]
		                   ON  [dbo].[restaurants_entries]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurants_entries',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurants_entries_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurants_entries_delete;
		                GO
		                CREATE TRIGGER [dbo].[restaurants_entries_delete]
		                   ON  [dbo].[restaurants_entries]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurants_entries',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancies_entries_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancies_entries_insert;
		                GO
		                CREATE TRIGGER [dbo].[vacancies_entries_insert]
		                   ON  [dbo].[vacancies_entries]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancies_entries',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancies_entries_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancies_entries_update;
		                GO
		                CREATE TRIGGER [dbo].[vacancies_entries_update]
		                   ON  [dbo].[vacancies_entries]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancies_entries',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancies_entries_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancies_entries_delete;
		                GO
		                CREATE TRIGGER [dbo].[vacancies_entries_delete]
		                   ON  [dbo].[vacancies_entries]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancies_entries',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancies_professionals_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancies_professionals_insert;
		                GO
		                CREATE TRIGGER [dbo].[vacancies_professionals_insert]
		                   ON  [dbo].[vacancies_professionals]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancies_professionals',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancies_professionals_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancies_professionals_update;
		                GO
		                CREATE TRIGGER [dbo].[vacancies_professionals_update]
		                   ON  [dbo].[vacancies_professionals]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancies_professionals',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancies_professionals_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancies_professionals_delete;
		                GO
		                CREATE TRIGGER [dbo].[vacancies_professionals_delete]
		                   ON  [dbo].[vacancies_professionals]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancies_professionals',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancy_professionals_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancy_professionals_insert;
		                GO
		                CREATE TRIGGER [dbo].[vacancy_professionals_insert]
		                   ON  [dbo].[vacancy_professionals]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancy_professionals',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancy_professionals_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancy_professionals_update;
		                GO
		                CREATE TRIGGER [dbo].[vacancy_professionals_update]
		                   ON  [dbo].[vacancy_professionals]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancy_professionals',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancy_professionals_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancy_professionals_delete;
		                GO
		                CREATE TRIGGER [dbo].[vacancy_professionals_delete]
		                   ON  [dbo].[vacancy_professionals]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancy_professionals',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('pages_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.pages_insert;
		                GO
		                CREATE TRIGGER [dbo].[pages_insert]
		                   ON  [dbo].[pages]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('pages',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('pages_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.pages_update;
		                GO
		                CREATE TRIGGER [dbo].[pages_update]
		                   ON  [dbo].[pages]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('pages',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('pages_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.pages_delete;
		                GO
		                CREATE TRIGGER [dbo].[pages_delete]
		                   ON  [dbo].[pages]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('pages',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('pages_files_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.pages_files_insert;
		                GO
		                CREATE TRIGGER [dbo].[pages_files_insert]
		                   ON  [dbo].[pages_files]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('pages_files',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('pages_files_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.pages_files_update;
		                GO
		                CREATE TRIGGER [dbo].[pages_files_update]
		                   ON  [dbo].[pages_files]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('pages_files',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('pages_files_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.pages_files_delete;
		                GO
		                CREATE TRIGGER [dbo].[pages_files_delete]
		                   ON  [dbo].[pages_files]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('pages_files',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('news_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.news_insert;
		                GO
		                CREATE TRIGGER [dbo].[news_insert]
		                   ON  [dbo].[news]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('news',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('news_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.news_update;
		                GO
		                CREATE TRIGGER [dbo].[news_update]
		                   ON  [dbo].[news]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('news',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('news_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.news_delete;
		                GO
		                CREATE TRIGGER [dbo].[news_delete]
		                   ON  [dbo].[news]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('news',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_photo_tags_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_photo_tags_insert;
		                GO
		                CREATE TRIGGER [dbo].[photobank_photo_tags_insert]
		                   ON  [dbo].[photobank_photo_tags]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_photo_tags',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_photo_tags_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_photo_tags_update;
		                GO
		                CREATE TRIGGER [dbo].[photobank_photo_tags_update]
		                   ON  [dbo].[photobank_photo_tags]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_photo_tags',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_photo_tags_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_photo_tags_delete;
		                GO
		                CREATE TRIGGER [dbo].[photobank_photo_tags_delete]
		                   ON  [dbo].[photobank_photo_tags]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_photo_tags',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resumes_entries_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resumes_entries_insert;
		                GO
		                CREATE TRIGGER [dbo].[resumes_entries_insert]
		                   ON  [dbo].[resumes_entries]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resumes_entries',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resumes_entries_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resumes_entries_update;
		                GO
		                CREATE TRIGGER [dbo].[resumes_entries_update]
		                   ON  [dbo].[resumes_entries]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resumes_entries',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resumes_entries_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resumes_entries_delete;
		                GO
		                CREATE TRIGGER [dbo].[resumes_entries_delete]
		                   ON  [dbo].[resumes_entries]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resumes_entries',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resume_educations_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resume_educations_insert;
		                GO
		                CREATE TRIGGER [dbo].[resume_educations_insert]
		                   ON  [dbo].[resume_educations]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resume_educations',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resume_educations_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resume_educations_update;
		                GO
		                CREATE TRIGGER [dbo].[resume_educations_update]
		                   ON  [dbo].[resume_educations]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resume_educations',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resume_educations_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resume_educations_delete;
		                GO
		                CREATE TRIGGER [dbo].[resume_educations_delete]
		                   ON  [dbo].[resume_educations]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resume_educations',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resume_works_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resume_works_insert;
		                GO
		                CREATE TRIGGER [dbo].[resume_works_insert]
		                   ON  [dbo].[resume_works]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resume_works',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resume_works_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resume_works_update;
		                GO
		                CREATE TRIGGER [dbo].[resume_works_update]
		                   ON  [dbo].[resume_works]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resume_works',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resume_works_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resume_works_delete;
		                GO
		                CREATE TRIGGER [dbo].[resume_works_delete]
		                   ON  [dbo].[resume_works]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resume_works',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resume_trainings_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resume_trainings_insert;
		                GO
		                CREATE TRIGGER [dbo].[resume_trainings_insert]
		                   ON  [dbo].[resume_trainings]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resume_trainings',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resume_trainings_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resume_trainings_update;
		                GO
		                CREATE TRIGGER [dbo].[resume_trainings_update]
		                   ON  [dbo].[resume_trainings]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resume_trainings',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resume_trainings_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resume_trainings_delete;
		                GO
		                CREATE TRIGGER [dbo].[resume_trainings_delete]
		                   ON  [dbo].[resume_trainings]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resume_trainings',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resume_links_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resume_links_insert;
		                GO
		                CREATE TRIGGER [dbo].[resume_links_insert]
		                   ON  [dbo].[resume_links]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resume_links',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resume_links_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resume_links_update;
		                GO
		                CREATE TRIGGER [dbo].[resume_links_update]
		                   ON  [dbo].[resume_links]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resume_links',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resume_links_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resume_links_delete;
		                GO
		                CREATE TRIGGER [dbo].[resume_links_delete]
		                   ON  [dbo].[resume_links]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resume_links',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resumes_professionals_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resumes_professionals_insert;
		                GO
		                CREATE TRIGGER [dbo].[resumes_professionals_insert]
		                   ON  [dbo].[resumes_professionals]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resumes_professionals',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resumes_professionals_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resumes_professionals_update;
		                GO
		                CREATE TRIGGER [dbo].[resumes_professionals_update]
		                   ON  [dbo].[resumes_professionals]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resumes_professionals',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resumes_professionals_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resumes_professionals_delete;
		                GO
		                CREATE TRIGGER [dbo].[resumes_professionals_delete]
		                   ON  [dbo].[resumes_professionals]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resumes_professionals',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancy_entry_categories_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancy_entry_categories_insert;
		                GO
		                CREATE TRIGGER [dbo].[vacancy_entry_categories_insert]
		                   ON  [dbo].[vacancy_entry_categories]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancy_entry_categories',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancy_entry_categories_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancy_entry_categories_update;
		                GO
		                CREATE TRIGGER [dbo].[vacancy_entry_categories_update]
		                   ON  [dbo].[vacancy_entry_categories]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancy_entry_categories',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancy_entry_categories_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancy_entry_categories_delete;
		                GO
		                CREATE TRIGGER [dbo].[vacancy_entry_categories_delete]
		                   ON  [dbo].[vacancy_entry_categories]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancy_entry_categories',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('ad_advert_requests_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.ad_advert_requests_insert;
		                GO
		                CREATE TRIGGER [dbo].[ad_advert_requests_insert]
		                   ON  [dbo].[ad_advert_requests]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('ad_advert_requests',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('ad_advert_requests_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.ad_advert_requests_update;
		                GO
		                CREATE TRIGGER [dbo].[ad_advert_requests_update]
		                   ON  [dbo].[ad_advert_requests]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('ad_advert_requests',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('ad_advert_requests_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.ad_advert_requests_delete;
		                GO
		                CREATE TRIGGER [dbo].[ad_advert_requests_delete]
		                   ON  [dbo].[ad_advert_requests]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('ad_advert_requests',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('sales_comments_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.sales_comments_insert;
		                GO
		                CREATE TRIGGER [dbo].[sales_comments_insert]
		                   ON  [dbo].[sales_comments]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('sales_comments',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('sales_comments_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.sales_comments_update;
		                GO
		                CREATE TRIGGER [dbo].[sales_comments_update]
		                   ON  [dbo].[sales_comments]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('sales_comments',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('sales_comments_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.sales_comments_delete;
		                GO
		                CREATE TRIGGER [dbo].[sales_comments_delete]
		                   ON  [dbo].[sales_comments]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('sales_comments',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('sale_categories_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.sale_categories_insert;
		                GO
		                CREATE TRIGGER [dbo].[sale_categories_insert]
		                   ON  [dbo].[sale_categories]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('sale_categories',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('sale_categories_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.sale_categories_update;
		                GO
		                CREATE TRIGGER [dbo].[sale_categories_update]
		                   ON  [dbo].[sale_categories]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('sale_categories',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('sale_categories_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.sale_categories_delete;
		                GO
		                CREATE TRIGGER [dbo].[sale_categories_delete]
		                   ON  [dbo].[sale_categories]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('sale_categories',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurants_reserve_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurants_reserve_insert;
		                GO
		                CREATE TRIGGER [dbo].[restaurants_reserve_insert]
		                   ON  [dbo].[restaurants_reserve]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurants_reserve',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurants_reserve_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurants_reserve_update;
		                GO
		                CREATE TRIGGER [dbo].[restaurants_reserve_update]
		                   ON  [dbo].[restaurants_reserve]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurants_reserve',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurants_reserve_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurants_reserve_delete;
		                GO
		                CREATE TRIGGER [dbo].[restaurants_reserve_delete]
		                   ON  [dbo].[restaurants_reserve]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurants_reserve',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('company_ownerships_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.company_ownerships_insert;
		                GO
		                CREATE TRIGGER [dbo].[company_ownerships_insert]
		                   ON  [dbo].[company_ownerships]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('company_ownerships',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('company_ownerships_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.company_ownerships_update;
		                GO
		                CREATE TRIGGER [dbo].[company_ownerships_update]
		                   ON  [dbo].[company_ownerships]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('company_ownerships',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('company_ownerships_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.company_ownerships_delete;
		                GO
		                CREATE TRIGGER [dbo].[company_ownerships_delete]
		                   ON  [dbo].[company_ownerships]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('company_ownerships',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancy_facility_variants_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancy_facility_variants_insert;
		                GO
		                CREATE TRIGGER [dbo].[vacancy_facility_variants_insert]
		                   ON  [dbo].[vacancy_facility_variants]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancy_facility_variants',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancy_facility_variants_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancy_facility_variants_update;
		                GO
		                CREATE TRIGGER [dbo].[vacancy_facility_variants_update]
		                   ON  [dbo].[vacancy_facility_variants]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancy_facility_variants',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancy_facility_variants_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancy_facility_variants_delete;
		                GO
		                CREATE TRIGGER [dbo].[vacancy_facility_variants_delete]
		                   ON  [dbo].[vacancy_facility_variants]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancy_facility_variants',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancies_facilities_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancies_facilities_insert;
		                GO
		                CREATE TRIGGER [dbo].[vacancies_facilities_insert]
		                   ON  [dbo].[vacancies_facilities]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancies_facilities',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancies_facilities_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancies_facilities_update;
		                GO
		                CREATE TRIGGER [dbo].[vacancies_facilities_update]
		                   ON  [dbo].[vacancies_facilities]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancies_facilities',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancies_facilities_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancies_facilities_delete;
		                GO
		                CREATE TRIGGER [dbo].[vacancies_facilities_delete]
		                   ON  [dbo].[vacancies_facilities]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancies_facilities',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resumes_facilities_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resumes_facilities_insert;
		                GO
		                CREATE TRIGGER [dbo].[resumes_facilities_insert]
		                   ON  [dbo].[resumes_facilities]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resumes_facilities',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resumes_facilities_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resumes_facilities_update;
		                GO
		                CREATE TRIGGER [dbo].[resumes_facilities_update]
		                   ON  [dbo].[resumes_facilities]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resumes_facilities',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resumes_facilities_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resumes_facilities_delete;
		                GO
		                CREATE TRIGGER [dbo].[resumes_facilities_delete]
		                   ON  [dbo].[resumes_facilities]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resumes_facilities',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('companies_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.companies_insert;
		                GO
		                CREATE TRIGGER [dbo].[companies_insert]
		                   ON  [dbo].[companies]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('companies',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('companies_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.companies_update;
		                GO
		                CREATE TRIGGER [dbo].[companies_update]
		                   ON  [dbo].[companies]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('companies',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('companies_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.companies_delete;
		                GO
		                CREATE TRIGGER [dbo].[companies_delete]
		                   ON  [dbo].[companies]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('companies',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('my_messages_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.my_messages_insert;
		                GO
		                CREATE TRIGGER [dbo].[my_messages_insert]
		                   ON  [dbo].[my_messages]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('my_messages',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('my_messages_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.my_messages_update;
		                GO
		                CREATE TRIGGER [dbo].[my_messages_update]
		                   ON  [dbo].[my_messages]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('my_messages',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('my_messages_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.my_messages_delete;
		                GO
		                CREATE TRIGGER [dbo].[my_messages_delete]
		                   ON  [dbo].[my_messages]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('my_messages',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('actions_rating_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.actions_rating_insert;
		                GO
		                CREATE TRIGGER [dbo].[actions_rating_insert]
		                   ON  [dbo].[actions_rating]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('actions_rating',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('actions_rating_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.actions_rating_update;
		                GO
		                CREATE TRIGGER [dbo].[actions_rating_update]
		                   ON  [dbo].[actions_rating]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('actions_rating',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('actions_rating_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.actions_rating_delete;
		                GO
		                CREATE TRIGGER [dbo].[actions_rating_delete]
		                   ON  [dbo].[actions_rating]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('actions_rating',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('blog_marks_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.blog_marks_insert;
		                GO
		                CREATE TRIGGER [dbo].[blog_marks_insert]
		                   ON  [dbo].[blog_marks]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('blog_marks',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('blog_marks_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.blog_marks_update;
		                GO
		                CREATE TRIGGER [dbo].[blog_marks_update]
		                   ON  [dbo].[blog_marks]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('blog_marks',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('blog_marks_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.blog_marks_delete;
		                GO
		                CREATE TRIGGER [dbo].[blog_marks_delete]
		                   ON  [dbo].[blog_marks]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('blog_marks',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('company_rating_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.company_rating_insert;
		                GO
		                CREATE TRIGGER [dbo].[company_rating_insert]
		                   ON  [dbo].[company_rating]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('company_rating',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('company_rating_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.company_rating_update;
		                GO
		                CREATE TRIGGER [dbo].[company_rating_update]
		                   ON  [dbo].[company_rating]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('company_rating',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('company_rating_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.company_rating_delete;
		                GO
		                CREATE TRIGGER [dbo].[company_rating_delete]
		                   ON  [dbo].[company_rating]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('company_rating',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('places_rating_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.places_rating_insert;
		                GO
		                CREATE TRIGGER [dbo].[places_rating_insert]
		                   ON  [dbo].[places_rating]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('places_rating',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('places_rating_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.places_rating_update;
		                GO
		                CREATE TRIGGER [dbo].[places_rating_update]
		                   ON  [dbo].[places_rating]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('places_rating',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('places_rating_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.places_rating_delete;
		                GO
		                CREATE TRIGGER [dbo].[places_rating_delete]
		                   ON  [dbo].[places_rating]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('places_rating',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurant_rating_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurant_rating_insert;
		                GO
		                CREATE TRIGGER [dbo].[restaurant_rating_insert]
		                   ON  [dbo].[restaurant_rating]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurant_rating',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurant_rating_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurant_rating_update;
		                GO
		                CREATE TRIGGER [dbo].[restaurant_rating_update]
		                   ON  [dbo].[restaurant_rating]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurant_rating',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurant_rating_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurant_rating_delete;
		                GO
		                CREATE TRIGGER [dbo].[restaurant_rating_delete]
		                   ON  [dbo].[restaurant_rating]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurant_rating',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('blogs_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.blogs_insert;
		                GO
		                CREATE TRIGGER [dbo].[blogs_insert]
		                   ON  [dbo].[blogs]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('blogs',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('blogs_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.blogs_update;
		                GO
		                CREATE TRIGGER [dbo].[blogs_update]
		                   ON  [dbo].[blogs]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('blogs',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('blogs_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.blogs_delete;
		                GO
		                CREATE TRIGGER [dbo].[blogs_delete]
		                   ON  [dbo].[blogs]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('blogs',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_cart_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_cart_insert;
		                GO
		                CREATE TRIGGER [dbo].[photobank_cart_insert]
		                   ON  [dbo].[photobank_cart]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_cart',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_cart_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_cart_update;
		                GO
		                CREATE TRIGGER [dbo].[photobank_cart_update]
		                   ON  [dbo].[photobank_cart]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_cart',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_cart_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_cart_delete;
		                GO
		                CREATE TRIGGER [dbo].[photobank_cart_delete]
		                   ON  [dbo].[photobank_cart]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_cart',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_obtained_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_obtained_insert;
		                GO
		                CREATE TRIGGER [dbo].[photobank_obtained_insert]
		                   ON  [dbo].[photobank_obtained]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_obtained',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_obtained_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_obtained_update;
		                GO
		                CREATE TRIGGER [dbo].[photobank_obtained_update]
		                   ON  [dbo].[photobank_obtained]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_obtained',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_obtained_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_obtained_delete;
		                GO
		                CREATE TRIGGER [dbo].[photobank_obtained_delete]
		                   ON  [dbo].[photobank_obtained]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_obtained',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('accounts_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.accounts_insert;
		                GO
		                CREATE TRIGGER [dbo].[accounts_insert]
		                   ON  [dbo].[accounts]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('accounts',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('accounts_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.accounts_update;
		                GO
		                CREATE TRIGGER [dbo].[accounts_update]
		                   ON  [dbo].[accounts]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('accounts',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('accounts_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.accounts_delete;
		                GO
		                CREATE TRIGGER [dbo].[accounts_delete]
		                   ON  [dbo].[accounts]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('accounts',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('blog_photos_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.blog_photos_insert;
		                GO
		                CREATE TRIGGER [dbo].[blog_photos_insert]
		                   ON  [dbo].[blog_photos]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('blog_photos',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('blog_photos_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.blog_photos_update;
		                GO
		                CREATE TRIGGER [dbo].[blog_photos_update]
		                   ON  [dbo].[blog_photos]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('blog_photos',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('blog_photos_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.blog_photos_delete;
		                GO
		                CREATE TRIGGER [dbo].[blog_photos_delete]
		                   ON  [dbo].[blog_photos]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('blog_photos',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resumes_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resumes_insert;
		                GO
		                CREATE TRIGGER [dbo].[resumes_insert]
		                   ON  [dbo].[resumes]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resumes',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resumes_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resumes_update;
		                GO
		                CREATE TRIGGER [dbo].[resumes_update]
		                   ON  [dbo].[resumes]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resumes',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resumes_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resumes_delete;
		                GO
		                CREATE TRIGGER [dbo].[resumes_delete]
		                   ON  [dbo].[resumes]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resumes',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurants_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurants_insert;
		                GO
		                CREATE TRIGGER [dbo].[restaurants_insert]
		                   ON  [dbo].[restaurants]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurants',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurants_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurants_update;
		                GO
		                CREATE TRIGGER [dbo].[restaurants_update]
		                   ON  [dbo].[restaurants]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurants',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('restaurants_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.restaurants_delete;
		                GO
		                CREATE TRIGGER [dbo].[restaurants_delete]
		                   ON  [dbo].[restaurants]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('restaurants',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('ad_advertisments_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.ad_advertisments_insert;
		                GO
		                CREATE TRIGGER [dbo].[ad_advertisments_insert]
		                   ON  [dbo].[ad_advertisments]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('ad_advertisments',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('ad_advertisments_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.ad_advertisments_update;
		                GO
		                CREATE TRIGGER [dbo].[ad_advertisments_update]
		                   ON  [dbo].[ad_advertisments]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('ad_advertisments',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('ad_advertisments_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.ad_advertisments_delete;
		                GO
		                CREATE TRIGGER [dbo].[ad_advertisments_delete]
		                   ON  [dbo].[ad_advertisments]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('ad_advertisments',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('accounts_favorites_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.accounts_favorites_insert;
		                GO
		                CREATE TRIGGER [dbo].[accounts_favorites_insert]
		                   ON  [dbo].[accounts_favorites]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('accounts_favorites',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('accounts_favorites_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.accounts_favorites_update;
		                GO
		                CREATE TRIGGER [dbo].[accounts_favorites_update]
		                   ON  [dbo].[accounts_favorites]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('accounts_favorites',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('accounts_favorites_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.accounts_favorites_delete;
		                GO
		                CREATE TRIGGER [dbo].[accounts_favorites_delete]
		                   ON  [dbo].[accounts_favorites]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('accounts_favorites',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('quizzes_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.quizzes_insert;
		                GO
		                CREATE TRIGGER [dbo].[quizzes_insert]
		                   ON  [dbo].[quizzes]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('quizzes',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('quizzes_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.quizzes_update;
		                GO
		                CREATE TRIGGER [dbo].[quizzes_update]
		                   ON  [dbo].[quizzes]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('quizzes',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('quizzes_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.quizzes_delete;
		                GO
		                CREATE TRIGGER [dbo].[quizzes_delete]
		                   ON  [dbo].[quizzes]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('quizzes',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('quiz_options_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.quiz_options_insert;
		                GO
		                CREATE TRIGGER [dbo].[quiz_options_insert]
		                   ON  [dbo].[quiz_options]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('quiz_options',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('quiz_options_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.quiz_options_update;
		                GO
		                CREATE TRIGGER [dbo].[quiz_options_update]
		                   ON  [dbo].[quiz_options]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('quiz_options',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('quiz_options_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.quiz_options_delete;
		                GO
		                CREATE TRIGGER [dbo].[quiz_options_delete]
		                   ON  [dbo].[quiz_options]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('quiz_options',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('quiz_results_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.quiz_results_insert;
		                GO
		                CREATE TRIGGER [dbo].[quiz_results_insert]
		                   ON  [dbo].[quiz_results]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('quiz_results',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('quiz_results_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.quiz_results_update;
		                GO
		                CREATE TRIGGER [dbo].[quiz_results_update]
		                   ON  [dbo].[quiz_results]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('quiz_results',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('quiz_results_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.quiz_results_delete;
		                GO
		                CREATE TRIGGER [dbo].[quiz_results_delete]
		                   ON  [dbo].[quiz_results]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('quiz_results',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('places_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.places_insert;
		                GO
		                CREATE TRIGGER [dbo].[places_insert]
		                   ON  [dbo].[places]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('places',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('places_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.places_update;
		                GO
		                CREATE TRIGGER [dbo].[places_update]
		                   ON  [dbo].[places]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('places',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('places_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.places_delete;
		                GO
		                CREATE TRIGGER [dbo].[places_delete]
		                   ON  [dbo].[places]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('places',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('actions_places_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.actions_places_insert;
		                GO
		                CREATE TRIGGER [dbo].[actions_places_insert]
		                   ON  [dbo].[actions_places]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('actions_places',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('actions_places_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.actions_places_update;
		                GO
		                CREATE TRIGGER [dbo].[actions_places_update]
		                   ON  [dbo].[actions_places]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('actions_places',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('actions_places_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.actions_places_delete;
		                GO
		                CREATE TRIGGER [dbo].[actions_places_delete]
		                   ON  [dbo].[actions_places]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('actions_places',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('actions_schedule_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.actions_schedule_insert;
		                GO
		                CREATE TRIGGER [dbo].[actions_schedule_insert]
		                   ON  [dbo].[actions_schedule]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('actions_schedule',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('actions_schedule_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.actions_schedule_update;
		                GO
		                CREATE TRIGGER [dbo].[actions_schedule_update]
		                   ON  [dbo].[actions_schedule]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('actions_schedule',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('actions_schedule_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.actions_schedule_delete;
		                GO
		                CREATE TRIGGER [dbo].[actions_schedule_delete]
		                   ON  [dbo].[actions_schedule]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('actions_schedule',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancies_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancies_insert;
		                GO
		                CREATE TRIGGER [dbo].[vacancies_insert]
		                   ON  [dbo].[vacancies]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancies',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancies_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancies_update;
		                GO
		                CREATE TRIGGER [dbo].[vacancies_update]
		                   ON  [dbo].[vacancies]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancies',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancies_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancies_delete;
		                GO
		                CREATE TRIGGER [dbo].[vacancies_delete]
		                   ON  [dbo].[vacancies]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancies',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancy_entries_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancy_entries_insert;
		                GO
		                CREATE TRIGGER [dbo].[vacancy_entries_insert]
		                   ON  [dbo].[vacancy_entries]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancy_entries',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancy_entries_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancy_entries_update;
		                GO
		                CREATE TRIGGER [dbo].[vacancy_entries_update]
		                   ON  [dbo].[vacancy_entries]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancy_entries',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancy_entries_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancy_entries_delete;
		                GO
		                CREATE TRIGGER [dbo].[vacancy_entries_delete]
		                   ON  [dbo].[vacancy_entries]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancy_entries',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancy_facilities_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancy_facilities_insert;
		                GO
		                CREATE TRIGGER [dbo].[vacancy_facilities_insert]
		                   ON  [dbo].[vacancy_facilities]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancy_facilities',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancy_facilities_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancy_facilities_update;
		                GO
		                CREATE TRIGGER [dbo].[vacancy_facilities_update]
		                   ON  [dbo].[vacancy_facilities]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancy_facilities',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('vacancy_facilities_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.vacancy_facilities_delete;
		                GO
		                CREATE TRIGGER [dbo].[vacancy_facilities_delete]
		                   ON  [dbo].[vacancy_facilities]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('vacancy_facilities',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('ad_fields_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.ad_fields_insert;
		                GO
		                CREATE TRIGGER [dbo].[ad_fields_insert]
		                   ON  [dbo].[ad_fields]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('ad_fields',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('ad_fields_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.ad_fields_update;
		                GO
		                CREATE TRIGGER [dbo].[ad_fields_update]
		                   ON  [dbo].[ad_fields]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('ad_fields',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('ad_fields_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.ad_fields_delete;
		                GO
		                CREATE TRIGGER [dbo].[ad_fields_delete]
		                   ON  [dbo].[ad_fields]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('ad_fields',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_related_photos_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_related_photos_insert;
		                GO
		                CREATE TRIGGER [dbo].[photobank_related_photos_insert]
		                   ON  [dbo].[photobank_related_photos]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_related_photos',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_related_photos_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_related_photos_update;
		                GO
		                CREATE TRIGGER [dbo].[photobank_related_photos_update]
		                   ON  [dbo].[photobank_related_photos]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_related_photos',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_related_photos_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_related_photos_delete;
		                GO
		                CREATE TRIGGER [dbo].[photobank_related_photos_delete]
		                   ON  [dbo].[photobank_related_photos]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_related_photos',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_photo_prices_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_photo_prices_insert;
		                GO
		                CREATE TRIGGER [dbo].[photobank_photo_prices_insert]
		                   ON  [dbo].[photobank_photo_prices]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_photo_prices',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_photo_prices_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_photo_prices_update;
		                GO
		                CREATE TRIGGER [dbo].[photobank_photo_prices_update]
		                   ON  [dbo].[photobank_photo_prices]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_photo_prices',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_photo_prices_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_photo_prices_delete;
		                GO
		                CREATE TRIGGER [dbo].[photobank_photo_prices_delete]
		                   ON  [dbo].[photobank_photo_prices]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_photo_prices',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_photos_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_photos_insert;
		                GO
		                CREATE TRIGGER [dbo].[photobank_photos_insert]
		                   ON  [dbo].[photobank_photos]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_photos',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_photos_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_photos_update;
		                GO
		                CREATE TRIGGER [dbo].[photobank_photos_update]
		                   ON  [dbo].[photobank_photos]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_photos',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_photos_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_photos_delete;
		                GO
		                CREATE TRIGGER [dbo].[photobank_photos_delete]
		                   ON  [dbo].[photobank_photos]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_photos',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('news_categories_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.news_categories_insert;
		                GO
		                CREATE TRIGGER [dbo].[news_categories_insert]
		                   ON  [dbo].[news_categories]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('news_categories',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('news_categories_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.news_categories_update;
		                GO
		                CREATE TRIGGER [dbo].[news_categories_update]
		                   ON  [dbo].[news_categories]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('news_categories',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('news_categories_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.news_categories_delete;
		                GO
		                CREATE TRIGGER [dbo].[news_categories_delete]
		                   ON  [dbo].[news_categories]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('news_categories',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_user_albums_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_user_albums_insert;
		                GO
		                CREATE TRIGGER [dbo].[photobank_user_albums_insert]
		                   ON  [dbo].[photobank_user_albums]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_user_albums',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_user_albums_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_user_albums_update;
		                GO
		                CREATE TRIGGER [dbo].[photobank_user_albums_update]
		                   ON  [dbo].[photobank_user_albums]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_user_albums',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('photobank_user_albums_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.photobank_user_albums_delete;
		                GO
		                CREATE TRIGGER [dbo].[photobank_user_albums_delete]
		                   ON  [dbo].[photobank_user_albums]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('photobank_user_albums',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('actions_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.actions_insert;
		                GO
		                CREATE TRIGGER [dbo].[actions_insert]
		                   ON  [dbo].[actions]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('actions',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('actions_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.actions_update;
		                GO
		                CREATE TRIGGER [dbo].[actions_update]
		                   ON  [dbo].[actions]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('actions',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('actions_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.actions_delete;
		                GO
		                CREATE TRIGGER [dbo].[actions_delete]
		                   ON  [dbo].[actions]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('actions',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('ad_photos_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.ad_photos_insert;
		                GO
		                CREATE TRIGGER [dbo].[ad_photos_insert]
		                   ON  [dbo].[ad_photos]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('ad_photos',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('ad_photos_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.ad_photos_update;
		                GO
		                CREATE TRIGGER [dbo].[ad_photos_update]
		                   ON  [dbo].[ad_photos]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('ad_photos',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('ad_photos_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.ad_photos_delete;
		                GO
		                CREATE TRIGGER [dbo].[ad_photos_delete]
		                   ON  [dbo].[ad_photos]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('ad_photos',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('sales_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.sales_insert;
		                GO
		                CREATE TRIGGER [dbo].[sales_insert]
		                   ON  [dbo].[sales]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('sales',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('sales_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.sales_update;
		                GO
		                CREATE TRIGGER [dbo].[sales_update]
		                   ON  [dbo].[sales]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('sales',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('sales_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.sales_delete;
		                GO
		                CREATE TRIGGER [dbo].[sales_delete]
		                   ON  [dbo].[sales]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('sales',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('sale_types_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.sale_types_insert;
		                GO
		                CREATE TRIGGER [dbo].[sale_types_insert]
		                   ON  [dbo].[sale_types]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('sale_types',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('sale_types_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.sale_types_update;
		                GO
		                CREATE TRIGGER [dbo].[sale_types_update]
		                   ON  [dbo].[sale_types]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('sale_types',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('sale_types_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.sale_types_delete;
		                GO
		                CREATE TRIGGER [dbo].[sale_types_delete]
		                   ON  [dbo].[sale_types]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('sale_types',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		*/
		public string ConnectionString {get; set;}
		public protoStore.account_rolesStore account_rolesStore {get; set;}
		public protoStore.action_categoriesStore action_categoriesStore {get; set;}
		public protoStore.actions_commentsStore actions_commentsStore {get; set;}
		public protoStore.actions_genresStore actions_genresStore {get; set;}
		public protoStore.actions_photosStore actions_photosStore {get; set;}
		public protoStore.ad_categoriesStore ad_categoriesStore {get; set;}
		public protoStore.ad_field_descriptionsStore ad_field_descriptionsStore {get; set;}
		public protoStore.ad_lookup_valuesStore ad_lookup_valuesStore {get; set;}
		public protoStore.blog_categoriesStore blog_categoriesStore {get; set;}
		public protoStore.blog_commentsStore blog_commentsStore {get; set;}
		public protoStore.blog_lastviewsStore blog_lastviewsStore {get; set;}
		public protoStore.citiesStore citiesStore {get; set;}
		public protoStore.city_pricesStore city_pricesStore {get; set;}
		public protoStore.city_prices_iconsStore city_prices_iconsStore {get; set;}
		public protoStore.comments_newsStore comments_newsStore {get; set;}
		public protoStore.companies_kind_activitiesStore companies_kind_activitiesStore {get; set;}
		public protoStore.company_categoriesStore company_categoriesStore {get; set;}
		public protoStore.company_commentsStore company_commentsStore {get; set;}
		public protoStore.company_filesStore company_filesStore {get; set;}
		public protoStore.company_kind_activitiesStore company_kind_activitiesStore {get; set;}
		public protoStore.company_photosStore company_photosStore {get; set;}
		public protoStore.genresStore genresStore {get; set;}
		public protoStore.main_page_widgetsStore main_page_widgetsStore {get; set;}
		public protoStore.news_imagesStore news_imagesStore {get; set;}
		public protoStore.news_marksStore news_marksStore {get; set;}
		public protoStore.news_videosStore news_videosStore {get; set;}
		public protoStore.photobank_categoriesStore photobank_categoriesStore {get; set;}
		public protoStore.photobank_licensesStore photobank_licensesStore {get; set;}
		public protoStore.photobank_photos_ratingStore photobank_photos_ratingStore {get; set;}
		public protoStore.photobank_tagsStore photobank_tagsStore {get; set;}
		public protoStore.regionsStore regionsStore {get; set;}
		public protoStore.restaurant_commentsStore restaurant_commentsStore {get; set;}
		public protoStore.restaurant_entriesStore restaurant_entriesStore {get; set;}
		public protoStore.restaurant_entry_categoriesStore restaurant_entry_categoriesStore {get; set;}
		public protoStore.restaurant_eventsStore restaurant_eventsStore {get; set;}
		public protoStore.restaurant_photosStore restaurant_photosStore {get; set;}
		public protoStore.restaurants_entriesStore restaurants_entriesStore {get; set;}
		public protoStore.vacancies_entriesStore vacancies_entriesStore {get; set;}
		public protoStore.vacancies_professionalsStore vacancies_professionalsStore {get; set;}
		public protoStore.vacancy_professionalsStore vacancy_professionalsStore {get; set;}
		public protoStore.pagesStore pagesStore {get; set;}
		public protoStore.pages_filesStore pages_filesStore {get; set;}
		public protoStore.newsStore newsStore {get; set;}
		public protoStore.photobank_photo_tagsStore photobank_photo_tagsStore {get; set;}
		public protoStore.resumes_entriesStore resumes_entriesStore {get; set;}
		public protoStore.resume_educationsStore resume_educationsStore {get; set;}
		public protoStore.resume_worksStore resume_worksStore {get; set;}
		public protoStore.resume_trainingsStore resume_trainingsStore {get; set;}
		public protoStore.resume_linksStore resume_linksStore {get; set;}
		public protoStore.resumes_professionalsStore resumes_professionalsStore {get; set;}
		public protoStore.vacancy_entry_categoriesStore vacancy_entry_categoriesStore {get; set;}
		public protoStore.ad_advert_requestsStore ad_advert_requestsStore {get; set;}
		public protoStore.sales_commentsStore sales_commentsStore {get; set;}
		public protoStore.sale_categoriesStore sale_categoriesStore {get; set;}
		public protoStore.restaurants_reserveStore restaurants_reserveStore {get; set;}
		public protoStore.company_ownershipsStore company_ownershipsStore {get; set;}
		public protoStore.vacancy_facility_variantsStore vacancy_facility_variantsStore {get; set;}
		public protoStore.vacancies_facilitiesStore vacancies_facilitiesStore {get; set;}
		public protoStore.resumes_facilitiesStore resumes_facilitiesStore {get; set;}
		public protoStore.companiesStore companiesStore {get; set;}
		public protoStore.my_messagesStore my_messagesStore {get; set;}
		public protoStore.actions_ratingStore actions_ratingStore {get; set;}
		public protoStore.blog_marksStore blog_marksStore {get; set;}
		public protoStore.company_ratingStore company_ratingStore {get; set;}
		public protoStore.places_ratingStore places_ratingStore {get; set;}
		public protoStore.restaurant_ratingStore restaurant_ratingStore {get; set;}
		public protoStore.blogsStore blogsStore {get; set;}
		public protoStore.photobank_cartStore photobank_cartStore {get; set;}
		public protoStore.photobank_obtainedStore photobank_obtainedStore {get; set;}
		public protoStore.accountsStore accountsStore {get; set;}
		public protoStore.blog_photosStore blog_photosStore {get; set;}
		public protoStore.resumesStore resumesStore {get; set;}
		public protoStore.restaurantsStore restaurantsStore {get; set;}
		public protoStore.ad_advertismentsStore ad_advertismentsStore {get; set;}
		public protoStore.accounts_favoritesStore accounts_favoritesStore {get; set;}
		public protoStore.quizzesStore quizzesStore {get; set;}
		public protoStore.quiz_optionsStore quiz_optionsStore {get; set;}
		public protoStore.quiz_resultsStore quiz_resultsStore {get; set;}
		public protoStore.placesStore placesStore {get; set;}
		public protoStore.actions_placesStore actions_placesStore {get; set;}
		public protoStore.actions_scheduleStore actions_scheduleStore {get; set;}
		public protoStore.vacanciesStore vacanciesStore {get; set;}
		public protoStore.vacancy_entriesStore vacancy_entriesStore {get; set;}
		public protoStore.vacancy_facilitiesStore vacancy_facilitiesStore {get; set;}
		public protoStore.ad_fieldsStore ad_fieldsStore {get; set;}
		public protoStore.photobank_related_photosStore photobank_related_photosStore {get; set;}
		public protoStore.photobank_photo_pricesStore photobank_photo_pricesStore {get; set;}
		public protoStore.photobank_photosStore photobank_photosStore {get; set;}
		public protoStore.news_categoriesStore news_categoriesStore {get; set;}
		public protoStore.photobank_user_albumsStore photobank_user_albumsStore {get; set;}
		public protoStore.actionsStore actionsStore {get; set;}
		public protoStore.ad_photosStore ad_photosStore {get; set;}
		public protoStore.salesStore salesStore {get; set;}
		public protoStore.sale_typesStore sale_typesStore {get; set;}
	}
}
