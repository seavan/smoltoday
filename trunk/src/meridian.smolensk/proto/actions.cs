/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.smolensk;
using meridian.smolensk.system;

namespace meridian.smolensk.proto
{
	[MetadataType(typeof(actions_meta))]	public partial class actions : admin.db.IDatabaseEntity
	{
		public actions()
		{
			ap_actions = new List<actions_places>();
			c_actions = new List<actions_comments>();
			g_actions = new List<actions_genres>();
			aphoto_actions = new List<actions_photos>();
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private string m_title = "";
		internal bool mc_title { get; private set; }
		private string m_text = "";
		internal bool mc_text { get; private set; }
		private DateTime m_publish_date = DateTime.MinValue;
		internal bool mc_publish_date { get; private set; }
		private bool m_is_main = false;
		internal bool mc_is_main { get; private set; }
		private bool m_is_main_category = false;
		internal bool mc_is_main_category { get; private set; }
		private bool m_is_top = false;
		internal bool mc_is_top { get; private set; }
		private int m_rating = 0;
		internal bool mc_rating { get; private set; }
		private int m_age_limit = 0;
		internal bool mc_age_limit { get; private set; }
		private int m_comment_count = 0;
		internal bool mc_comment_count { get; private set; }
		private int m_participiants_count = 0;
		internal bool mc_participiants_count { get; private set; }
		private long m_category_id = 0;
		internal bool mc_category_id { get; private set; }
		private long m_account_id = 0;
		internal bool mc_account_id { get; private set; }
		private bool m_approve = false;
		internal bool mc_approve { get; private set; }
		private bool m_published = false;
		internal bool mc_published { get; private set; }
		private bool m_delete = false;
		internal bool mc_delete { get; private set; }
		private string m_author = "";
		internal bool mc_author { get; private set; }
		private string m_producer = "";
		internal bool mc_producer { get; private set; }
		private string m_statement = "";
		internal bool mc_statement { get; private set; }
		private string m_lecturer = "";
		internal bool mc_lecturer { get; private set; }
		private string m_performers = "";
		internal bool mc_performers { get; private set; }
		private string m_country = "";
		internal bool mc_country { get; private set; }
		private int m_duration = 0;
		internal bool mc_duration { get; private set; }
		private DateTime m_start_date = DateTime.MinValue;
		internal bool mc_start_date { get; private set; }
		private int m_price_min = 0;
		internal bool mc_price_min { get; private set; }
		private int m_price_max = 0;
		internal bool mc_price_max { get; private set; }
		private string m_site = "";
		internal bool mc_site { get; private set; }
		private string m_google_link = "";
		internal bool mc_google_link { get; private set; }
		private string m_facebook_link = "";
		internal bool mc_facebook_link { get; private set; }
		private string m_twitter_link = "";
		internal bool mc_twitter_link { get; private set; }
		private string m_vk_link = "";
		internal bool mc_vk_link { get; private set; }
		private string m_mail_link = "";
		internal bool mc_mail_link { get; private set; }
		private string m_odnoklassniki_link = "";
		internal bool mc_odnoklassniki_link { get; private set; }
		private string m_coordinates = "";
		internal bool mc_coordinates { get; private set; }
		private string m_map_title = "";
		internal bool mc_map_title { get; private set; }
		private string m_map_description = "";
		internal bool mc_map_description { get; private set; }
		private string m_image_for_main = "";
		internal bool mc_image_for_main { get; private set; }
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_title = _reader["title"].GetType() != typeof(System.DBNull) ? _reader.GetString("title") : "";
			mc_title = false;
			m_text = _reader["text"].GetType() != typeof(System.DBNull) ? _reader.GetString("text") : "";
			mc_text = false;
			m_publish_date = _reader["publish_date"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("publish_date") : DateTime.MinValue;
			mc_publish_date = false;
			m_is_main = _reader["is_main"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("is_main") : false;
			mc_is_main = false;
			m_is_main_category = _reader["is_main_category"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("is_main_category") : false;
			mc_is_main_category = false;
			m_is_top = _reader["is_top"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("is_top") : false;
			mc_is_top = false;
			m_rating = _reader["rating"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("rating") : 0;
			mc_rating = false;
			m_age_limit = _reader["age_limit"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("age_limit") : 0;
			mc_age_limit = false;
			m_comment_count = _reader["comment_count"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("comment_count") : 0;
			mc_comment_count = false;
			m_participiants_count = _reader["participiants_count"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("participiants_count") : 0;
			mc_participiants_count = false;
			m_category_id = _reader["category_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("category_id") : 0;
			mc_category_id = false;
			m_account_id = _reader["account_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("account_id") : 0;
			mc_account_id = false;
			m_approve = _reader["approve"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("approve") : false;
			mc_approve = false;
			m_published = _reader["published"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("published") : false;
			mc_published = false;
			m_delete = _reader["delete"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("delete") : false;
			mc_delete = false;
			m_author = _reader["author"].GetType() != typeof(System.DBNull) ? _reader.GetString("author") : "";
			mc_author = false;
			m_producer = _reader["producer"].GetType() != typeof(System.DBNull) ? _reader.GetString("producer") : "";
			mc_producer = false;
			m_statement = _reader["statement"].GetType() != typeof(System.DBNull) ? _reader.GetString("statement") : "";
			mc_statement = false;
			m_lecturer = _reader["lecturer"].GetType() != typeof(System.DBNull) ? _reader.GetString("lecturer") : "";
			mc_lecturer = false;
			m_performers = _reader["performers"].GetType() != typeof(System.DBNull) ? _reader.GetString("performers") : "";
			mc_performers = false;
			m_country = _reader["country"].GetType() != typeof(System.DBNull) ? _reader.GetString("country") : "";
			mc_country = false;
			m_duration = _reader["duration"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("duration") : 0;
			mc_duration = false;
			m_start_date = _reader["start_date"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("start_date") : DateTime.MinValue;
			mc_start_date = false;
			m_price_min = _reader["price_min"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("price_min") : 0;
			mc_price_min = false;
			m_price_max = _reader["price_max"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("price_max") : 0;
			mc_price_max = false;
			m_site = _reader["site"].GetType() != typeof(System.DBNull) ? _reader.GetString("site") : "";
			mc_site = false;
			m_google_link = _reader["google_link"].GetType() != typeof(System.DBNull) ? _reader.GetString("google_link") : "";
			mc_google_link = false;
			m_facebook_link = _reader["facebook_link"].GetType() != typeof(System.DBNull) ? _reader.GetString("facebook_link") : "";
			mc_facebook_link = false;
			m_twitter_link = _reader["twitter_link"].GetType() != typeof(System.DBNull) ? _reader.GetString("twitter_link") : "";
			mc_twitter_link = false;
			m_vk_link = _reader["vk_link"].GetType() != typeof(System.DBNull) ? _reader.GetString("vk_link") : "";
			mc_vk_link = false;
			m_mail_link = _reader["mail_link"].GetType() != typeof(System.DBNull) ? _reader.GetString("mail_link") : "";
			mc_mail_link = false;
			m_odnoklassniki_link = _reader["odnoklassniki_link"].GetType() != typeof(System.DBNull) ? _reader.GetString("odnoklassniki_link") : "";
			mc_odnoklassniki_link = false;
			m_coordinates = _reader["coordinates"].GetType() != typeof(System.DBNull) ? _reader.GetString("coordinates") : "";
			mc_coordinates = false;
			m_map_title = _reader["map_title"].GetType() != typeof(System.DBNull) ? _reader.GetString("map_title") : "";
			mc_map_title = false;
			m_map_description = _reader["map_description"].GetType() != typeof(System.DBNull) ? _reader.GetString("map_description") : "";
			mc_map_description = false;
			m_image_for_main = _reader["image_for_main"].GetType() != typeof(System.DBNull) ? _reader.GetString("image_for_main") : "";
			mc_image_for_main = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
			if((category_id > 0) && (_meridian.action_categoriesStore.Exists(category_id)))
			{
				this.ca_actions_action_categories = _meridian.action_categoriesStore.Get(category_id);;
				this.ca_actions_action_categories.AddActionCategory(this);
			}
		}
		public void DeleteAggregations()
		{
			if(this.ca_actions_action_categories != null)
			{
				this.ca_actions_action_categories.RemoveActionCategory(this);
			}
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public void SaveCompositions(Meridian _meridian)
		{
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public string ProtoName
		{
			get { return "actions"; }
		}
		/* metafile template 
		internal class actions_meta
		{
			public long id { get; set; }
			public string title { get; set; }
			public string text { get; set; }
			public DateTime publish_date { get; set; }
			public bool is_main { get; set; }
			public bool is_main_category { get; set; }
			public bool is_top { get; set; }
			public int rating { get; set; }
			public int age_limit { get; set; }
			public int comment_count { get; set; }
			public int participiants_count { get; set; }
			public long category_id { get; set; }
			public long account_id { get; set; }
			public bool approve { get; set; }
			public bool published { get; set; }
			public bool delete { get; set; }
			public string author { get; set; }
			public string producer { get; set; }
			public string statement { get; set; }
			public string lecturer { get; set; }
			public string performers { get; set; }
			public string country { get; set; }
			public int duration { get; set; }
			public DateTime start_date { get; set; }
			public int price_min { get; set; }
			public int price_max { get; set; }
			public string site { get; set; }
			public string google_link { get; set; }
			public string facebook_link { get; set; }
			public string twitter_link { get; set; }
			public string vk_link { get; set; }
			public string mail_link { get; set; }
			public string odnoklassniki_link { get; set; }
			public string coordinates { get; set; }
			public string map_title { get; set; }
			public string map_description { get; set; }
			public string image_for_main { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public string title
		{
			get
			{
				return m_title;
			}
			set
			{
				if(m_title != value)
				{
					m_title = value != null ? value : "";
					mc_title = true;
					// call update worker thread;
				}
			}
		}
		public string text
		{
			get
			{
				return m_text;
			}
			set
			{
				if(m_text != value)
				{
					m_text = value != null ? value : "";
					mc_text = true;
					// call update worker thread;
				}
			}
		}
		public DateTime publish_date
		{
			get
			{
				return m_publish_date;
			}
			set
			{
				if(m_publish_date != value)
				{
					m_publish_date = value != null ? value : DateTime.MinValue;
					if(m_publish_date.Year < 1800) value = DateTime.MinValue;
					mc_publish_date = true;
					// call update worker thread;
				}
			}
		}
		public bool is_main
		{
			get
			{
				return m_is_main;
			}
			set
			{
				if(m_is_main != value)
				{
					m_is_main = value != null ? value : false;
					mc_is_main = true;
					// call update worker thread;
				}
			}
		}
		public bool is_main_category
		{
			get
			{
				return m_is_main_category;
			}
			set
			{
				if(m_is_main_category != value)
				{
					m_is_main_category = value != null ? value : false;
					mc_is_main_category = true;
					// call update worker thread;
				}
			}
		}
		public bool is_top
		{
			get
			{
				return m_is_top;
			}
			set
			{
				if(m_is_top != value)
				{
					m_is_top = value != null ? value : false;
					mc_is_top = true;
					// call update worker thread;
				}
			}
		}
		public int rating
		{
			get
			{
				return m_rating;
			}
			set
			{
				if(m_rating != value)
				{
					m_rating = value != null ? value : 0;
					mc_rating = true;
					// call update worker thread;
				}
			}
		}
		public int age_limit
		{
			get
			{
				return m_age_limit;
			}
			set
			{
				if(m_age_limit != value)
				{
					m_age_limit = value != null ? value : 0;
					mc_age_limit = true;
					// call update worker thread;
				}
			}
		}
		public int comment_count
		{
			get
			{
				return m_comment_count;
			}
			set
			{
				if(m_comment_count != value)
				{
					m_comment_count = value != null ? value : 0;
					mc_comment_count = true;
					// call update worker thread;
				}
			}
		}
		public int participiants_count
		{
			get
			{
				return m_participiants_count;
			}
			set
			{
				if(m_participiants_count != value)
				{
					m_participiants_count = value != null ? value : 0;
					mc_participiants_count = true;
					// call update worker thread;
				}
			}
		}
		public long category_id
		{
			get
			{
				return m_category_id;
			}
			set
			{
				if(m_category_id != value)
				{
					m_category_id = value != null ? value : 0;
					mc_category_id = true;
					// call update worker thread;
				}
			}
		}
		public long account_id
		{
			get
			{
				return m_account_id;
			}
			set
			{
				if(m_account_id != value)
				{
					m_account_id = value != null ? value : 0;
					mc_account_id = true;
					// call update worker thread;
				}
			}
		}
		public bool approve
		{
			get
			{
				return m_approve;
			}
			set
			{
				if(m_approve != value)
				{
					m_approve = value != null ? value : false;
					mc_approve = true;
					// call update worker thread;
				}
			}
		}
		public bool published
		{
			get
			{
				return m_published;
			}
			set
			{
				if(m_published != value)
				{
					m_published = value != null ? value : false;
					mc_published = true;
					// call update worker thread;
				}
			}
		}
		public bool delete
		{
			get
			{
				return m_delete;
			}
			set
			{
				if(m_delete != value)
				{
					m_delete = value != null ? value : false;
					mc_delete = true;
					// call update worker thread;
				}
			}
		}
		public string author
		{
			get
			{
				return m_author;
			}
			set
			{
				if(m_author != value)
				{
					m_author = value != null ? value : "";
					mc_author = true;
					// call update worker thread;
				}
			}
		}
		public string producer
		{
			get
			{
				return m_producer;
			}
			set
			{
				if(m_producer != value)
				{
					m_producer = value != null ? value : "";
					mc_producer = true;
					// call update worker thread;
				}
			}
		}
		public string statement
		{
			get
			{
				return m_statement;
			}
			set
			{
				if(m_statement != value)
				{
					m_statement = value != null ? value : "";
					mc_statement = true;
					// call update worker thread;
				}
			}
		}
		public string lecturer
		{
			get
			{
				return m_lecturer;
			}
			set
			{
				if(m_lecturer != value)
				{
					m_lecturer = value != null ? value : "";
					mc_lecturer = true;
					// call update worker thread;
				}
			}
		}
		public string performers
		{
			get
			{
				return m_performers;
			}
			set
			{
				if(m_performers != value)
				{
					m_performers = value != null ? value : "";
					mc_performers = true;
					// call update worker thread;
				}
			}
		}
		public string country
		{
			get
			{
				return m_country;
			}
			set
			{
				if(m_country != value)
				{
					m_country = value != null ? value : "";
					mc_country = true;
					// call update worker thread;
				}
			}
		}
		public int duration
		{
			get
			{
				return m_duration;
			}
			set
			{
				if(m_duration != value)
				{
					m_duration = value != null ? value : 0;
					mc_duration = true;
					// call update worker thread;
				}
			}
		}
		public DateTime start_date
		{
			get
			{
				return m_start_date;
			}
			set
			{
				if(m_start_date != value)
				{
					m_start_date = value != null ? value : DateTime.MinValue;
					if(m_start_date.Year < 1800) value = DateTime.MinValue;
					mc_start_date = true;
					// call update worker thread;
				}
			}
		}
		public int price_min
		{
			get
			{
				return m_price_min;
			}
			set
			{
				if(m_price_min != value)
				{
					m_price_min = value != null ? value : 0;
					mc_price_min = true;
					// call update worker thread;
				}
			}
		}
		public int price_max
		{
			get
			{
				return m_price_max;
			}
			set
			{
				if(m_price_max != value)
				{
					m_price_max = value != null ? value : 0;
					mc_price_max = true;
					// call update worker thread;
				}
			}
		}
		public string site
		{
			get
			{
				return m_site;
			}
			set
			{
				if(m_site != value)
				{
					m_site = value != null ? value : "";
					mc_site = true;
					// call update worker thread;
				}
			}
		}
		public string google_link
		{
			get
			{
				return m_google_link;
			}
			set
			{
				if(m_google_link != value)
				{
					m_google_link = value != null ? value : "";
					mc_google_link = true;
					// call update worker thread;
				}
			}
		}
		public string facebook_link
		{
			get
			{
				return m_facebook_link;
			}
			set
			{
				if(m_facebook_link != value)
				{
					m_facebook_link = value != null ? value : "";
					mc_facebook_link = true;
					// call update worker thread;
				}
			}
		}
		public string twitter_link
		{
			get
			{
				return m_twitter_link;
			}
			set
			{
				if(m_twitter_link != value)
				{
					m_twitter_link = value != null ? value : "";
					mc_twitter_link = true;
					// call update worker thread;
				}
			}
		}
		public string vk_link
		{
			get
			{
				return m_vk_link;
			}
			set
			{
				if(m_vk_link != value)
				{
					m_vk_link = value != null ? value : "";
					mc_vk_link = true;
					// call update worker thread;
				}
			}
		}
		public string mail_link
		{
			get
			{
				return m_mail_link;
			}
			set
			{
				if(m_mail_link != value)
				{
					m_mail_link = value != null ? value : "";
					mc_mail_link = true;
					// call update worker thread;
				}
			}
		}
		public string odnoklassniki_link
		{
			get
			{
				return m_odnoklassniki_link;
			}
			set
			{
				if(m_odnoklassniki_link != value)
				{
					m_odnoklassniki_link = value != null ? value : "";
					mc_odnoklassniki_link = true;
					// call update worker thread;
				}
			}
		}
		public string coordinates
		{
			get
			{
				return m_coordinates;
			}
			set
			{
				if(m_coordinates != value)
				{
					m_coordinates = value != null ? value : "";
					mc_coordinates = true;
					// call update worker thread;
				}
			}
		}
		public string map_title
		{
			get
			{
				return m_map_title;
			}
			set
			{
				if(m_map_title != value)
				{
					m_map_title = value != null ? value : "";
					mc_map_title = true;
					// call update worker thread;
				}
			}
		}
		public string map_description
		{
			get
			{
				return m_map_description;
			}
			set
			{
				if(m_map_description != value)
				{
					m_map_description = value != null ? value : "";
					mc_map_description = true;
					// call update worker thread;
				}
			}
		}
		public string image_for_main
		{
			get
			{
				return m_image_for_main;
			}
			set
			{
				if(m_image_for_main != value)
				{
					m_image_for_main = value != null ? value : "";
					mc_image_for_main = true;
					// call update worker thread;
				}
			}
		}
		private List<actions_places> ap_actions
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<actions_places> ActionPlace
		{
			get { return ap_actions; }
		}
		public IEnumerable<actions_places> GetActionPlace()
		{
			return ap_actions;
		}
		public actions_places AddActionPlace(actions_places _item, bool _insertToStore = false)
		{
			if(ap_actions.IndexOf(_item) != -1) return _item;
			ap_actions.Add(_item);
			_item.action_id = id;
			if(_insertToStore && !Meridian.Default.actions_placesStore.Exists(_item.id))
			{
				Meridian.Default.actions_placesStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public actions_places RemoveActionPlace(actions_places _item, bool _complete = false)
		{
			ap_actions.Remove(_item);
			if(_complete) Meridian.Default.actions_placesStore.Delete(_item);
			return _item;
		}
		private List<actions_comments> c_actions
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<actions_comments> ActionComment
		{
			get { return c_actions; }
		}
		public IEnumerable<actions_comments> GetActionComment()
		{
			return c_actions;
		}
		public actions_comments AddActionComment(actions_comments _item, bool _insertToStore = false)
		{
			if(c_actions.IndexOf(_item) != -1) return _item;
			c_actions.Add(_item);
			_item.action_id = id;
			if(_insertToStore && !Meridian.Default.actions_commentsStore.Exists(_item.id))
			{
				Meridian.Default.actions_commentsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public actions_comments RemoveActionComment(actions_comments _item, bool _complete = false)
		{
			c_actions.Remove(_item);
			if(_complete) Meridian.Default.actions_commentsStore.Delete(_item);
			return _item;
		}
		private List<actions_genres> g_actions
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<actions_genres> ActionGenre
		{
			get { return g_actions; }
		}
		public IEnumerable<actions_genres> GetActionGenre()
		{
			return g_actions;
		}
		public actions_genres AddActionGenre(actions_genres _item, bool _insertToStore = false)
		{
			if(g_actions.IndexOf(_item) != -1) return _item;
			g_actions.Add(_item);
			_item.action_id = id;
			if(_insertToStore && !Meridian.Default.actions_genresStore.Exists(_item.id))
			{
				Meridian.Default.actions_genresStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public actions_genres RemoveActionGenre(actions_genres _item, bool _complete = false)
		{
			g_actions.Remove(_item);
			if(_complete) Meridian.Default.actions_genresStore.Delete(_item);
			return _item;
		}
		private List<actions_photos> aphoto_actions
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<actions_photos> Photos
		{
			get { return aphoto_actions; }
		}
		public IEnumerable<actions_photos> GetPhotos()
		{
			return aphoto_actions;
		}
		public actions_photos AddPhotos(actions_photos _item, bool _insertToStore = false)
		{
			if(aphoto_actions.IndexOf(_item) != -1) return _item;
			aphoto_actions.Add(_item);
			_item.action_id = id;
			if(_insertToStore && !Meridian.Default.actions_photosStore.Exists(_item.id))
			{
				Meridian.Default.actions_photosStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public actions_photos RemovePhotos(actions_photos _item, bool _complete = false)
		{
			aphoto_actions.Remove(_item);
			if(_complete) Meridian.Default.actions_photosStore.Delete(_item);
			return _item;
		}
		private action_categories ca_actions_action_categories
		{
			get; set; 
		}
		public action_categories GetActionCategoryAction_categorie()
		{
			return ca_actions_action_categories ;
		}
	}
}
