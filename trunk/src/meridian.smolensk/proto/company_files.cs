/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.smolensk;
using meridian.smolensk.system;

namespace meridian.smolensk.proto
{
	[MetadataType(typeof(company_files_meta))]	public partial class company_files : admin.db.IDatabaseEntity
	{
		public company_files()
		{
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private string m_file = "";
		internal bool mc_file { get; private set; }
		private long m_size = 0;
		internal bool mc_size { get; private set; }
		private string m_title = "";
		internal bool mc_title { get; private set; }
		private long m_company_id = 0;
		internal bool mc_company_id { get; private set; }
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_file = _reader["file"].GetType() != typeof(System.DBNull) ? _reader.GetString("file") : "";
			mc_file = false;
			m_size = _reader["size"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("size") : 0;
			mc_size = false;
			m_title = _reader["title"].GetType() != typeof(System.DBNull) ? _reader.GetString("title") : "";
			mc_title = false;
			m_company_id = _reader["company_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("company_id") : 0;
			mc_company_id = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
			if((company_id > 0) && (_meridian.companiesStore.Exists(company_id)))
			{
				this.co_files_companies = _meridian.companiesStore.Get(company_id);;
				this.co_files_companies.AddFiles(this);
			}
		}
		public void DeleteAggregations()
		{
			if(this.co_files_companies != null)
			{
				this.co_files_companies.RemoveFiles(this);
			}
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public void SaveCompositions(Meridian _meridian)
		{
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public string ProtoName
		{
			get { return "company_files"; }
		}
		/* metafile template 
		internal class company_files_meta
		{
			public long id { get; set; }
			public string file { get; set; }
			public long size { get; set; }
			public string title { get; set; }
			public long company_id { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public string file
		{
			get
			{
				return m_file;
			}
			set
			{
				if(m_file != value)
				{
					m_file = value != null ? value : "";
					mc_file = true;
					// call update worker thread;
				}
			}
		}
		public long size
		{
			get
			{
				return m_size;
			}
			set
			{
				if(m_size != value)
				{
					m_size = value != null ? value : 0;
					mc_size = true;
					// call update worker thread;
				}
			}
		}
		public string title
		{
			get
			{
				return m_title;
			}
			set
			{
				if(m_title != value)
				{
					m_title = value != null ? value : "";
					mc_title = true;
					// call update worker thread;
				}
			}
		}
		public long company_id
		{
			get
			{
				return m_company_id;
			}
			set
			{
				if(m_company_id != value)
				{
					m_company_id = value != null ? value : 0;
					mc_company_id = true;
					// call update worker thread;
				}
			}
		}
		private companies co_files_companies
		{
			get; set; 
		}
		public companies GetFilesCompanie()
		{
			return co_files_companies ;
		}
	}
}
