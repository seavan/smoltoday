/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.smolensk;
using meridian.smolensk.system;

namespace meridian.smolensk.proto
{
	[MetadataType(typeof(resume_works_meta))]	public partial class resume_works : admin.db.IDatabaseEntity
	{
		public resume_works()
		{
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private DateTime m_begin_date = DateTime.MinValue;
		internal bool mc_begin_date { get; private set; }
		private DateTime m_end_date = DateTime.MinValue;
		internal bool mc_end_date { get; private set; }
		private string m_post = "";
		internal bool mc_post { get; private set; }
		private int m_work_time_id = 0;
		internal bool mc_work_time_id { get; private set; }
		private string m_company_name = "";
		internal bool mc_company_name { get; private set; }
		private string m_success_description = "";
		internal bool mc_success_description { get; private set; }
		private long m_resume_id = 0;
		internal bool mc_resume_id { get; private set; }
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_begin_date = _reader["begin_date"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("begin_date") : DateTime.MinValue;
			mc_begin_date = false;
			m_end_date = _reader["end_date"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("end_date") : DateTime.MinValue;
			mc_end_date = false;
			m_post = _reader["post"].GetType() != typeof(System.DBNull) ? _reader.GetString("post") : "";
			mc_post = false;
			m_work_time_id = _reader["work_time_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("work_time_id") : 0;
			mc_work_time_id = false;
			m_company_name = _reader["company_name"].GetType() != typeof(System.DBNull) ? _reader.GetString("company_name") : "";
			mc_company_name = false;
			m_success_description = _reader["success_description"].GetType() != typeof(System.DBNull) ? _reader.GetString("success_description") : "";
			mc_success_description = false;
			m_resume_id = _reader["resume_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("resume_id") : 0;
			mc_resume_id = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
			if((resume_id > 0) && (_meridian.resumesStore.Exists(resume_id)))
			{
				this.re_works_resumes = _meridian.resumesStore.Get(resume_id);;
				this.re_works_resumes.AddWorks(this);
			}
		}
		public void DeleteAggregations()
		{
			if(this.re_works_resumes != null)
			{
				this.re_works_resumes.RemoveWorks(this);
			}
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public void SaveCompositions(Meridian _meridian)
		{
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public string ProtoName
		{
			get { return "resume_works"; }
		}
		/* metafile template 
		internal class resume_works_meta
		{
			public long id { get; set; }
			public DateTime begin_date { get; set; }
			public DateTime end_date { get; set; }
			public string post { get; set; }
			public int work_time_id { get; set; }
			public string company_name { get; set; }
			public string success_description { get; set; }
			public long resume_id { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public DateTime begin_date
		{
			get
			{
				return m_begin_date;
			}
			set
			{
				if(m_begin_date != value)
				{
					m_begin_date = value != null ? value : DateTime.MinValue;
					if(m_begin_date.Year < 1800) value = DateTime.MinValue;
					mc_begin_date = true;
					// call update worker thread;
				}
			}
		}
		public DateTime end_date
		{
			get
			{
				return m_end_date;
			}
			set
			{
				if(m_end_date != value)
				{
					m_end_date = value != null ? value : DateTime.MinValue;
					if(m_end_date.Year < 1800) value = DateTime.MinValue;
					mc_end_date = true;
					// call update worker thread;
				}
			}
		}
		public string post
		{
			get
			{
				return m_post;
			}
			set
			{
				if(m_post != value)
				{
					m_post = value != null ? value : "";
					mc_post = true;
					// call update worker thread;
				}
			}
		}
		public int work_time_id
		{
			get
			{
				return m_work_time_id;
			}
			set
			{
				if(m_work_time_id != value)
				{
					m_work_time_id = value != null ? value : 0;
					mc_work_time_id = true;
					// call update worker thread;
				}
			}
		}
		public string company_name
		{
			get
			{
				return m_company_name;
			}
			set
			{
				if(m_company_name != value)
				{
					m_company_name = value != null ? value : "";
					mc_company_name = true;
					// call update worker thread;
				}
			}
		}
		public string success_description
		{
			get
			{
				return m_success_description;
			}
			set
			{
				if(m_success_description != value)
				{
					m_success_description = value != null ? value : "";
					mc_success_description = true;
					// call update worker thread;
				}
			}
		}
		public long resume_id
		{
			get
			{
				return m_resume_id;
			}
			set
			{
				if(m_resume_id != value)
				{
					m_resume_id = value != null ? value : 0;
					mc_resume_id = true;
					// call update worker thread;
				}
			}
		}
		private resumes re_works_resumes
		{
			get; set; 
		}
		public resumes GetWorksResume()
		{
			return re_works_resumes ;
		}
	}
}
