/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.smolensk;
using meridian.smolensk.system;

namespace meridian.smolensk.proto
{
	[MetadataType(typeof(companies_meta))]	public partial class companies : admin.db.IDatabaseEntity
	{
		public companies()
		{
			co_comments = new List<company_comments>();
			co_kinds = new List<companies_kind_activities>();
			co_files = new List<company_files>();
			co_photos = new List<company_photos>();
			co_rating = new List<company_rating>();
			va_companies = new List<vacancies>();
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private string m_title = "";
		internal bool mc_title { get; private set; }
		private string m_work_time = "";
		internal bool mc_work_time { get; private set; }
		private string m_address = "";
		internal bool mc_address { get; private set; }
		private string m_www = "";
		internal bool mc_www { get; private set; }
		private string m_email = "";
		internal bool mc_email { get; private set; }
		private string m_phones = "";
		internal bool mc_phones { get; private set; }
		private string m_leader = "";
		internal bool mc_leader { get; private set; }
		private string m_description = "";
		internal bool mc_description { get; private set; }
		private DateTime m_publish_date = DateTime.MinValue;
		internal bool mc_publish_date { get; private set; }
		private long m_category_id = 0;
		internal bool mc_category_id { get; private set; }
		private long m_paid_order = 0;
		internal bool mc_paid_order { get; private set; }
		private long m_stable_order = 0;
		internal bool mc_stable_order { get; private set; }
		private long m_views_count = 0;
		internal bool mc_views_count { get; private set; }
		private string m_coordinates = "";
		internal bool mc_coordinates { get; private set; }
		private string m_map_title = "";
		internal bool mc_map_title { get; private set; }
		private string m_map_description = "";
		internal bool mc_map_description { get; private set; }
		private long m_ownership_id = 0;
		internal bool mc_ownership_id { get; private set; }
		public ILookupValueAspect GetLookupValueAspect(string _fieldName)
		{
			switch (_fieldName)
			{
				case "category_id": return Getcategory_idLookupValueAspect(); break;
				case "ownership_id": return Getownership_idLookupValueAspect(); break;
				default: throw new SystemException("Aspect LookupValue not found in companies");
			}
		}
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_title = _reader["title"].GetType() != typeof(System.DBNull) ? _reader.GetString("title") : "";
			mc_title = false;
			m_work_time = _reader["work_time"].GetType() != typeof(System.DBNull) ? _reader.GetString("work_time") : "";
			mc_work_time = false;
			m_address = _reader["address"].GetType() != typeof(System.DBNull) ? _reader.GetString("address") : "";
			mc_address = false;
			m_www = _reader["www"].GetType() != typeof(System.DBNull) ? _reader.GetString("www") : "";
			mc_www = false;
			m_email = _reader["email"].GetType() != typeof(System.DBNull) ? _reader.GetString("email") : "";
			mc_email = false;
			m_phones = _reader["phones"].GetType() != typeof(System.DBNull) ? _reader.GetString("phones") : "";
			mc_phones = false;
			m_leader = _reader["leader"].GetType() != typeof(System.DBNull) ? _reader.GetString("leader") : "";
			mc_leader = false;
			m_description = _reader["description"].GetType() != typeof(System.DBNull) ? _reader.GetString("description") : "";
			mc_description = false;
			m_publish_date = _reader["publish_date"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("publish_date") : DateTime.MinValue;
			mc_publish_date = false;
			m_category_id = _reader["category_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("category_id") : 0;
			mc_category_id = false;
			m_paid_order = _reader["paid_order"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("paid_order") : 0;
			mc_paid_order = false;
			m_stable_order = _reader["stable_order"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("stable_order") : 0;
			mc_stable_order = false;
			m_views_count = _reader["views_count"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("views_count") : 0;
			mc_views_count = false;
			m_coordinates = _reader["coordinates"].GetType() != typeof(System.DBNull) ? _reader.GetString("coordinates") : "";
			mc_coordinates = false;
			m_map_title = _reader["map_title"].GetType() != typeof(System.DBNull) ? _reader.GetString("map_title") : "";
			mc_map_title = false;
			m_map_description = _reader["map_description"].GetType() != typeof(System.DBNull) ? _reader.GetString("map_description") : "";
			mc_map_description = false;
			m_ownership_id = _reader["ownership_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("ownership_id") : 0;
			mc_ownership_id = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
			if((category_id > 0) && (_meridian.company_categoriesStore.Exists(category_id)))
			{
				this.ca_companies_company_categories = _meridian.company_categoriesStore.Get(category_id);;
				this.ca_companies_company_categories.AddCompanies(this);
			}
			if((ownership_id > 0) && (_meridian.company_ownershipsStore.Exists(ownership_id)))
			{
				this.ow_companies_company_ownerships = _meridian.company_ownershipsStore.Get(ownership_id);;
				this.ow_companies_company_ownerships.AddCompanies(this);
			}
		}
		public void DeleteAggregations()
		{
			if(this.ca_companies_company_categories != null)
			{
				this.ca_companies_company_categories.RemoveCompanies(this);
			}
			if(this.ow_companies_company_ownerships != null)
			{
				this.ow_companies_company_ownerships.RemoveCompanies(this);
			}
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public void SaveCompositions(Meridian _meridian)
		{
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public string ProtoName
		{
			get { return "companies"; }
		}
		/* metafile template 
		internal class companies_meta
		{
			public long id { get; set; }
			public string title { get; set; }
			public string work_time { get; set; }
			public string address { get; set; }
			public string www { get; set; }
			public string email { get; set; }
			public string phones { get; set; }
			public string leader { get; set; }
			public string description { get; set; }
			public DateTime publish_date { get; set; }
			public long category_id { get; set; }
			public long paid_order { get; set; }
			public long stable_order { get; set; }
			public long views_count { get; set; }
			public string coordinates { get; set; }
			public string map_title { get; set; }
			public string map_description { get; set; }
			public long ownership_id { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public string title
		{
			get
			{
				return m_title;
			}
			set
			{
				if(m_title != value)
				{
					m_title = value != null ? value : "";
					mc_title = true;
					// call update worker thread;
				}
			}
		}
		public string work_time
		{
			get
			{
				return m_work_time;
			}
			set
			{
				if(m_work_time != value)
				{
					m_work_time = value != null ? value : "";
					mc_work_time = true;
					// call update worker thread;
				}
			}
		}
		public string address
		{
			get
			{
				return m_address;
			}
			set
			{
				if(m_address != value)
				{
					m_address = value != null ? value : "";
					mc_address = true;
					// call update worker thread;
				}
			}
		}
		public string www
		{
			get
			{
				return m_www;
			}
			set
			{
				if(m_www != value)
				{
					m_www = value != null ? value : "";
					mc_www = true;
					// call update worker thread;
				}
			}
		}
		public string email
		{
			get
			{
				return m_email;
			}
			set
			{
				if(m_email != value)
				{
					m_email = value != null ? value : "";
					mc_email = true;
					// call update worker thread;
				}
			}
		}
		public string phones
		{
			get
			{
				return m_phones;
			}
			set
			{
				if(m_phones != value)
				{
					m_phones = value != null ? value : "";
					mc_phones = true;
					// call update worker thread;
				}
			}
		}
		public string leader
		{
			get
			{
				return m_leader;
			}
			set
			{
				if(m_leader != value)
				{
					m_leader = value != null ? value : "";
					mc_leader = true;
					// call update worker thread;
				}
			}
		}
		public string description
		{
			get
			{
				return m_description;
			}
			set
			{
				if(m_description != value)
				{
					m_description = value != null ? value : "";
					mc_description = true;
					// call update worker thread;
				}
			}
		}
		public DateTime publish_date
		{
			get
			{
				return m_publish_date;
			}
			set
			{
				if(m_publish_date != value)
				{
					m_publish_date = value != null ? value : DateTime.MinValue;
					if(m_publish_date.Year < 1800) value = DateTime.MinValue;
					mc_publish_date = true;
					// call update worker thread;
				}
			}
		}
		public long category_id
		{
			get
			{
				return m_category_id;
			}
			set
			{
				if(m_category_id != value)
				{
					m_category_id = value != null ? value : 0;
					mc_category_id = true;
					// call update worker thread;
				}
			}
		}
		public long paid_order
		{
			get
			{
				return m_paid_order;
			}
			set
			{
				if(m_paid_order != value)
				{
					m_paid_order = value != null ? value : 0;
					mc_paid_order = true;
					// call update worker thread;
				}
			}
		}
		public long stable_order
		{
			get
			{
				return m_stable_order;
			}
			set
			{
				if(m_stable_order != value)
				{
					m_stable_order = value != null ? value : 0;
					mc_stable_order = true;
					// call update worker thread;
				}
			}
		}
		public long views_count
		{
			get
			{
				return m_views_count;
			}
			set
			{
				if(m_views_count != value)
				{
					m_views_count = value != null ? value : 0;
					mc_views_count = true;
					// call update worker thread;
				}
			}
		}
		public string coordinates
		{
			get
			{
				return m_coordinates;
			}
			set
			{
				if(m_coordinates != value)
				{
					m_coordinates = value != null ? value : "";
					mc_coordinates = true;
					// call update worker thread;
				}
			}
		}
		public string map_title
		{
			get
			{
				return m_map_title;
			}
			set
			{
				if(m_map_title != value)
				{
					m_map_title = value != null ? value : "";
					mc_map_title = true;
					// call update worker thread;
				}
			}
		}
		public string map_description
		{
			get
			{
				return m_map_description;
			}
			set
			{
				if(m_map_description != value)
				{
					m_map_description = value != null ? value : "";
					mc_map_description = true;
					// call update worker thread;
				}
			}
		}
		public long ownership_id
		{
			get
			{
				return m_ownership_id;
			}
			set
			{
				if(m_ownership_id != value)
				{
					m_ownership_id = value != null ? value : 0;
					mc_ownership_id = true;
					// call update worker thread;
				}
			}
		}
		private List<company_comments> co_comments
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<company_comments> RootComments
		{
			get { return co_comments; }
		}
		public IEnumerable<company_comments> GetRootComments()
		{
			return co_comments;
		}
		public company_comments AddRootComments(company_comments _item, bool _insertToStore = false)
		{
			if(co_comments.IndexOf(_item) != -1) return _item;
			co_comments.Add(_item);
			_item.company_id = id;
			if(_insertToStore && !Meridian.Default.company_commentsStore.Exists(_item.id))
			{
				Meridian.Default.company_commentsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public company_comments RemoveRootComments(company_comments _item, bool _complete = false)
		{
			co_comments.Remove(_item);
			if(_complete) Meridian.Default.company_commentsStore.Delete(_item);
			return _item;
		}
		private List<companies_kind_activities> co_kinds
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<companies_kind_activities> Kinds
		{
			get { return co_kinds; }
		}
		public IEnumerable<companies_kind_activities> GetKinds()
		{
			return co_kinds;
		}
		public companies_kind_activities AddKinds(companies_kind_activities _item, bool _insertToStore = false)
		{
			if(co_kinds.IndexOf(_item) != -1) return _item;
			co_kinds.Add(_item);
			_item.company_id = id;
			if(_insertToStore && !Meridian.Default.companies_kind_activitiesStore.Exists(_item.id))
			{
				Meridian.Default.companies_kind_activitiesStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public companies_kind_activities RemoveKinds(companies_kind_activities _item, bool _complete = false)
		{
			co_kinds.Remove(_item);
			if(_complete) Meridian.Default.companies_kind_activitiesStore.Delete(_item);
			return _item;
		}
		private List<company_files> co_files
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<company_files> Files
		{
			get { return co_files; }
		}
		public IEnumerable<company_files> GetFiles()
		{
			return co_files;
		}
		public company_files AddFiles(company_files _item, bool _insertToStore = false)
		{
			if(co_files.IndexOf(_item) != -1) return _item;
			co_files.Add(_item);
			_item.company_id = id;
			if(_insertToStore && !Meridian.Default.company_filesStore.Exists(_item.id))
			{
				Meridian.Default.company_filesStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public company_files RemoveFiles(company_files _item, bool _complete = false)
		{
			co_files.Remove(_item);
			if(_complete) Meridian.Default.company_filesStore.Delete(_item);
			return _item;
		}
		private List<company_photos> co_photos
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<company_photos> Photos
		{
			get { return co_photos; }
		}
		public IEnumerable<company_photos> GetPhotos()
		{
			return co_photos;
		}
		public company_photos AddPhotos(company_photos _item, bool _insertToStore = false)
		{
			if(co_photos.IndexOf(_item) != -1) return _item;
			co_photos.Add(_item);
			_item.company_id = id;
			if(_insertToStore && !Meridian.Default.company_photosStore.Exists(_item.id))
			{
				Meridian.Default.company_photosStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public company_photos RemovePhotos(company_photos _item, bool _complete = false)
		{
			co_photos.Remove(_item);
			if(_complete) Meridian.Default.company_photosStore.Delete(_item);
			return _item;
		}
		private List<company_rating> co_rating
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<company_rating> Ratings
		{
			get { return co_rating; }
		}
		public IEnumerable<company_rating> GetRatings()
		{
			return co_rating;
		}
		public company_rating AddRatings(company_rating _item, bool _insertToStore = false)
		{
			if(co_rating.IndexOf(_item) != -1) return _item;
			co_rating.Add(_item);
			_item.company_id = id;
			if(_insertToStore && !Meridian.Default.company_ratingStore.Exists(_item.id))
			{
				Meridian.Default.company_ratingStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public company_rating RemoveRatings(company_rating _item, bool _complete = false)
		{
			co_rating.Remove(_item);
			if(_complete) Meridian.Default.company_ratingStore.Delete(_item);
			return _item;
		}
		private List<vacancies> va_companies
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<vacancies> Vacancies
		{
			get { return va_companies; }
		}
		public IEnumerable<vacancies> GetVacancies()
		{
			return va_companies;
		}
		public vacancies AddVacancies(vacancies _item, bool _insertToStore = false)
		{
			if(va_companies.IndexOf(_item) != -1) return _item;
			va_companies.Add(_item);
			_item.company_id = id;
			if(_insertToStore && !Meridian.Default.vacanciesStore.Exists(_item.id))
			{
				Meridian.Default.vacanciesStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public vacancies RemoveVacancies(vacancies _item, bool _complete = false)
		{
			va_companies.Remove(_item);
			if(_complete) Meridian.Default.vacanciesStore.Delete(_item);
			return _item;
		}
		private company_categories ca_companies_company_categories
		{
			get; set; 
		}
		public company_categories GetCompaniesCompany_categorie()
		{
			return ca_companies_company_categories ;
		}
		private company_ownerships ow_companies_company_ownerships
		{
			get; set; 
		}
		public company_ownerships GetCompaniesCompany_ownership()
		{
			return ow_companies_company_ownerships ;
		}
	}
}
