/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.smolensk;
using meridian.smolensk.system;

namespace meridian.smolensk.proto
{
	[MetadataType(typeof(restaurants_meta))]	public partial class restaurants : admin.db.IDatabaseEntity
	{
		public restaurants()
		{
			r_comments = new List<restaurant_comments>();
			pr_photos = new List<restaurant_photos>();
			rre_entries = new List<restaurants_entries>();
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private string m_title = "";
		internal bool mc_title { get; private set; }
		private string m_description = "";
		internal bool mc_description { get; private set; }
		private string m_phone = "";
		internal bool mc_phone { get; private set; }
		private string m_address = "";
		internal bool mc_address { get; private set; }
		private string m_holes_count = "";
		internal bool mc_holes_count { get; private set; }
		private string m_work_time = "";
		internal bool mc_work_time { get; private set; }
		private bool m_vip = false;
		internal bool mc_vip { get; private set; }
		private string m_feedback_email = "";
		internal bool mc_feedback_email { get; private set; }
		private string m_coordinates = "";
		internal bool mc_coordinates { get; private set; }
		private string m_map_title = "";
		internal bool mc_map_title { get; private set; }
		private string m_map_description = "";
		internal bool mc_map_description { get; private set; }
		private bool m_can_book_table = false;
		internal bool mc_can_book_table { get; private set; }
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_title = _reader["title"].GetType() != typeof(System.DBNull) ? _reader.GetString("title") : "";
			mc_title = false;
			m_description = _reader["description"].GetType() != typeof(System.DBNull) ? _reader.GetString("description") : "";
			mc_description = false;
			m_phone = _reader["phone"].GetType() != typeof(System.DBNull) ? _reader.GetString("phone") : "";
			mc_phone = false;
			m_address = _reader["address"].GetType() != typeof(System.DBNull) ? _reader.GetString("address") : "";
			mc_address = false;
			m_holes_count = _reader["holes_count"].GetType() != typeof(System.DBNull) ? _reader.GetString("holes_count") : "";
			mc_holes_count = false;
			m_work_time = _reader["work_time"].GetType() != typeof(System.DBNull) ? _reader.GetString("work_time") : "";
			mc_work_time = false;
			m_vip = _reader["vip"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("vip") : false;
			mc_vip = false;
			m_feedback_email = _reader["feedback_email"].GetType() != typeof(System.DBNull) ? _reader.GetString("feedback_email") : "";
			mc_feedback_email = false;
			m_coordinates = _reader["coordinates"].GetType() != typeof(System.DBNull) ? _reader.GetString("coordinates") : "";
			mc_coordinates = false;
			m_map_title = _reader["map_title"].GetType() != typeof(System.DBNull) ? _reader.GetString("map_title") : "";
			mc_map_title = false;
			m_map_description = _reader["map_description"].GetType() != typeof(System.DBNull) ? _reader.GetString("map_description") : "";
			mc_map_description = false;
			m_can_book_table = _reader["can_book_table"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("can_book_table") : false;
			mc_can_book_table = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
		}
		public void DeleteAggregations()
		{
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public void SaveCompositions(Meridian _meridian)
		{
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public string ProtoName
		{
			get { return "restaurants"; }
		}
		/* metafile template 
		internal class restaurants_meta
		{
			public long id { get; set; }
			public string title { get; set; }
			public string description { get; set; }
			public string phone { get; set; }
			public string address { get; set; }
			public string holes_count { get; set; }
			public string work_time { get; set; }
			public bool vip { get; set; }
			public string feedback_email { get; set; }
			public string coordinates { get; set; }
			public string map_title { get; set; }
			public string map_description { get; set; }
			public bool can_book_table { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public string title
		{
			get
			{
				return m_title;
			}
			set
			{
				if(m_title != value)
				{
					m_title = value != null ? value : "";
					mc_title = true;
					// call update worker thread;
				}
			}
		}
		public string description
		{
			get
			{
				return m_description;
			}
			set
			{
				if(m_description != value)
				{
					m_description = value != null ? value : "";
					mc_description = true;
					// call update worker thread;
				}
			}
		}
		public string phone
		{
			get
			{
				return m_phone;
			}
			set
			{
				if(m_phone != value)
				{
					m_phone = value != null ? value : "";
					mc_phone = true;
					// call update worker thread;
				}
			}
		}
		public string address
		{
			get
			{
				return m_address;
			}
			set
			{
				if(m_address != value)
				{
					m_address = value != null ? value : "";
					mc_address = true;
					// call update worker thread;
				}
			}
		}
		public string holes_count
		{
			get
			{
				return m_holes_count;
			}
			set
			{
				if(m_holes_count != value)
				{
					m_holes_count = value != null ? value : "";
					mc_holes_count = true;
					// call update worker thread;
				}
			}
		}
		public string work_time
		{
			get
			{
				return m_work_time;
			}
			set
			{
				if(m_work_time != value)
				{
					m_work_time = value != null ? value : "";
					mc_work_time = true;
					// call update worker thread;
				}
			}
		}
		public bool vip
		{
			get
			{
				return m_vip;
			}
			set
			{
				if(m_vip != value)
				{
					m_vip = value != null ? value : false;
					mc_vip = true;
					// call update worker thread;
				}
			}
		}
		public string feedback_email
		{
			get
			{
				return m_feedback_email;
			}
			set
			{
				if(m_feedback_email != value)
				{
					m_feedback_email = value != null ? value : "";
					mc_feedback_email = true;
					// call update worker thread;
				}
			}
		}
		public string coordinates
		{
			get
			{
				return m_coordinates;
			}
			set
			{
				if(m_coordinates != value)
				{
					m_coordinates = value != null ? value : "";
					mc_coordinates = true;
					// call update worker thread;
				}
			}
		}
		public string map_title
		{
			get
			{
				return m_map_title;
			}
			set
			{
				if(m_map_title != value)
				{
					m_map_title = value != null ? value : "";
					mc_map_title = true;
					// call update worker thread;
				}
			}
		}
		public string map_description
		{
			get
			{
				return m_map_description;
			}
			set
			{
				if(m_map_description != value)
				{
					m_map_description = value != null ? value : "";
					mc_map_description = true;
					// call update worker thread;
				}
			}
		}
		public bool can_book_table
		{
			get
			{
				return m_can_book_table;
			}
			set
			{
				if(m_can_book_table != value)
				{
					m_can_book_table = value != null ? value : false;
					mc_can_book_table = true;
					// call update worker thread;
				}
			}
		}
		private List<restaurant_comments> r_comments
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<restaurant_comments> RestaurantsComments
		{
			get { return r_comments; }
		}
		public IEnumerable<restaurant_comments> GetRestaurantsComments()
		{
			return r_comments;
		}
		public restaurant_comments AddRestaurantsComments(restaurant_comments _item, bool _insertToStore = false)
		{
			if(r_comments.IndexOf(_item) != -1) return _item;
			r_comments.Add(_item);
			_item.restaurant_id = id;
			if(_insertToStore && !Meridian.Default.restaurant_commentsStore.Exists(_item.id))
			{
				Meridian.Default.restaurant_commentsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public restaurant_comments RemoveRestaurantsComments(restaurant_comments _item, bool _complete = false)
		{
			r_comments.Remove(_item);
			if(_complete) Meridian.Default.restaurant_commentsStore.Delete(_item);
			return _item;
		}
		private List<restaurant_photos> pr_photos
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<restaurant_photos> Photos
		{
			get { return pr_photos; }
		}
		public IEnumerable<restaurant_photos> GetPhotos()
		{
			return pr_photos;
		}
		public restaurant_photos AddPhotos(restaurant_photos _item, bool _insertToStore = false)
		{
			if(pr_photos.IndexOf(_item) != -1) return _item;
			pr_photos.Add(_item);
			_item.restaurtan_id = id;
			if(_insertToStore && !Meridian.Default.restaurant_photosStore.Exists(_item.id))
			{
				Meridian.Default.restaurant_photosStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public restaurant_photos RemovePhotos(restaurant_photos _item, bool _complete = false)
		{
			pr_photos.Remove(_item);
			if(_complete) Meridian.Default.restaurant_photosStore.Delete(_item);
			return _item;
		}
		private List<restaurants_entries> rre_entries
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<restaurants_entries> Entries
		{
			get { return rre_entries; }
		}
		public IEnumerable<restaurants_entries> GetEntries()
		{
			return rre_entries;
		}
		public restaurants_entries AddEntries(restaurants_entries _item, bool _insertToStore = false)
		{
			if(rre_entries.IndexOf(_item) != -1) return _item;
			rre_entries.Add(_item);
			_item.restaurant_id = id;
			if(_insertToStore && !Meridian.Default.restaurants_entriesStore.Exists(_item.id))
			{
				Meridian.Default.restaurants_entriesStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public restaurants_entries RemoveEntries(restaurants_entries _item, bool _complete = false)
		{
			rre_entries.Remove(_item);
			if(_complete) Meridian.Default.restaurants_entriesStore.Delete(_item);
			return _item;
		}
	}
}
