/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.smolensk;
using meridian.smolensk.system;

namespace meridian.smolensk.proto
{
	[MetadataType(typeof(actions_places_meta))]	public partial class actions_places : admin.db.IDatabaseEntity
	{
		public actions_places()
		{
			ap_schedule = new List<actions_schedule>();
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private long m_action_id = 0;
		internal bool mc_action_id { get; private set; }
		private long m_place_id = 0;
		internal bool mc_place_id { get; private set; }
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_action_id = _reader["action_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("action_id") : 0;
			mc_action_id = false;
			m_place_id = _reader["place_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("place_id") : 0;
			mc_place_id = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
			if((place_id > 0) && (_meridian.placesStore.Exists(place_id)))
			{
				this.actions_places_places = _meridian.placesStore.Get(place_id);;
				this.actions_places_places.AddActionPlace(this);
			}
			if((action_id > 0) && (_meridian.actionsStore.Exists(action_id)))
			{
				this.ap_actions_actions = _meridian.actionsStore.Get(action_id);;
				this.ap_actions_actions.AddActionPlace(this);
			}
		}
		public void DeleteAggregations()
		{
			if(this.actions_places_places != null)
			{
				this.actions_places_places.RemoveActionPlace(this);
			}
			if(this.ap_actions_actions != null)
			{
				this.ap_actions_actions.RemoveActionPlace(this);
			}
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public void SaveCompositions(Meridian _meridian)
		{
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public string ProtoName
		{
			get { return "actions_places"; }
		}
		/* metafile template 
		internal class actions_places_meta
		{
			public long id { get; set; }
			public long action_id { get; set; }
			public long place_id { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public long action_id
		{
			get
			{
				return m_action_id;
			}
			set
			{
				if(m_action_id != value)
				{
					m_action_id = value != null ? value : 0;
					mc_action_id = true;
					// call update worker thread;
				}
			}
		}
		public long place_id
		{
			get
			{
				return m_place_id;
			}
			set
			{
				if(m_place_id != value)
				{
					m_place_id = value != null ? value : 0;
					mc_place_id = true;
					// call update worker thread;
				}
			}
		}
		private List<actions_schedule> ap_schedule
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<actions_schedule> Schedule
		{
			get { return ap_schedule; }
		}
		public IEnumerable<actions_schedule> GetSchedule()
		{
			return ap_schedule;
		}
		public actions_schedule AddSchedule(actions_schedule _item, bool _insertToStore = false)
		{
			if(ap_schedule.IndexOf(_item) != -1) return _item;
			ap_schedule.Add(_item);
			_item.action_place_id = id;
			if(_insertToStore && !Meridian.Default.actions_scheduleStore.Exists(_item.id))
			{
				Meridian.Default.actions_scheduleStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public actions_schedule RemoveSchedule(actions_schedule _item, bool _complete = false)
		{
			ap_schedule.Remove(_item);
			if(_complete) Meridian.Default.actions_scheduleStore.Delete(_item);
			return _item;
		}
		private places actions_places_places
		{
			get; set; 
		}
		public places GetActionPlacePlace()
		{
			return actions_places_places ;
		}
		private actions ap_actions_actions
		{
			get; set; 
		}
		public actions GetActionPlaceAction()
		{
			return ap_actions_actions ;
		}
	}
}
