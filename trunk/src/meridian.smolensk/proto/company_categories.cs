/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.smolensk;
using meridian.smolensk.system;

namespace meridian.smolensk.proto
{
	[MetadataType(typeof(company_categories_meta))]	public partial class company_categories : admin.db.IDatabaseEntity
	{
		public company_categories()
		{
			ca_categories = new List<company_categories>();
			ca_companies = new List<companies>();
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private string m_name = "";
		internal bool mc_name { get; private set; }
		private string m_icon = "";
		internal bool mc_icon { get; private set; }
		private long m_parent = 0;
		internal bool mc_parent { get; private set; }
		public ILookupValueAspect GetLookupValueAspect(string _fieldName)
		{
			switch (_fieldName)
			{
				case "parent": return GetparentLookupValueAspect(); break;
				default: throw new SystemException("Aspect LookupValue not found in company_categories");
			}
		}
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_name = _reader["name"].GetType() != typeof(System.DBNull) ? _reader.GetString("name") : "";
			mc_name = false;
			m_icon = _reader["icon"].GetType() != typeof(System.DBNull) ? _reader.GetString("icon") : "";
			mc_icon = false;
			m_parent = _reader["parent"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("parent") : 0;
			mc_parent = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
			if((parent > 0) && (_meridian.company_categoriesStore.Exists(parent)))
			{
				this.ca_categories_company_categories = _meridian.company_categoriesStore.Get(parent);;
				this.ca_categories_company_categories.AddChildren(this);
			}
		}
		public void DeleteAggregations()
		{
			if(this.ca_categories_company_categories != null)
			{
				this.ca_categories_company_categories.RemoveChildren(this);
			}
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public void SaveCompositions(Meridian _meridian)
		{
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public string ProtoName
		{
			get { return "company_categories"; }
		}
		/* metafile template 
		internal class company_categories_meta
		{
			public long id { get; set; }
			public string name { get; set; }
			public string icon { get; set; }
			public long parent { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public string name
		{
			get
			{
				return m_name;
			}
			set
			{
				if(m_name != value)
				{
					m_name = value != null ? value : "";
					mc_name = true;
					// call update worker thread;
				}
			}
		}
		public string icon
		{
			get
			{
				return m_icon;
			}
			set
			{
				if(m_icon != value)
				{
					m_icon = value != null ? value : "";
					mc_icon = true;
					// call update worker thread;
				}
			}
		}
		public long parent
		{
			get
			{
				return m_parent;
			}
			set
			{
				if(m_parent != value)
				{
					m_parent = value != null ? value : 0;
					mc_parent = true;
					// call update worker thread;
				}
			}
		}
		private List<company_categories> ca_categories
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<company_categories> Children
		{
			get { return ca_categories; }
		}
		public IEnumerable<company_categories> GetChildren()
		{
			return ca_categories;
		}
		public company_categories AddChildren(company_categories _item, bool _insertToStore = false)
		{
			if(ca_categories.IndexOf(_item) != -1) return _item;
			ca_categories.Add(_item);
			_item.parent = id;
			if(_insertToStore && !Meridian.Default.company_categoriesStore.Exists(_item.id))
			{
				Meridian.Default.company_categoriesStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public company_categories RemoveChildren(company_categories _item, bool _complete = false)
		{
			ca_categories.Remove(_item);
			if(_complete) Meridian.Default.company_categoriesStore.Delete(_item);
			return _item;
		}
		private List<companies> ca_companies
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<companies> Companies
		{
			get { return ca_companies; }
		}
		public IEnumerable<companies> GetCompanies()
		{
			return ca_companies;
		}
		public companies AddCompanies(companies _item, bool _insertToStore = false)
		{
			if(ca_companies.IndexOf(_item) != -1) return _item;
			ca_companies.Add(_item);
			_item.category_id = id;
			if(_insertToStore && !Meridian.Default.companiesStore.Exists(_item.id))
			{
				Meridian.Default.companiesStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public companies RemoveCompanies(companies _item, bool _complete = false)
		{
			ca_companies.Remove(_item);
			if(_complete) Meridian.Default.companiesStore.Delete(_item);
			return _item;
		}
		private company_categories ca_categories_company_categories
		{
			get; set; 
		}
		public company_categories GetChildrenCompany_categorie()
		{
			return ca_categories_company_categories ;
		}
	}
}
