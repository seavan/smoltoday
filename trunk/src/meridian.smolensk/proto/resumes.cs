/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.smolensk;
using meridian.smolensk.system;

namespace meridian.smolensk.proto
{
	[MetadataType(typeof(resumes_meta))]	public partial class resumes : admin.db.IDatabaseEntity
	{
		public resumes()
		{
			re_professionals = new List<resumes_professionals>();
			resume_entries = new List<resumes_entries>();
			re_works = new List<resume_works>();
			re_educations = new List<resume_educations>();
			re_trainings = new List<resume_trainings>();
			re_links = new List<resume_links>();
			re_facilities = new List<resumes_facilities>();
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private string m_post = "";
		internal bool mc_post { get; private set; }
		private string m_first_name = "";
		internal bool mc_first_name { get; private set; }
		private string m_middle_name = "";
		internal bool mc_middle_name { get; private set; }
		private string m_last_name = "";
		internal bool mc_last_name { get; private set; }
		private DateTime m_birth_date = DateTime.MinValue;
		internal bool mc_birth_date { get; private set; }
		private int m_sex = 0;
		internal bool mc_sex { get; private set; }
		private int m_salary = 0;
		internal bool mc_salary { get; private set; }
		private string m_photo_url = "";
		internal bool mc_photo_url { get; private set; }
		private long m_region_id = 0;
		internal bool mc_region_id { get; private set; }
		private long m_city_id = 0;
		internal bool mc_city_id { get; private set; }
		private string m_languages = "";
		internal bool mc_languages { get; private set; }
		private int m_exp_years = 0;
		internal bool mc_exp_years { get; private set; }
		private int m_exp_months = 0;
		internal bool mc_exp_months { get; private set; }
		private int m_children = 0;
		internal bool mc_children { get; private set; }
		private string m_success_description = "";
		internal bool mc_success_description { get; private set; }
		private string m_about = "";
		internal bool mc_about { get; private set; }
		private string m_address = "";
		internal bool mc_address { get; private set; }
		private string m_phone = "";
		internal bool mc_phone { get; private set; }
		private string m_phone2 = "";
		internal bool mc_phone2 { get; private set; }
		private string m_email = "";
		internal bool mc_email { get; private set; }
		private DateTime m_created = DateTime.MinValue;
		internal bool mc_created { get; private set; }
		private DateTime m_edited = DateTime.MinValue;
		internal bool mc_edited { get; private set; }
		private long m_account_id = 0;
		internal bool mc_account_id { get; private set; }
		private bool m_is_publish = false;
		internal bool mc_is_publish { get; private set; }
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_post = _reader["post"].GetType() != typeof(System.DBNull) ? _reader.GetString("post") : "";
			mc_post = false;
			m_first_name = _reader["first_name"].GetType() != typeof(System.DBNull) ? _reader.GetString("first_name") : "";
			mc_first_name = false;
			m_middle_name = _reader["middle_name"].GetType() != typeof(System.DBNull) ? _reader.GetString("middle_name") : "";
			mc_middle_name = false;
			m_last_name = _reader["last_name"].GetType() != typeof(System.DBNull) ? _reader.GetString("last_name") : "";
			mc_last_name = false;
			m_birth_date = _reader["birth_date"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("birth_date") : DateTime.MinValue;
			mc_birth_date = false;
			m_sex = _reader["sex"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("sex") : 0;
			mc_sex = false;
			m_salary = _reader["salary"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("salary") : 0;
			mc_salary = false;
			m_photo_url = _reader["photo_url"].GetType() != typeof(System.DBNull) ? _reader.GetString("photo_url") : "";
			mc_photo_url = false;
			m_region_id = _reader["region_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("region_id") : 0;
			mc_region_id = false;
			m_city_id = _reader["city_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("city_id") : 0;
			mc_city_id = false;
			m_languages = _reader["languages"].GetType() != typeof(System.DBNull) ? _reader.GetString("languages") : "";
			mc_languages = false;
			m_exp_years = _reader["exp_years"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("exp_years") : 0;
			mc_exp_years = false;
			m_exp_months = _reader["exp_months"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("exp_months") : 0;
			mc_exp_months = false;
			m_children = _reader["children"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("children") : 0;
			mc_children = false;
			m_success_description = _reader["success_description"].GetType() != typeof(System.DBNull) ? _reader.GetString("success_description") : "";
			mc_success_description = false;
			m_about = _reader["about"].GetType() != typeof(System.DBNull) ? _reader.GetString("about") : "";
			mc_about = false;
			m_address = _reader["address"].GetType() != typeof(System.DBNull) ? _reader.GetString("address") : "";
			mc_address = false;
			m_phone = _reader["phone"].GetType() != typeof(System.DBNull) ? _reader.GetString("phone") : "";
			mc_phone = false;
			m_phone2 = _reader["phone2"].GetType() != typeof(System.DBNull) ? _reader.GetString("phone2") : "";
			mc_phone2 = false;
			m_email = _reader["email"].GetType() != typeof(System.DBNull) ? _reader.GetString("email") : "";
			mc_email = false;
			m_created = _reader["created"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("created") : DateTime.MinValue;
			mc_created = false;
			m_edited = _reader["edited"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("edited") : DateTime.MinValue;
			mc_edited = false;
			m_account_id = _reader["account_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("account_id") : 0;
			mc_account_id = false;
			m_is_publish = _reader["is_publish"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("is_publish") : false;
			mc_is_publish = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
			if((region_id > 0) && (_meridian.regionsStore.Exists(region_id)))
			{
				this.re_resumes_regions = _meridian.regionsStore.Get(region_id);;
				this.re_resumes_regions.AddResumes(this);
			}
			if((city_id > 0) && (_meridian.citiesStore.Exists(city_id)))
			{
				this.ci_resumes_cities = _meridian.citiesStore.Get(city_id);;
				this.ci_resumes_cities.AddResumes(this);
			}
			if((account_id > 0) && (_meridian.accountsStore.Exists(account_id)))
			{
				this.ac_resumes_accounts = _meridian.accountsStore.Get(account_id);;
				this.ac_resumes_accounts.AddResumes(this);
			}
		}
		public void DeleteAggregations()
		{
			if(this.re_resumes_regions != null)
			{
				this.re_resumes_regions.RemoveResumes(this);
			}
			if(this.ci_resumes_cities != null)
			{
				this.ci_resumes_cities.RemoveResumes(this);
			}
			if(this.ac_resumes_accounts != null)
			{
				this.ac_resumes_accounts.RemoveResumes(this);
			}
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public void SaveCompositions(Meridian _meridian)
		{
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public string ProtoName
		{
			get { return "resumes"; }
		}
		/* metafile template 
		internal class resumes_meta
		{
			public long id { get; set; }
			public string post { get; set; }
			public string first_name { get; set; }
			public string middle_name { get; set; }
			public string last_name { get; set; }
			public DateTime birth_date { get; set; }
			public int sex { get; set; }
			public int salary { get; set; }
			public string photo_url { get; set; }
			public long region_id { get; set; }
			public long city_id { get; set; }
			public string languages { get; set; }
			public int exp_years { get; set; }
			public int exp_months { get; set; }
			public int children { get; set; }
			public string success_description { get; set; }
			public string about { get; set; }
			public string address { get; set; }
			public string phone { get; set; }
			public string phone2 { get; set; }
			public string email { get; set; }
			public DateTime created { get; set; }
			public DateTime edited { get; set; }
			public long account_id { get; set; }
			public bool is_publish { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public string post
		{
			get
			{
				return m_post;
			}
			set
			{
				if(m_post != value)
				{
					m_post = value != null ? value : "";
					mc_post = true;
					// call update worker thread;
				}
			}
		}
		public string first_name
		{
			get
			{
				return m_first_name;
			}
			set
			{
				if(m_first_name != value)
				{
					m_first_name = value != null ? value : "";
					mc_first_name = true;
					// call update worker thread;
				}
			}
		}
		public string middle_name
		{
			get
			{
				return m_middle_name;
			}
			set
			{
				if(m_middle_name != value)
				{
					m_middle_name = value != null ? value : "";
					mc_middle_name = true;
					// call update worker thread;
				}
			}
		}
		public string last_name
		{
			get
			{
				return m_last_name;
			}
			set
			{
				if(m_last_name != value)
				{
					m_last_name = value != null ? value : "";
					mc_last_name = true;
					// call update worker thread;
				}
			}
		}
		public DateTime birth_date
		{
			get
			{
				return m_birth_date;
			}
			set
			{
				if(m_birth_date != value)
				{
					m_birth_date = value != null ? value : DateTime.MinValue;
					if(m_birth_date.Year < 1800) value = DateTime.MinValue;
					mc_birth_date = true;
					// call update worker thread;
				}
			}
		}
		public int sex
		{
			get
			{
				return m_sex;
			}
			set
			{
				if(m_sex != value)
				{
					m_sex = value != null ? value : 0;
					mc_sex = true;
					// call update worker thread;
				}
			}
		}
		public int salary
		{
			get
			{
				return m_salary;
			}
			set
			{
				if(m_salary != value)
				{
					m_salary = value != null ? value : 0;
					mc_salary = true;
					// call update worker thread;
				}
			}
		}
		public string photo_url
		{
			get
			{
				return m_photo_url;
			}
			set
			{
				if(m_photo_url != value)
				{
					m_photo_url = value != null ? value : "";
					mc_photo_url = true;
					// call update worker thread;
				}
			}
		}
		public long region_id
		{
			get
			{
				return m_region_id;
			}
			set
			{
				if(m_region_id != value)
				{
					m_region_id = value != null ? value : 0;
					mc_region_id = true;
					// call update worker thread;
				}
			}
		}
		public long city_id
		{
			get
			{
				return m_city_id;
			}
			set
			{
				if(m_city_id != value)
				{
					m_city_id = value != null ? value : 0;
					mc_city_id = true;
					// call update worker thread;
				}
			}
		}
		public string languages
		{
			get
			{
				return m_languages;
			}
			set
			{
				if(m_languages != value)
				{
					m_languages = value != null ? value : "";
					mc_languages = true;
					// call update worker thread;
				}
			}
		}
		public int exp_years
		{
			get
			{
				return m_exp_years;
			}
			set
			{
				if(m_exp_years != value)
				{
					m_exp_years = value != null ? value : 0;
					mc_exp_years = true;
					// call update worker thread;
				}
			}
		}
		public int exp_months
		{
			get
			{
				return m_exp_months;
			}
			set
			{
				if(m_exp_months != value)
				{
					m_exp_months = value != null ? value : 0;
					mc_exp_months = true;
					// call update worker thread;
				}
			}
		}
		public int children
		{
			get
			{
				return m_children;
			}
			set
			{
				if(m_children != value)
				{
					m_children = value != null ? value : 0;
					mc_children = true;
					// call update worker thread;
				}
			}
		}
		public string success_description
		{
			get
			{
				return m_success_description;
			}
			set
			{
				if(m_success_description != value)
				{
					m_success_description = value != null ? value : "";
					mc_success_description = true;
					// call update worker thread;
				}
			}
		}
		public string about
		{
			get
			{
				return m_about;
			}
			set
			{
				if(m_about != value)
				{
					m_about = value != null ? value : "";
					mc_about = true;
					// call update worker thread;
				}
			}
		}
		public string address
		{
			get
			{
				return m_address;
			}
			set
			{
				if(m_address != value)
				{
					m_address = value != null ? value : "";
					mc_address = true;
					// call update worker thread;
				}
			}
		}
		public string phone
		{
			get
			{
				return m_phone;
			}
			set
			{
				if(m_phone != value)
				{
					m_phone = value != null ? value : "";
					mc_phone = true;
					// call update worker thread;
				}
			}
		}
		public string phone2
		{
			get
			{
				return m_phone2;
			}
			set
			{
				if(m_phone2 != value)
				{
					m_phone2 = value != null ? value : "";
					mc_phone2 = true;
					// call update worker thread;
				}
			}
		}
		public string email
		{
			get
			{
				return m_email;
			}
			set
			{
				if(m_email != value)
				{
					m_email = value != null ? value : "";
					mc_email = true;
					// call update worker thread;
				}
			}
		}
		public DateTime created
		{
			get
			{
				return m_created;
			}
			set
			{
				if(m_created != value)
				{
					m_created = value != null ? value : DateTime.MinValue;
					if(m_created.Year < 1800) value = DateTime.MinValue;
					mc_created = true;
					// call update worker thread;
				}
			}
		}
		public DateTime edited
		{
			get
			{
				return m_edited;
			}
			set
			{
				if(m_edited != value)
				{
					m_edited = value != null ? value : DateTime.MinValue;
					if(m_edited.Year < 1800) value = DateTime.MinValue;
					mc_edited = true;
					// call update worker thread;
				}
			}
		}
		public long account_id
		{
			get
			{
				return m_account_id;
			}
			set
			{
				if(m_account_id != value)
				{
					m_account_id = value != null ? value : 0;
					mc_account_id = true;
					// call update worker thread;
				}
			}
		}
		public bool is_publish
		{
			get
			{
				return m_is_publish;
			}
			set
			{
				if(m_is_publish != value)
				{
					m_is_publish = value != null ? value : false;
					mc_is_publish = true;
					// call update worker thread;
				}
			}
		}
		private List<resumes_professionals> re_professionals
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<resumes_professionals> Profressionals
		{
			get { return re_professionals; }
		}
		public IEnumerable<resumes_professionals> GetProfressionals()
		{
			return re_professionals;
		}
		public resumes_professionals AddProfressionals(resumes_professionals _item, bool _insertToStore = false)
		{
			if(re_professionals.IndexOf(_item) != -1) return _item;
			re_professionals.Add(_item);
			_item.resume_id = id;
			if(_insertToStore && !Meridian.Default.resumes_professionalsStore.Exists(_item.id))
			{
				Meridian.Default.resumes_professionalsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public resumes_professionals RemoveProfressionals(resumes_professionals _item, bool _complete = false)
		{
			re_professionals.Remove(_item);
			if(_complete) Meridian.Default.resumes_professionalsStore.Delete(_item);
			return _item;
		}
		private List<resumes_entries> resume_entries
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<resumes_entries> Entries
		{
			get { return resume_entries; }
		}
		public IEnumerable<resumes_entries> GetEntries()
		{
			return resume_entries;
		}
		public resumes_entries AddEntries(resumes_entries _item, bool _insertToStore = false)
		{
			if(resume_entries.IndexOf(_item) != -1) return _item;
			resume_entries.Add(_item);
			_item.resume_id = id;
			if(_insertToStore && !Meridian.Default.resumes_entriesStore.Exists(_item.id))
			{
				Meridian.Default.resumes_entriesStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public resumes_entries RemoveEntries(resumes_entries _item, bool _complete = false)
		{
			resume_entries.Remove(_item);
			if(_complete) Meridian.Default.resumes_entriesStore.Delete(_item);
			return _item;
		}
		private List<resume_works> re_works
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<resume_works> Works
		{
			get { return re_works; }
		}
		public IEnumerable<resume_works> GetWorks()
		{
			return re_works;
		}
		public resume_works AddWorks(resume_works _item, bool _insertToStore = false)
		{
			if(re_works.IndexOf(_item) != -1) return _item;
			re_works.Add(_item);
			_item.resume_id = id;
			if(_insertToStore && !Meridian.Default.resume_worksStore.Exists(_item.id))
			{
				Meridian.Default.resume_worksStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public resume_works RemoveWorks(resume_works _item, bool _complete = false)
		{
			re_works.Remove(_item);
			if(_complete) Meridian.Default.resume_worksStore.Delete(_item);
			return _item;
		}
		private List<resume_educations> re_educations
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<resume_educations> Educations
		{
			get { return re_educations; }
		}
		public IEnumerable<resume_educations> GetEducations()
		{
			return re_educations;
		}
		public resume_educations AddEducations(resume_educations _item, bool _insertToStore = false)
		{
			if(re_educations.IndexOf(_item) != -1) return _item;
			re_educations.Add(_item);
			_item.resume_id = id;
			if(_insertToStore && !Meridian.Default.resume_educationsStore.Exists(_item.id))
			{
				Meridian.Default.resume_educationsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public resume_educations RemoveEducations(resume_educations _item, bool _complete = false)
		{
			re_educations.Remove(_item);
			if(_complete) Meridian.Default.resume_educationsStore.Delete(_item);
			return _item;
		}
		private List<resume_trainings> re_trainings
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<resume_trainings> Trainings
		{
			get { return re_trainings; }
		}
		public IEnumerable<resume_trainings> GetTrainings()
		{
			return re_trainings;
		}
		public resume_trainings AddTrainings(resume_trainings _item, bool _insertToStore = false)
		{
			if(re_trainings.IndexOf(_item) != -1) return _item;
			re_trainings.Add(_item);
			_item.resume_id = id;
			if(_insertToStore && !Meridian.Default.resume_trainingsStore.Exists(_item.id))
			{
				Meridian.Default.resume_trainingsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public resume_trainings RemoveTrainings(resume_trainings _item, bool _complete = false)
		{
			re_trainings.Remove(_item);
			if(_complete) Meridian.Default.resume_trainingsStore.Delete(_item);
			return _item;
		}
		private List<resume_links> re_links
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<resume_links> Links
		{
			get { return re_links; }
		}
		public IEnumerable<resume_links> GetLinks()
		{
			return re_links;
		}
		public resume_links AddLinks(resume_links _item, bool _insertToStore = false)
		{
			if(re_links.IndexOf(_item) != -1) return _item;
			re_links.Add(_item);
			_item.resume_id = id;
			if(_insertToStore && !Meridian.Default.resume_linksStore.Exists(_item.id))
			{
				Meridian.Default.resume_linksStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public resume_links RemoveLinks(resume_links _item, bool _complete = false)
		{
			re_links.Remove(_item);
			if(_complete) Meridian.Default.resume_linksStore.Delete(_item);
			return _item;
		}
		private List<resumes_facilities> re_facilities
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<resumes_facilities> Facilities
		{
			get { return re_facilities; }
		}
		public IEnumerable<resumes_facilities> GetFacilities()
		{
			return re_facilities;
		}
		public resumes_facilities AddFacilities(resumes_facilities _item, bool _insertToStore = false)
		{
			if(re_facilities.IndexOf(_item) != -1) return _item;
			re_facilities.Add(_item);
			_item.resume_id = id;
			if(_insertToStore && !Meridian.Default.resumes_facilitiesStore.Exists(_item.id))
			{
				Meridian.Default.resumes_facilitiesStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public resumes_facilities RemoveFacilities(resumes_facilities _item, bool _complete = false)
		{
			re_facilities.Remove(_item);
			if(_complete) Meridian.Default.resumes_facilitiesStore.Delete(_item);
			return _item;
		}
		private regions re_resumes_regions
		{
			get; set; 
		}
		public regions GetResumesRegion()
		{
			return re_resumes_regions ;
		}
		private cities ci_resumes_cities
		{
			get; set; 
		}
		public cities GetResumesCitie()
		{
			return ci_resumes_cities ;
		}
		private accounts ac_resumes_accounts
		{
			get; set; 
		}
		public accounts GetResumesAccount()
		{
			return ac_resumes_accounts ;
		}
	}
}
