/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.smolensk;
using meridian.smolensk.system;

namespace meridian.smolensk.proto
{
	[MetadataType(typeof(blogs_meta))]	public partial class blogs : admin.db.IDatabaseEntity
	{
		public blogs()
		{
			b_comments = new List<blog_comments>();
			cb_marks = new List<blog_marks>();
			n_lv_blogs = new List<blog_lastviews>();
			im_blogs = new List<blog_photos>();
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private string m_title = "";
		internal bool mc_title { get; private set; }
		private string m_announce = "";
		internal bool mc_announce { get; private set; }
		private string m_text = "";
		internal bool mc_text { get; private set; }
		private DateTime m_create_date = DateTime.MinValue;
		internal bool mc_create_date { get; private set; }
		private DateTime m_publish_date = DateTime.MinValue;
		internal bool mc_publish_date { get; private set; }
		private bool m_is_main = false;
		internal bool mc_is_main { get; private set; }
		private int m_rating = 0;
		internal bool mc_rating { get; private set; }
		private int m_views = 0;
		internal bool mc_views { get; private set; }
		private int m_comment_count = 0;
		internal bool mc_comment_count { get; private set; }
		private long m_category_id = 0;
		internal bool mc_category_id { get; private set; }
		private bool m_is_interesting = false;
		internal bool mc_is_interesting { get; private set; }
		private bool m_is_thebest = false;
		internal bool mc_is_thebest { get; private set; }
		private long m_account_id = 0;
		internal bool mc_account_id { get; private set; }
		private bool m_can_comment = false;
		internal bool mc_can_comment { get; private set; }
		private bool m_is_publish = false;
		internal bool mc_is_publish { get; private set; }
		private bool m_is_delete = false;
		internal bool mc_is_delete { get; private set; }
		public ILookupValueAspect GetLookupValueAspect(string _fieldName)
		{
			switch (_fieldName)
			{
				case "category_id": return Getcategory_idLookupValueAspect(); break;
				case "account_id": return Getaccount_idLookupValueAspect(); break;
				default: throw new SystemException("Aspect LookupValue not found in blogs");
			}
		}
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_title = _reader["title"].GetType() != typeof(System.DBNull) ? _reader.GetString("title") : "";
			mc_title = false;
			m_announce = _reader["announce"].GetType() != typeof(System.DBNull) ? _reader.GetString("announce") : "";
			mc_announce = false;
			m_text = _reader["text"].GetType() != typeof(System.DBNull) ? _reader.GetString("text") : "";
			mc_text = false;
			m_create_date = _reader["create_date"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("create_date") : DateTime.MinValue;
			mc_create_date = false;
			m_publish_date = _reader["publish_date"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("publish_date") : DateTime.MinValue;
			mc_publish_date = false;
			m_is_main = _reader["is_main"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("is_main") : false;
			mc_is_main = false;
			m_rating = _reader["rating"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("rating") : 0;
			mc_rating = false;
			m_views = _reader["views"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("views") : 0;
			mc_views = false;
			m_comment_count = _reader["comment_count"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("comment_count") : 0;
			mc_comment_count = false;
			m_category_id = _reader["category_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("category_id") : 0;
			mc_category_id = false;
			m_is_interesting = _reader["is_interesting"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("is_interesting") : false;
			mc_is_interesting = false;
			m_is_thebest = _reader["is_thebest"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("is_thebest") : false;
			mc_is_thebest = false;
			m_account_id = _reader["account_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("account_id") : 0;
			mc_account_id = false;
			m_can_comment = _reader["can_comment"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("can_comment") : false;
			mc_can_comment = false;
			m_is_publish = _reader["is_publish"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("is_publish") : false;
			mc_is_publish = false;
			m_is_delete = _reader["is_delete"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("is_delete") : false;
			mc_is_delete = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
			if((account_id > 0) && (_meridian.accountsStore.Exists(account_id)))
			{
				this.ab_blogs_accounts = _meridian.accountsStore.Get(account_id);;
				this.ab_blogs_accounts.AddUserBlogs(this);
			}
			if((category_id > 0) && (_meridian.blog_categoriesStore.Exists(category_id)))
			{
				this.uc_blogs_blog_categories = _meridian.blog_categoriesStore.Get(category_id);;
				this.uc_blogs_blog_categories.AddCategoryBlog(this);
			}
		}
		public void DeleteAggregations()
		{
			if(this.ab_blogs_accounts != null)
			{
				this.ab_blogs_accounts.RemoveUserBlogs(this);
			}
			if(this.uc_blogs_blog_categories != null)
			{
				this.uc_blogs_blog_categories.RemoveCategoryBlog(this);
			}
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public void SaveCompositions(Meridian _meridian)
		{
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public string ProtoName
		{
			get { return "blogs"; }
		}
		/* metafile template 
		internal class blogs_meta
		{
			public long id { get; set; }
			public string title { get; set; }
			public string announce { get; set; }
			public string text { get; set; }
			public DateTime create_date { get; set; }
			public DateTime publish_date { get; set; }
			public bool is_main { get; set; }
			public int rating { get; set; }
			public int views { get; set; }
			public int comment_count { get; set; }
			public long category_id { get; set; }
			public bool is_interesting { get; set; }
			public bool is_thebest { get; set; }
			public long account_id { get; set; }
			public bool can_comment { get; set; }
			public bool is_publish { get; set; }
			public bool is_delete { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public string title
		{
			get
			{
				return m_title;
			}
			set
			{
				if(m_title != value)
				{
					m_title = value != null ? value : "";
					mc_title = true;
					// call update worker thread;
				}
			}
		}
		public string announce
		{
			get
			{
				return m_announce;
			}
			set
			{
				if(m_announce != value)
				{
					m_announce = value != null ? value : "";
					mc_announce = true;
					// call update worker thread;
				}
			}
		}
		public string text
		{
			get
			{
				return m_text;
			}
			set
			{
				if(m_text != value)
				{
					m_text = value != null ? value : "";
					mc_text = true;
					// call update worker thread;
				}
			}
		}
		public DateTime create_date
		{
			get
			{
				return m_create_date;
			}
			set
			{
				if(m_create_date != value)
				{
					m_create_date = value != null ? value : DateTime.MinValue;
					if(m_create_date.Year < 1800) value = DateTime.MinValue;
					mc_create_date = true;
					// call update worker thread;
				}
			}
		}
		public DateTime publish_date
		{
			get
			{
				return m_publish_date;
			}
			set
			{
				if(m_publish_date != value)
				{
					m_publish_date = value != null ? value : DateTime.MinValue;
					if(m_publish_date.Year < 1800) value = DateTime.MinValue;
					mc_publish_date = true;
					// call update worker thread;
				}
			}
		}
		public bool is_main
		{
			get
			{
				return m_is_main;
			}
			set
			{
				if(m_is_main != value)
				{
					m_is_main = value != null ? value : false;
					mc_is_main = true;
					// call update worker thread;
				}
			}
		}
		public int rating
		{
			get
			{
				return m_rating;
			}
			set
			{
				if(m_rating != value)
				{
					m_rating = value != null ? value : 0;
					mc_rating = true;
					// call update worker thread;
				}
			}
		}
		public int views
		{
			get
			{
				return m_views;
			}
			set
			{
				if(m_views != value)
				{
					m_views = value != null ? value : 0;
					mc_views = true;
					// call update worker thread;
				}
			}
		}
		public int comment_count
		{
			get
			{
				return m_comment_count;
			}
			set
			{
				if(m_comment_count != value)
				{
					m_comment_count = value != null ? value : 0;
					mc_comment_count = true;
					// call update worker thread;
				}
			}
		}
		public long category_id
		{
			get
			{
				return m_category_id;
			}
			set
			{
				if(m_category_id != value)
				{
					m_category_id = value != null ? value : 0;
					mc_category_id = true;
					// call update worker thread;
				}
			}
		}
		public bool is_interesting
		{
			get
			{
				return m_is_interesting;
			}
			set
			{
				if(m_is_interesting != value)
				{
					m_is_interesting = value != null ? value : false;
					mc_is_interesting = true;
					// call update worker thread;
				}
			}
		}
		public bool is_thebest
		{
			get
			{
				return m_is_thebest;
			}
			set
			{
				if(m_is_thebest != value)
				{
					m_is_thebest = value != null ? value : false;
					mc_is_thebest = true;
					// call update worker thread;
				}
			}
		}
		public long account_id
		{
			get
			{
				return m_account_id;
			}
			set
			{
				if(m_account_id != value)
				{
					m_account_id = value != null ? value : 0;
					mc_account_id = true;
					// call update worker thread;
				}
			}
		}
		public bool can_comment
		{
			get
			{
				return m_can_comment;
			}
			set
			{
				if(m_can_comment != value)
				{
					m_can_comment = value != null ? value : false;
					mc_can_comment = true;
					// call update worker thread;
				}
			}
		}
		public bool is_publish
		{
			get
			{
				return m_is_publish;
			}
			set
			{
				if(m_is_publish != value)
				{
					m_is_publish = value != null ? value : false;
					mc_is_publish = true;
					// call update worker thread;
				}
			}
		}
		public bool is_delete
		{
			get
			{
				return m_is_delete;
			}
			set
			{
				if(m_is_delete != value)
				{
					m_is_delete = value != null ? value : false;
					mc_is_delete = true;
					// call update worker thread;
				}
			}
		}
		private List<blog_comments> b_comments
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<blog_comments> BlogComments
		{
			get { return b_comments; }
		}
		public IEnumerable<blog_comments> GetBlogComments()
		{
			return b_comments;
		}
		public blog_comments AddBlogComments(blog_comments _item, bool _insertToStore = false)
		{
			if(b_comments.IndexOf(_item) != -1) return _item;
			b_comments.Add(_item);
			_item.blog_id = id;
			if(_insertToStore && !Meridian.Default.blog_commentsStore.Exists(_item.id))
			{
				Meridian.Default.blog_commentsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public blog_comments RemoveBlogComments(blog_comments _item, bool _complete = false)
		{
			b_comments.Remove(_item);
			if(_complete) Meridian.Default.blog_commentsStore.Delete(_item);
			return _item;
		}
		private List<blog_marks> cb_marks
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<blog_marks> BlogMarks
		{
			get { return cb_marks; }
		}
		public IEnumerable<blog_marks> GetBlogMarks()
		{
			return cb_marks;
		}
		public blog_marks AddBlogMarks(blog_marks _item, bool _insertToStore = false)
		{
			if(cb_marks.IndexOf(_item) != -1) return _item;
			cb_marks.Add(_item);
			_item.blog_id = id;
			if(_insertToStore && !Meridian.Default.blog_marksStore.Exists(_item.id))
			{
				Meridian.Default.blog_marksStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public blog_marks RemoveBlogMarks(blog_marks _item, bool _complete = false)
		{
			cb_marks.Remove(_item);
			if(_complete) Meridian.Default.blog_marksStore.Delete(_item);
			return _item;
		}
		private List<blog_lastviews> n_lv_blogs
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<blog_lastviews> LastViews
		{
			get { return n_lv_blogs; }
		}
		public IEnumerable<blog_lastviews> GetLastViews()
		{
			return n_lv_blogs;
		}
		public blog_lastviews AddLastViews(blog_lastviews _item, bool _insertToStore = false)
		{
			if(n_lv_blogs.IndexOf(_item) != -1) return _item;
			n_lv_blogs.Add(_item);
			_item.blog_id = id;
			if(_insertToStore && !Meridian.Default.blog_lastviewsStore.Exists(_item.id))
			{
				Meridian.Default.blog_lastviewsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public blog_lastviews RemoveLastViews(blog_lastviews _item, bool _complete = false)
		{
			n_lv_blogs.Remove(_item);
			if(_complete) Meridian.Default.blog_lastviewsStore.Delete(_item);
			return _item;
		}
		private List<blog_photos> im_blogs
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<blog_photos> ImagesBlog
		{
			get { return im_blogs; }
		}
		public IEnumerable<blog_photos> GetImagesBlog()
		{
			return im_blogs;
		}
		public blog_photos AddImagesBlog(blog_photos _item, bool _insertToStore = false)
		{
			if(im_blogs.IndexOf(_item) != -1) return _item;
			im_blogs.Add(_item);
			_item.blog_id = id;
			if(_insertToStore && !Meridian.Default.blog_photosStore.Exists(_item.id))
			{
				Meridian.Default.blog_photosStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public blog_photos RemoveImagesBlog(blog_photos _item, bool _complete = false)
		{
			im_blogs.Remove(_item);
			if(_complete) Meridian.Default.blog_photosStore.Delete(_item);
			return _item;
		}
		private accounts ab_blogs_accounts
		{
			get; set; 
		}
		public accounts GetUserBlogsAccount()
		{
			return ab_blogs_accounts ;
		}
		private blog_categories uc_blogs_blog_categories
		{
			get; set; 
		}
		public blog_categories GetCategoryBlogBlog_categorie()
		{
			return uc_blogs_blog_categories ;
		}
	}
}
