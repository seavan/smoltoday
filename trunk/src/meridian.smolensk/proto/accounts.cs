/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.smolensk;
using meridian.smolensk.system;

namespace meridian.smolensk.proto
{
	[MetadataType(typeof(accounts_meta))]	public partial class accounts : admin.db.IDatabaseEntity
	{
		public accounts()
		{
			u_comments_news = new List<comments_news>();
			u_comments_restaurants = new List<restaurant_comments>();
			u_company_comments = new List<company_comments>();
			u_company_rating = new List<company_rating>();
			u_blog_comments = new List<blog_comments>();
			u_blog_marks = new List<blog_marks>();
			ab_blogs = new List<blogs>();
			u_lv_blogs = new List<blog_lastviews>();
			ac_resumes = new List<resumes>();
			ac_vacancies = new List<vacancies>();
			pb_user_albums = new List<photobank_user_albums>();
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private string m_email = "";
		internal bool mc_email { get; private set; }
		private string m_firstname = "";
		internal bool mc_firstname { get; private set; }
		private string m_lastname = "";
		internal bool mc_lastname { get; private set; }
		private string m_avatar = "";
		internal bool mc_avatar { get; private set; }
		private long m_role_id = 0;
		internal bool mc_role_id { get; private set; }
		private DateTime m_created = DateTime.MinValue;
		internal bool mc_created { get; private set; }
		private string m_password = "";
		internal bool mc_password { get; private set; }
		private System.Guid m_salt = new System.Guid();
		internal bool mc_salt { get; private set; }
		private System.Guid m_activation_guid = new System.Guid();
		internal bool mc_activation_guid { get; private set; }
		private DateTime m_lastlogin = DateTime.MinValue;
		internal bool mc_lastlogin { get; private set; }
		private System.Guid m_rememberpass_guid = new System.Guid();
		internal bool mc_rememberpass_guid { get; private set; }
		private string m_website = "";
		internal bool mc_website { get; private set; }
		private string m_company = "";
		internal bool mc_company { get; private set; }
		private long m_company_account_id = 0;
		internal bool mc_company_account_id { get; private set; }
		private string m_address = "";
		internal bool mc_address { get; private set; }
		private string m_description = "";
		internal bool mc_description { get; private set; }
		private string m_facebook_id = "";
		internal bool mc_facebook_id { get; private set; }
		private string m_vk_id = "";
		internal bool mc_vk_id { get; private set; }
		private string m_google_id = "";
		internal bool mc_google_id { get; private set; }
		private bool m_is_male = false;
		internal bool mc_is_male { get; private set; }
		private DateTime m_birthdate = DateTime.MinValue;
		internal bool mc_birthdate { get; private set; }
		private string m_secondname = "";
		internal bool mc_secondname { get; private set; }
		private string m_career = "";
		internal bool mc_career { get; private set; }
		private int m_comments_count = 0;
		internal bool mc_comments_count { get; private set; }
		private bool m_has_photoprofile = false;
		internal bool mc_has_photoprofile { get; private set; }
		private bool m_hide_birthdate = false;
		internal bool mc_hide_birthdate { get; private set; }
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_email = _reader["email"].GetType() != typeof(System.DBNull) ? _reader.GetString("email") : "";
			mc_email = false;
			m_firstname = _reader["firstname"].GetType() != typeof(System.DBNull) ? _reader.GetString("firstname") : "";
			mc_firstname = false;
			m_lastname = _reader["lastname"].GetType() != typeof(System.DBNull) ? _reader.GetString("lastname") : "";
			mc_lastname = false;
			m_avatar = _reader["avatar"].GetType() != typeof(System.DBNull) ? _reader.GetString("avatar") : "";
			mc_avatar = false;
			m_role_id = _reader["role_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("role_id") : 0;
			mc_role_id = false;
			m_created = _reader["created"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("created") : DateTime.MinValue;
			mc_created = false;
			m_password = _reader["password"].GetType() != typeof(System.DBNull) ? _reader.GetString("password") : "";
			mc_password = false;
			m_salt = _reader["salt"].GetType() != typeof(System.DBNull) ? !String.IsNullOrEmpty(_reader["salt"].ToString()) ? _reader.GetGuid("salt") : new System.Guid() : new System.Guid();
			mc_salt = false;
			m_activation_guid = _reader["activation_guid"].GetType() != typeof(System.DBNull) ? !String.IsNullOrEmpty(_reader["activation_guid"].ToString()) ? _reader.GetGuid("activation_guid") : new System.Guid() : new System.Guid();
			mc_activation_guid = false;
			m_lastlogin = _reader["lastlogin"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("lastlogin") : DateTime.MinValue;
			mc_lastlogin = false;
			m_rememberpass_guid = _reader["rememberpass_guid"].GetType() != typeof(System.DBNull) ? !String.IsNullOrEmpty(_reader["rememberpass_guid"].ToString()) ? _reader.GetGuid("rememberpass_guid") : new System.Guid() : new System.Guid();
			mc_rememberpass_guid = false;
			m_website = _reader["website"].GetType() != typeof(System.DBNull) ? _reader.GetString("website") : "";
			mc_website = false;
			m_company = _reader["company"].GetType() != typeof(System.DBNull) ? _reader.GetString("company") : "";
			mc_company = false;
			m_company_account_id = _reader["company_account_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("company_account_id") : 0;
			mc_company_account_id = false;
			m_address = _reader["address"].GetType() != typeof(System.DBNull) ? _reader.GetString("address") : "";
			mc_address = false;
			m_description = _reader["description"].GetType() != typeof(System.DBNull) ? _reader.GetString("description") : "";
			mc_description = false;
			m_facebook_id = _reader["facebook_id"].GetType() != typeof(System.DBNull) ? _reader.GetString("facebook_id") : "";
			mc_facebook_id = false;
			m_vk_id = _reader["vk_id"].GetType() != typeof(System.DBNull) ? _reader.GetString("vk_id") : "";
			mc_vk_id = false;
			m_google_id = _reader["google_id"].GetType() != typeof(System.DBNull) ? _reader.GetString("google_id") : "";
			mc_google_id = false;
			m_is_male = _reader["is_male"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("is_male") : false;
			mc_is_male = false;
			m_birthdate = _reader["birthdate"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("birthdate") : DateTime.MinValue;
			mc_birthdate = false;
			m_secondname = _reader["secondname"].GetType() != typeof(System.DBNull) ? _reader.GetString("secondname") : "";
			mc_secondname = false;
			m_career = _reader["career"].GetType() != typeof(System.DBNull) ? _reader.GetString("career") : "";
			mc_career = false;
			m_comments_count = _reader["comments_count"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("comments_count") : 0;
			mc_comments_count = false;
			m_has_photoprofile = _reader["has_photoprofile"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("has_photoprofile") : false;
			mc_has_photoprofile = false;
			m_hide_birthdate = _reader["hide_birthdate"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("hide_birthdate") : false;
			mc_hide_birthdate = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
		}
		public void DeleteAggregations()
		{
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public void SaveCompositions(Meridian _meridian)
		{
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public string ProtoName
		{
			get { return "accounts"; }
		}
		/* metafile template 
		internal class accounts_meta
		{
			public long id { get; set; }
			public string email { get; set; }
			public string firstname { get; set; }
			public string lastname { get; set; }
			public string avatar { get; set; }
			public long role_id { get; set; }
			public DateTime created { get; set; }
			public string password { get; set; }
			public System.Guid salt { get; set; }
			public System.Guid activation_guid { get; set; }
			public DateTime lastlogin { get; set; }
			public System.Guid rememberpass_guid { get; set; }
			public string website { get; set; }
			public string company { get; set; }
			public long company_account_id { get; set; }
			public string address { get; set; }
			public string description { get; set; }
			public string facebook_id { get; set; }
			public string vk_id { get; set; }
			public string google_id { get; set; }
			public bool is_male { get; set; }
			public DateTime birthdate { get; set; }
			public string secondname { get; set; }
			public string career { get; set; }
			public int comments_count { get; set; }
			public bool has_photoprofile { get; set; }
			public bool hide_birthdate { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public string email
		{
			get
			{
				return m_email;
			}
			set
			{
				if(m_email != value)
				{
					m_email = value != null ? value : "";
					mc_email = true;
					// call update worker thread;
				}
			}
		}
		public string firstname
		{
			get
			{
				return m_firstname;
			}
			set
			{
				if(m_firstname != value)
				{
					m_firstname = value != null ? value : "";
					mc_firstname = true;
					// call update worker thread;
				}
			}
		}
		public string lastname
		{
			get
			{
				return m_lastname;
			}
			set
			{
				if(m_lastname != value)
				{
					m_lastname = value != null ? value : "";
					mc_lastname = true;
					// call update worker thread;
				}
			}
		}
		public string avatar
		{
			get
			{
				return m_avatar;
			}
			set
			{
				if(m_avatar != value)
				{
					m_avatar = value != null ? value : "";
					mc_avatar = true;
					// call update worker thread;
				}
			}
		}
		public long role_id
		{
			get
			{
				return m_role_id;
			}
			set
			{
				if(m_role_id != value)
				{
					m_role_id = value != null ? value : 0;
					mc_role_id = true;
					// call update worker thread;
				}
			}
		}
		public DateTime created
		{
			get
			{
				return m_created;
			}
			set
			{
				if(m_created != value)
				{
					m_created = value != null ? value : DateTime.MinValue;
					if(m_created.Year < 1800) value = DateTime.MinValue;
					mc_created = true;
					// call update worker thread;
				}
			}
		}
		public string password
		{
			get
			{
				return m_password;
			}
			set
			{
				if(m_password != value)
				{
					m_password = value != null ? value : "";
					mc_password = true;
					// call update worker thread;
				}
			}
		}
		public System.Guid salt
		{
			get
			{
				return m_salt;
			}
			set
			{
				if(m_salt != value)
				{
					m_salt = value != null ? value : new System.Guid();
					mc_salt = true;
					// call update worker thread;
				}
			}
		}
		public System.Guid activation_guid
		{
			get
			{
				return m_activation_guid;
			}
			set
			{
				if(m_activation_guid != value)
				{
					m_activation_guid = value != null ? value : new System.Guid();
					mc_activation_guid = true;
					// call update worker thread;
				}
			}
		}
		public DateTime lastlogin
		{
			get
			{
				return m_lastlogin;
			}
			set
			{
				if(m_lastlogin != value)
				{
					m_lastlogin = value != null ? value : DateTime.MinValue;
					if(m_lastlogin.Year < 1800) value = DateTime.MinValue;
					mc_lastlogin = true;
					// call update worker thread;
				}
			}
		}
		public System.Guid rememberpass_guid
		{
			get
			{
				return m_rememberpass_guid;
			}
			set
			{
				if(m_rememberpass_guid != value)
				{
					m_rememberpass_guid = value != null ? value : new System.Guid();
					mc_rememberpass_guid = true;
					// call update worker thread;
				}
			}
		}
		public string website
		{
			get
			{
				return m_website;
			}
			set
			{
				if(m_website != value)
				{
					m_website = value != null ? value : "";
					mc_website = true;
					// call update worker thread;
				}
			}
		}
		public string company
		{
			get
			{
				return m_company;
			}
			set
			{
				if(m_company != value)
				{
					m_company = value != null ? value : "";
					mc_company = true;
					// call update worker thread;
				}
			}
		}
		public long company_account_id
		{
			get
			{
				return m_company_account_id;
			}
			set
			{
				if(m_company_account_id != value)
				{
					m_company_account_id = value != null ? value : 0;
					mc_company_account_id = true;
					// call update worker thread;
				}
			}
		}
		public string address
		{
			get
			{
				return m_address;
			}
			set
			{
				if(m_address != value)
				{
					m_address = value != null ? value : "";
					mc_address = true;
					// call update worker thread;
				}
			}
		}
		public string description
		{
			get
			{
				return m_description;
			}
			set
			{
				if(m_description != value)
				{
					m_description = value != null ? value : "";
					mc_description = true;
					// call update worker thread;
				}
			}
		}
		public string facebook_id
		{
			get
			{
				return m_facebook_id;
			}
			set
			{
				if(m_facebook_id != value)
				{
					m_facebook_id = value != null ? value : "";
					mc_facebook_id = true;
					// call update worker thread;
				}
			}
		}
		public string vk_id
		{
			get
			{
				return m_vk_id;
			}
			set
			{
				if(m_vk_id != value)
				{
					m_vk_id = value != null ? value : "";
					mc_vk_id = true;
					// call update worker thread;
				}
			}
		}
		public string google_id
		{
			get
			{
				return m_google_id;
			}
			set
			{
				if(m_google_id != value)
				{
					m_google_id = value != null ? value : "";
					mc_google_id = true;
					// call update worker thread;
				}
			}
		}
		public bool is_male
		{
			get
			{
				return m_is_male;
			}
			set
			{
				if(m_is_male != value)
				{
					m_is_male = value != null ? value : false;
					mc_is_male = true;
					// call update worker thread;
				}
			}
		}
		public DateTime birthdate
		{
			get
			{
				return m_birthdate;
			}
			set
			{
				if(m_birthdate != value)
				{
					m_birthdate = value != null ? value : DateTime.MinValue;
					if(m_birthdate.Year < 1800) value = DateTime.MinValue;
					mc_birthdate = true;
					// call update worker thread;
				}
			}
		}
		public string secondname
		{
			get
			{
				return m_secondname;
			}
			set
			{
				if(m_secondname != value)
				{
					m_secondname = value != null ? value : "";
					mc_secondname = true;
					// call update worker thread;
				}
			}
		}
		public string career
		{
			get
			{
				return m_career;
			}
			set
			{
				if(m_career != value)
				{
					m_career = value != null ? value : "";
					mc_career = true;
					// call update worker thread;
				}
			}
		}
		public int comments_count
		{
			get
			{
				return m_comments_count;
			}
			set
			{
				if(m_comments_count != value)
				{
					m_comments_count = value != null ? value : 0;
					mc_comments_count = true;
					// call update worker thread;
				}
			}
		}
		public bool has_photoprofile
		{
			get
			{
				return m_has_photoprofile;
			}
			set
			{
				if(m_has_photoprofile != value)
				{
					m_has_photoprofile = value != null ? value : false;
					mc_has_photoprofile = true;
					// call update worker thread;
				}
			}
		}
		public bool hide_birthdate
		{
			get
			{
				return m_hide_birthdate;
			}
			set
			{
				if(m_hide_birthdate != value)
				{
					m_hide_birthdate = value != null ? value : false;
					mc_hide_birthdate = true;
					// call update worker thread;
				}
			}
		}
		private List<comments_news> u_comments_news
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<comments_news> NewsComments
		{
			get { return u_comments_news; }
		}
		public IEnumerable<comments_news> GetNewsComments()
		{
			return u_comments_news;
		}
		public comments_news AddNewsComments(comments_news _item, bool _insertToStore = false)
		{
			if(u_comments_news.IndexOf(_item) != -1) return _item;
			u_comments_news.Add(_item);
			_item.account_id = id;
			if(_insertToStore && !Meridian.Default.comments_newsStore.Exists(_item.id))
			{
				Meridian.Default.comments_newsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public comments_news RemoveNewsComments(comments_news _item, bool _complete = false)
		{
			u_comments_news.Remove(_item);
			if(_complete) Meridian.Default.comments_newsStore.Delete(_item);
			return _item;
		}
		private List<restaurant_comments> u_comments_restaurants
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<restaurant_comments> RestaurantsComments
		{
			get { return u_comments_restaurants; }
		}
		public IEnumerable<restaurant_comments> GetRestaurantsComments()
		{
			return u_comments_restaurants;
		}
		public restaurant_comments AddRestaurantsComments(restaurant_comments _item, bool _insertToStore = false)
		{
			if(u_comments_restaurants.IndexOf(_item) != -1) return _item;
			u_comments_restaurants.Add(_item);
			_item.account_id = id;
			if(_insertToStore && !Meridian.Default.restaurant_commentsStore.Exists(_item.id))
			{
				Meridian.Default.restaurant_commentsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public restaurant_comments RemoveRestaurantsComments(restaurant_comments _item, bool _complete = false)
		{
			u_comments_restaurants.Remove(_item);
			if(_complete) Meridian.Default.restaurant_commentsStore.Delete(_item);
			return _item;
		}
		private List<company_comments> u_company_comments
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<company_comments> CompanyComments
		{
			get { return u_company_comments; }
		}
		public IEnumerable<company_comments> GetCompanyComments()
		{
			return u_company_comments;
		}
		public company_comments AddCompanyComments(company_comments _item, bool _insertToStore = false)
		{
			if(u_company_comments.IndexOf(_item) != -1) return _item;
			u_company_comments.Add(_item);
			_item.account_id = id;
			if(_insertToStore && !Meridian.Default.company_commentsStore.Exists(_item.id))
			{
				Meridian.Default.company_commentsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public company_comments RemoveCompanyComments(company_comments _item, bool _complete = false)
		{
			u_company_comments.Remove(_item);
			if(_complete) Meridian.Default.company_commentsStore.Delete(_item);
			return _item;
		}
		private List<company_rating> u_company_rating
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<company_rating> CompanyRating
		{
			get { return u_company_rating; }
		}
		public IEnumerable<company_rating> GetCompanyRating()
		{
			return u_company_rating;
		}
		public company_rating AddCompanyRating(company_rating _item, bool _insertToStore = false)
		{
			if(u_company_rating.IndexOf(_item) != -1) return _item;
			u_company_rating.Add(_item);
			_item.account_id = id;
			if(_insertToStore && !Meridian.Default.company_ratingStore.Exists(_item.id))
			{
				Meridian.Default.company_ratingStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public company_rating RemoveCompanyRating(company_rating _item, bool _complete = false)
		{
			u_company_rating.Remove(_item);
			if(_complete) Meridian.Default.company_ratingStore.Delete(_item);
			return _item;
		}
		private List<blog_comments> u_blog_comments
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<blog_comments> BlogComments
		{
			get { return u_blog_comments; }
		}
		public IEnumerable<blog_comments> GetBlogComments()
		{
			return u_blog_comments;
		}
		public blog_comments AddBlogComments(blog_comments _item, bool _insertToStore = false)
		{
			if(u_blog_comments.IndexOf(_item) != -1) return _item;
			u_blog_comments.Add(_item);
			_item.account_id = id;
			if(_insertToStore && !Meridian.Default.blog_commentsStore.Exists(_item.id))
			{
				Meridian.Default.blog_commentsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public blog_comments RemoveBlogComments(blog_comments _item, bool _complete = false)
		{
			u_blog_comments.Remove(_item);
			if(_complete) Meridian.Default.blog_commentsStore.Delete(_item);
			return _item;
		}
		private List<blog_marks> u_blog_marks
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<blog_marks> BlogMarks
		{
			get { return u_blog_marks; }
		}
		public IEnumerable<blog_marks> GetBlogMarks()
		{
			return u_blog_marks;
		}
		public blog_marks AddBlogMarks(blog_marks _item, bool _insertToStore = false)
		{
			if(u_blog_marks.IndexOf(_item) != -1) return _item;
			u_blog_marks.Add(_item);
			_item.account_id = id;
			if(_insertToStore && !Meridian.Default.blog_marksStore.Exists(_item.id))
			{
				Meridian.Default.blog_marksStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public blog_marks RemoveBlogMarks(blog_marks _item, bool _complete = false)
		{
			u_blog_marks.Remove(_item);
			if(_complete) Meridian.Default.blog_marksStore.Delete(_item);
			return _item;
		}
		private List<blogs> ab_blogs
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<blogs> UserBlogs
		{
			get { return ab_blogs; }
		}
		public IEnumerable<blogs> GetUserBlogs()
		{
			return ab_blogs;
		}
		public blogs AddUserBlogs(blogs _item, bool _insertToStore = false)
		{
			if(ab_blogs.IndexOf(_item) != -1) return _item;
			ab_blogs.Add(_item);
			_item.account_id = id;
			if(_insertToStore && !Meridian.Default.blogsStore.Exists(_item.id))
			{
				Meridian.Default.blogsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public blogs RemoveUserBlogs(blogs _item, bool _complete = false)
		{
			ab_blogs.Remove(_item);
			if(_complete) Meridian.Default.blogsStore.Delete(_item);
			return _item;
		}
		private List<blog_lastviews> u_lv_blogs
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<blog_lastviews> LastViewsBlogs
		{
			get { return u_lv_blogs; }
		}
		public IEnumerable<blog_lastviews> GetLastViewsBlogs()
		{
			return u_lv_blogs;
		}
		public blog_lastviews AddLastViewsBlogs(blog_lastviews _item, bool _insertToStore = false)
		{
			if(u_lv_blogs.IndexOf(_item) != -1) return _item;
			u_lv_blogs.Add(_item);
			_item.account_id = id;
			if(_insertToStore && !Meridian.Default.blog_lastviewsStore.Exists(_item.id))
			{
				Meridian.Default.blog_lastviewsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public blog_lastviews RemoveLastViewsBlogs(blog_lastviews _item, bool _complete = false)
		{
			u_lv_blogs.Remove(_item);
			if(_complete) Meridian.Default.blog_lastviewsStore.Delete(_item);
			return _item;
		}
		private List<resumes> ac_resumes
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<resumes> Resumes
		{
			get { return ac_resumes; }
		}
		public IEnumerable<resumes> GetResumes()
		{
			return ac_resumes;
		}
		public resumes AddResumes(resumes _item, bool _insertToStore = false)
		{
			if(ac_resumes.IndexOf(_item) != -1) return _item;
			ac_resumes.Add(_item);
			_item.account_id = id;
			if(_insertToStore && !Meridian.Default.resumesStore.Exists(_item.id))
			{
				Meridian.Default.resumesStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public resumes RemoveResumes(resumes _item, bool _complete = false)
		{
			ac_resumes.Remove(_item);
			if(_complete) Meridian.Default.resumesStore.Delete(_item);
			return _item;
		}
		private List<vacancies> ac_vacancies
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<vacancies> Vacancies
		{
			get { return ac_vacancies; }
		}
		public IEnumerable<vacancies> GetVacancies()
		{
			return ac_vacancies;
		}
		public vacancies AddVacancies(vacancies _item, bool _insertToStore = false)
		{
			if(ac_vacancies.IndexOf(_item) != -1) return _item;
			ac_vacancies.Add(_item);
			_item.account_id = id;
			if(_insertToStore && !Meridian.Default.vacanciesStore.Exists(_item.id))
			{
				Meridian.Default.vacanciesStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public vacancies RemoveVacancies(vacancies _item, bool _complete = false)
		{
			ac_vacancies.Remove(_item);
			if(_complete) Meridian.Default.vacanciesStore.Delete(_item);
			return _item;
		}
		private List<photobank_user_albums> pb_user_albums
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<photobank_user_albums> UserAlbums
		{
			get { return pb_user_albums; }
		}
		public IEnumerable<photobank_user_albums> GetUserAlbums()
		{
			return pb_user_albums;
		}
		public photobank_user_albums AddUserAlbums(photobank_user_albums _item, bool _insertToStore = false)
		{
			if(pb_user_albums.IndexOf(_item) != -1) return _item;
			pb_user_albums.Add(_item);
			_item.account_id = id;
			if(_insertToStore && !Meridian.Default.photobank_user_albumsStore.Exists(_item.id))
			{
				Meridian.Default.photobank_user_albumsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public photobank_user_albums RemoveUserAlbums(photobank_user_albums _item, bool _complete = false)
		{
			pb_user_albums.Remove(_item);
			if(_complete) Meridian.Default.photobank_user_albumsStore.Delete(_item);
			return _item;
		}
	}
}
