/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.smolensk;
using meridian.smolensk.system;

namespace meridian.smolensk.proto
{
	[MetadataType(typeof(quizzes_meta))]	public partial class quizzes : admin.db.IDatabaseEntity
	{
		public quizzes()
		{
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private string m_title = "";
		internal bool mc_title { get; private set; }
		private DateTime m_datetime_start = DateTime.MinValue;
		internal bool mc_datetime_start { get; private set; }
		private DateTime m_datetime_finish = DateTime.MinValue;
		internal bool mc_datetime_finish { get; private set; }
		private DateTime m_datetime_publish = DateTime.MinValue;
		internal bool mc_datetime_publish { get; private set; }
		private bool m_is_main = false;
		internal bool mc_is_main { get; private set; }
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_title = _reader["title"].GetType() != typeof(System.DBNull) ? _reader.GetString("title") : "";
			mc_title = false;
			m_datetime_start = _reader["datetime_start"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("datetime_start") : DateTime.MinValue;
			mc_datetime_start = false;
			m_datetime_finish = _reader["datetime_finish"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("datetime_finish") : DateTime.MinValue;
			mc_datetime_finish = false;
			m_datetime_publish = _reader["datetime_publish"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("datetime_publish") : DateTime.MinValue;
			mc_datetime_publish = false;
			m_is_main = _reader["is_main"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("is_main") : false;
			mc_is_main = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
		}
		public void DeleteAggregations()
		{
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public void SaveCompositions(Meridian _meridian)
		{
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public string ProtoName
		{
			get { return "quizzes"; }
		}
		/* metafile template 
		internal class quizzes_meta
		{
			public long id { get; set; }
			public string title { get; set; }
			public DateTime datetime_start { get; set; }
			public DateTime datetime_finish { get; set; }
			public DateTime datetime_publish { get; set; }
			public bool is_main { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public string title
		{
			get
			{
				return m_title;
			}
			set
			{
				if(m_title != value)
				{
					m_title = value != null ? value : "";
					mc_title = true;
					// call update worker thread;
				}
			}
		}
		public DateTime datetime_start
		{
			get
			{
				return m_datetime_start;
			}
			set
			{
				if(m_datetime_start != value)
				{
					m_datetime_start = value != null ? value : DateTime.MinValue;
					if(m_datetime_start.Year < 1800) value = DateTime.MinValue;
					mc_datetime_start = true;
					// call update worker thread;
				}
			}
		}
		public DateTime datetime_finish
		{
			get
			{
				return m_datetime_finish;
			}
			set
			{
				if(m_datetime_finish != value)
				{
					m_datetime_finish = value != null ? value : DateTime.MinValue;
					if(m_datetime_finish.Year < 1800) value = DateTime.MinValue;
					mc_datetime_finish = true;
					// call update worker thread;
				}
			}
		}
		public DateTime datetime_publish
		{
			get
			{
				return m_datetime_publish;
			}
			set
			{
				if(m_datetime_publish != value)
				{
					m_datetime_publish = value != null ? value : DateTime.MinValue;
					if(m_datetime_publish.Year < 1800) value = DateTime.MinValue;
					mc_datetime_publish = true;
					// call update worker thread;
				}
			}
		}
		public bool is_main
		{
			get
			{
				return m_is_main;
			}
			set
			{
				if(m_is_main != value)
				{
					m_is_main = value != null ? value : false;
					mc_is_main = true;
					// call update worker thread;
				}
			}
		}
	}
}
