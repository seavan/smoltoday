/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.smolensk;
using meridian.smolensk.system;

namespace meridian.smolensk.proto
{
	[MetadataType(typeof(news_meta))]	public partial class news : admin.db.IDatabaseEntity
	{
		public news()
		{
			n_comments = new List<comments_news>();
			v_news = new List<news_videos>();
			p_news = new List<news_images>();
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private string m_title = "";
		internal bool mc_title { get; private set; }
		private string m_lead_title = "";
		internal bool mc_lead_title { get; private set; }
		private string m_announce = "";
		internal bool mc_announce { get; private set; }
		private string m_text = "";
		internal bool mc_text { get; private set; }
		private string m_processed_text = "";
		internal bool mc_processed_text { get; private set; }
		private DateTime m_create_date = DateTime.MinValue;
		internal bool mc_create_date { get; private set; }
		private DateTime m_publish_date = DateTime.MinValue;
		internal bool mc_publish_date { get; private set; }
		private bool m_is_main = false;
		internal bool mc_is_main { get; private set; }
		private bool m_is_smolensk_news = false;
		internal bool mc_is_smolensk_news { get; private set; }
		private int m_rating = 0;
		internal bool mc_rating { get; private set; }
		private int m_views = 0;
		internal bool mc_views { get; private set; }
		private int m_comment_count = 0;
		internal bool mc_comment_count { get; private set; }
		private long m_category_id = 0;
		internal bool mc_category_id { get; private set; }
		private string m_author_as_text = "";
		internal bool mc_author_as_text { get; private set; }
		private string m_tags = "";
		internal bool mc_tags { get; private set; }
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_title = _reader["title"].GetType() != typeof(System.DBNull) ? _reader.GetString("title") : "";
			mc_title = false;
			m_lead_title = _reader["lead_title"].GetType() != typeof(System.DBNull) ? _reader.GetString("lead_title") : "";
			mc_lead_title = false;
			m_announce = _reader["announce"].GetType() != typeof(System.DBNull) ? _reader.GetString("announce") : "";
			mc_announce = false;
			m_text = _reader["text"].GetType() != typeof(System.DBNull) ? _reader.GetString("text") : "";
			mc_text = false;
			m_processed_text = _reader["processed_text"].GetType() != typeof(System.DBNull) ? _reader.GetString("processed_text") : "";
			mc_processed_text = false;
			m_create_date = _reader["create_date"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("create_date") : DateTime.MinValue;
			mc_create_date = false;
			m_publish_date = _reader["publish_date"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("publish_date") : DateTime.MinValue;
			mc_publish_date = false;
			m_is_main = _reader["is_main"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("is_main") : false;
			mc_is_main = false;
			m_is_smolensk_news = _reader["is_smolensk_news"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("is_smolensk_news") : false;
			mc_is_smolensk_news = false;
			m_rating = _reader["rating"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("rating") : 0;
			mc_rating = false;
			m_views = _reader["views"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("views") : 0;
			mc_views = false;
			m_comment_count = _reader["comment_count"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("comment_count") : 0;
			mc_comment_count = false;
			m_category_id = _reader["category_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("category_id") : 0;
			mc_category_id = false;
			m_author_as_text = _reader["author_as_text"].GetType() != typeof(System.DBNull) ? _reader.GetString("author_as_text") : "";
			mc_author_as_text = false;
			m_tags = _reader["tags"].GetType() != typeof(System.DBNull) ? _reader.GetString("tags") : "";
			mc_tags = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
		}
		public void DeleteAggregations()
		{
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public void SaveCompositions(Meridian _meridian)
		{
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public string ProtoName
		{
			get { return "news"; }
		}
		/* metafile template 
		internal class news_meta
		{
			public long id { get; set; }
			public string title { get; set; }
			public string lead_title { get; set; }
			public string announce { get; set; }
			public string text { get; set; }
			public string processed_text { get; set; }
			public DateTime create_date { get; set; }
			public DateTime publish_date { get; set; }
			public bool is_main { get; set; }
			public bool is_smolensk_news { get; set; }
			public int rating { get; set; }
			public int views { get; set; }
			public int comment_count { get; set; }
			public long category_id { get; set; }
			public string author_as_text { get; set; }
			public string tags { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public string title
		{
			get
			{
				return m_title;
			}
			set
			{
				if(m_title != value)
				{
					m_title = value != null ? value : "";
					mc_title = true;
					// call update worker thread;
				}
			}
		}
		public string lead_title
		{
			get
			{
				return m_lead_title;
			}
			set
			{
				if(m_lead_title != value)
				{
					m_lead_title = value != null ? value : "";
					mc_lead_title = true;
					// call update worker thread;
				}
			}
		}
		public string announce
		{
			get
			{
				return m_announce;
			}
			set
			{
				if(m_announce != value)
				{
					m_announce = value != null ? value : "";
					mc_announce = true;
					// call update worker thread;
				}
			}
		}
		public string text
		{
			get
			{
				return m_text;
			}
			set
			{
				if(m_text != value)
				{
					m_text = value != null ? value : "";
					mc_text = true;
					// call update worker thread;
				}
			}
		}
		public string processed_text
		{
			get
			{
				return m_processed_text;
			}
			set
			{
				if(m_processed_text != value)
				{
					m_processed_text = value != null ? value : "";
					mc_processed_text = true;
					// call update worker thread;
				}
			}
		}
		public DateTime create_date
		{
			get
			{
				return m_create_date;
			}
			set
			{
				if(m_create_date != value)
				{
					m_create_date = value != null ? value : DateTime.MinValue;
					if(m_create_date.Year < 1800) value = DateTime.MinValue;
					mc_create_date = true;
					// call update worker thread;
				}
			}
		}
		public DateTime publish_date
		{
			get
			{
				return m_publish_date;
			}
			set
			{
				if(m_publish_date != value)
				{
					m_publish_date = value != null ? value : DateTime.MinValue;
					if(m_publish_date.Year < 1800) value = DateTime.MinValue;
					mc_publish_date = true;
					// call update worker thread;
				}
			}
		}
		public bool is_main
		{
			get
			{
				return m_is_main;
			}
			set
			{
				if(m_is_main != value)
				{
					m_is_main = value != null ? value : false;
					mc_is_main = true;
					// call update worker thread;
				}
			}
		}
		public bool is_smolensk_news
		{
			get
			{
				return m_is_smolensk_news;
			}
			set
			{
				if(m_is_smolensk_news != value)
				{
					m_is_smolensk_news = value != null ? value : false;
					mc_is_smolensk_news = true;
					// call update worker thread;
				}
			}
		}
		public int rating
		{
			get
			{
				return m_rating;
			}
			set
			{
				if(m_rating != value)
				{
					m_rating = value != null ? value : 0;
					mc_rating = true;
					// call update worker thread;
				}
			}
		}
		public int views
		{
			get
			{
				return m_views;
			}
			set
			{
				if(m_views != value)
				{
					m_views = value != null ? value : 0;
					mc_views = true;
					// call update worker thread;
				}
			}
		}
		public int comment_count
		{
			get
			{
				return m_comment_count;
			}
			set
			{
				if(m_comment_count != value)
				{
					m_comment_count = value != null ? value : 0;
					mc_comment_count = true;
					// call update worker thread;
				}
			}
		}
		public long category_id
		{
			get
			{
				return m_category_id;
			}
			set
			{
				if(m_category_id != value)
				{
					m_category_id = value != null ? value : 0;
					mc_category_id = true;
					// call update worker thread;
				}
			}
		}
		public string author_as_text
		{
			get
			{
				return m_author_as_text;
			}
			set
			{
				if(m_author_as_text != value)
				{
					m_author_as_text = value != null ? value : "";
					mc_author_as_text = true;
					// call update worker thread;
				}
			}
		}
		public string tags
		{
			get
			{
				return m_tags;
			}
			set
			{
				if(m_tags != value)
				{
					m_tags = value != null ? value : "";
					mc_tags = true;
					// call update worker thread;
				}
			}
		}
		private List<comments_news> n_comments
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<comments_news> NewsComments
		{
			get { return n_comments; }
		}
		public IEnumerable<comments_news> GetNewsComments()
		{
			return n_comments;
		}
		public comments_news AddNewsComments(comments_news _item, bool _insertToStore = false)
		{
			if(n_comments.IndexOf(_item) != -1) return _item;
			n_comments.Add(_item);
			_item.news_id = id;
			if(_insertToStore && !Meridian.Default.comments_newsStore.Exists(_item.id))
			{
				Meridian.Default.comments_newsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public comments_news RemoveNewsComments(comments_news _item, bool _complete = false)
		{
			n_comments.Remove(_item);
			if(_complete) Meridian.Default.comments_newsStore.Delete(_item);
			return _item;
		}
		private List<news_videos> v_news
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<news_videos> NewsVideo
		{
			get { return v_news; }
		}
		public IEnumerable<news_videos> GetNewsVideo()
		{
			return v_news;
		}
		public news_videos AddNewsVideo(news_videos _item, bool _insertToStore = false)
		{
			if(v_news.IndexOf(_item) != -1) return _item;
			v_news.Add(_item);
			_item.news_id = id;
			if(_insertToStore && !Meridian.Default.news_videosStore.Exists(_item.id))
			{
				Meridian.Default.news_videosStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public news_videos RemoveNewsVideo(news_videos _item, bool _complete = false)
		{
			v_news.Remove(_item);
			if(_complete) Meridian.Default.news_videosStore.Delete(_item);
			return _item;
		}
		private List<news_images> p_news
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<news_images> NewsImages
		{
			get { return p_news; }
		}
		public IEnumerable<news_images> GetNewsImages()
		{
			return p_news;
		}
		public news_images AddNewsImages(news_images _item, bool _insertToStore = false)
		{
			if(p_news.IndexOf(_item) != -1) return _item;
			p_news.Add(_item);
			_item.news_id = id;
			if(_insertToStore && !Meridian.Default.news_imagesStore.Exists(_item.id))
			{
				Meridian.Default.news_imagesStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public news_images RemoveNewsImages(news_images _item, bool _complete = false)
		{
			p_news.Remove(_item);
			if(_complete) Meridian.Default.news_imagesStore.Delete(_item);
			return _item;
		}
	}
}
