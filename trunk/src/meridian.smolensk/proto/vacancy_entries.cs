/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.smolensk;
using meridian.smolensk.system;

namespace meridian.smolensk.proto
{
	[MetadataType(typeof(vacancy_entries_meta))]	public partial class vacancy_entries : admin.db.IDatabaseEntity
	{
		public vacancy_entries()
		{
			va_en_vacancies = new List<vacancies_entries>();
			va_en_resumes = new List<resumes_entries>();
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private string m_title = "";
		internal bool mc_title { get; private set; }
		private long m_vacancy_entry_category_id = 0;
		internal bool mc_vacancy_entry_category_id { get; private set; }
		private string m_only = "";
		internal bool mc_only { get; private set; }
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_title = _reader["title"].GetType() != typeof(System.DBNull) ? _reader.GetString("title") : "";
			mc_title = false;
			m_vacancy_entry_category_id = _reader["vacancy_entry_category_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("vacancy_entry_category_id") : 0;
			mc_vacancy_entry_category_id = false;
			m_only = _reader["only"].GetType() != typeof(System.DBNull) ? _reader.GetString("only") : "";
			mc_only = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
			if((vacancy_entry_category_id > 0) && (_meridian.vacancy_entry_categoriesStore.Exists(vacancy_entry_category_id)))
			{
				this.va_ca_entries_vacancy_entry_categories = _meridian.vacancy_entry_categoriesStore.Get(vacancy_entry_category_id);;
				this.va_ca_entries_vacancy_entry_categories.AddEntries(this);
			}
		}
		public void DeleteAggregations()
		{
			if(this.va_ca_entries_vacancy_entry_categories != null)
			{
				this.va_ca_entries_vacancy_entry_categories.RemoveEntries(this);
			}
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public void SaveCompositions(Meridian _meridian)
		{
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public string ProtoName
		{
			get { return "vacancy_entries"; }
		}
		/* metafile template 
		internal class vacancy_entries_meta
		{
			public long id { get; set; }
			public string title { get; set; }
			public long vacancy_entry_category_id { get; set; }
			public string only { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public string title
		{
			get
			{
				return m_title;
			}
			set
			{
				if(m_title != value)
				{
					m_title = value != null ? value : "";
					mc_title = true;
					// call update worker thread;
				}
			}
		}
		public long vacancy_entry_category_id
		{
			get
			{
				return m_vacancy_entry_category_id;
			}
			set
			{
				if(m_vacancy_entry_category_id != value)
				{
					m_vacancy_entry_category_id = value != null ? value : 0;
					mc_vacancy_entry_category_id = true;
					// call update worker thread;
				}
			}
		}
		public string only
		{
			get
			{
				return m_only;
			}
			set
			{
				if(m_only != value)
				{
					m_only = value != null ? value : "";
					mc_only = true;
					// call update worker thread;
				}
			}
		}
		private List<vacancies_entries> va_en_vacancies
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<vacancies_entries> Vacancies
		{
			get { return va_en_vacancies; }
		}
		public IEnumerable<vacancies_entries> GetVacancies()
		{
			return va_en_vacancies;
		}
		public vacancies_entries AddVacancies(vacancies_entries _item, bool _insertToStore = false)
		{
			if(va_en_vacancies.IndexOf(_item) != -1) return _item;
			va_en_vacancies.Add(_item);
			_item.vacancy_entry_id = id;
			if(_insertToStore && !Meridian.Default.vacancies_entriesStore.Exists(_item.id))
			{
				Meridian.Default.vacancies_entriesStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public vacancies_entries RemoveVacancies(vacancies_entries _item, bool _complete = false)
		{
			va_en_vacancies.Remove(_item);
			if(_complete) Meridian.Default.vacancies_entriesStore.Delete(_item);
			return _item;
		}
		private List<resumes_entries> va_en_resumes
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<resumes_entries> Resumes
		{
			get { return va_en_resumes; }
		}
		public IEnumerable<resumes_entries> GetResumes()
		{
			return va_en_resumes;
		}
		public resumes_entries AddResumes(resumes_entries _item, bool _insertToStore = false)
		{
			if(va_en_resumes.IndexOf(_item) != -1) return _item;
			va_en_resumes.Add(_item);
			_item.resume_entry_id = id;
			if(_insertToStore && !Meridian.Default.resumes_entriesStore.Exists(_item.id))
			{
				Meridian.Default.resumes_entriesStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public resumes_entries RemoveResumes(resumes_entries _item, bool _complete = false)
		{
			va_en_resumes.Remove(_item);
			if(_complete) Meridian.Default.resumes_entriesStore.Delete(_item);
			return _item;
		}
		private vacancy_entry_categories va_ca_entries_vacancy_entry_categories
		{
			get; set; 
		}
		public vacancy_entry_categories GetEntriesVacancy_entry_categorie()
		{
			return va_ca_entries_vacancy_entry_categories ;
		}
	}
}
