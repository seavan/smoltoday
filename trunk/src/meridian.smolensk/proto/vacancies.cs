/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.smolensk;
using meridian.smolensk.system;

namespace meridian.smolensk.proto
{
	[MetadataType(typeof(vacancies_meta))]	public partial class vacancies : admin.db.IDatabaseEntity
	{
		public vacancies()
		{
			va_professionals = new List<vacancies_professionals>();
			va_entries = new List<vacancies_entries>();
			va_facilities = new List<vacancies_facilities>();
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private string m_title = "";
		internal bool mc_title { get; private set; }
		private long m_company_id = 0;
		internal bool mc_company_id { get; private set; }
		private long m_city_id = 0;
		internal bool mc_city_id { get; private set; }
		private string m_contact_person = "";
		internal bool mc_contact_person { get; private set; }
		private string m_contact_phone = "";
		internal bool mc_contact_phone { get; private set; }
		private string m_contact_phone2 = "";
		internal bool mc_contact_phone2 { get; private set; }
		private int m_compensation1 = 0;
		internal bool mc_compensation1 { get; private set; }
		private int m_compensation2 = 0;
		internal bool mc_compensation2 { get; private set; }
		private int m_age1 = 0;
		internal bool mc_age1 { get; private set; }
		private int m_age2 = 0;
		internal bool mc_age2 { get; private set; }
		private int m_sex = 0;
		internal bool mc_sex { get; private set; }
		private string m_description = "";
		internal bool mc_description { get; private set; }
		private string m_responsibility = "";
		internal bool mc_responsibility { get; private set; }
		private string m_requirements = "";
		internal bool mc_requirements { get; private set; }
		private string m_terms = "";
		internal bool mc_terms { get; private set; }
		private long m_work_region_id = 0;
		internal bool mc_work_region_id { get; private set; }
		private long m_work_city_id = 0;
		internal bool mc_work_city_id { get; private set; }
		private string m_work_phone = "";
		internal bool mc_work_phone { get; private set; }
		private string m_work_phone2 = "";
		internal bool mc_work_phone2 { get; private set; }
		private string m_work_address = "";
		internal bool mc_work_address { get; private set; }
		private DateTime m_created = DateTime.MinValue;
		internal bool mc_created { get; private set; }
		private DateTime m_edited = DateTime.MinValue;
		internal bool mc_edited { get; private set; }
		private long m_views_count = 0;
		internal bool mc_views_count { get; private set; }
		private bool m_closed = false;
		internal bool mc_closed { get; private set; }
		private bool m_show_in_banner = false;
		internal bool mc_show_in_banner { get; private set; }
		private long m_account_id = 0;
		internal bool mc_account_id { get; private set; }
		private bool m_is_publish = false;
		internal bool mc_is_publish { get; private set; }
		private string m_url = "";
		internal bool mc_url { get; private set; }
		public ILookupValueAspect GetLookupValueAspect(string _fieldName)
		{
			switch (_fieldName)
			{
				case "company_id": return Getcompany_idLookupValueAspect(); break;
				case "city_id": return Getcity_idLookupValueAspect(); break;
				case "account_id": return Getaccount_idLookupValueAspect(); break;
				default: throw new SystemException("Aspect LookupValue not found in vacancies");
			}
		}
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_title = _reader["title"].GetType() != typeof(System.DBNull) ? _reader.GetString("title") : "";
			mc_title = false;
			m_company_id = _reader["company_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("company_id") : 0;
			mc_company_id = false;
			m_city_id = _reader["city_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("city_id") : 0;
			mc_city_id = false;
			m_contact_person = _reader["contact_person"].GetType() != typeof(System.DBNull) ? _reader.GetString("contact_person") : "";
			mc_contact_person = false;
			m_contact_phone = _reader["contact_phone"].GetType() != typeof(System.DBNull) ? _reader.GetString("contact_phone") : "";
			mc_contact_phone = false;
			m_contact_phone2 = _reader["contact_phone2"].GetType() != typeof(System.DBNull) ? _reader.GetString("contact_phone2") : "";
			mc_contact_phone2 = false;
			m_compensation1 = _reader["compensation1"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("compensation1") : 0;
			mc_compensation1 = false;
			m_compensation2 = _reader["compensation2"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("compensation2") : 0;
			mc_compensation2 = false;
			m_age1 = _reader["age1"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("age1") : 0;
			mc_age1 = false;
			m_age2 = _reader["age2"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("age2") : 0;
			mc_age2 = false;
			m_sex = _reader["sex"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("sex") : 0;
			mc_sex = false;
			m_description = _reader["description"].GetType() != typeof(System.DBNull) ? _reader.GetString("description") : "";
			mc_description = false;
			m_responsibility = _reader["responsibility"].GetType() != typeof(System.DBNull) ? _reader.GetString("responsibility") : "";
			mc_responsibility = false;
			m_requirements = _reader["requirements"].GetType() != typeof(System.DBNull) ? _reader.GetString("requirements") : "";
			mc_requirements = false;
			m_terms = _reader["terms"].GetType() != typeof(System.DBNull) ? _reader.GetString("terms") : "";
			mc_terms = false;
			m_work_region_id = _reader["work_region_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("work_region_id") : 0;
			mc_work_region_id = false;
			m_work_city_id = _reader["work_city_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("work_city_id") : 0;
			mc_work_city_id = false;
			m_work_phone = _reader["work_phone"].GetType() != typeof(System.DBNull) ? _reader.GetString("work_phone") : "";
			mc_work_phone = false;
			m_work_phone2 = _reader["work_phone2"].GetType() != typeof(System.DBNull) ? _reader.GetString("work_phone2") : "";
			mc_work_phone2 = false;
			m_work_address = _reader["work_address"].GetType() != typeof(System.DBNull) ? _reader.GetString("work_address") : "";
			mc_work_address = false;
			m_created = _reader["created"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("created") : DateTime.MinValue;
			mc_created = false;
			m_edited = _reader["edited"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("edited") : DateTime.MinValue;
			mc_edited = false;
			m_views_count = _reader["views_count"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("views_count") : 0;
			mc_views_count = false;
			m_closed = _reader["closed"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("closed") : false;
			mc_closed = false;
			m_show_in_banner = _reader["show_in_banner"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("show_in_banner") : false;
			mc_show_in_banner = false;
			m_account_id = _reader["account_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("account_id") : 0;
			mc_account_id = false;
			m_is_publish = _reader["is_publish"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("is_publish") : false;
			mc_is_publish = false;
			m_url = _reader["url"].GetType() != typeof(System.DBNull) ? _reader.GetString("url") : "";
			mc_url = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
			if((company_id > 0) && (_meridian.companiesStore.Exists(company_id)))
			{
				this.va_companies_companies = _meridian.companiesStore.Get(company_id);;
				this.va_companies_companies.AddVacancies(this);
			}
			if((account_id > 0) && (_meridian.accountsStore.Exists(account_id)))
			{
				this.ac_vacancies_accounts = _meridian.accountsStore.Get(account_id);;
				this.ac_vacancies_accounts.AddVacancies(this);
			}
		}
		public void DeleteAggregations()
		{
			if(this.va_companies_companies != null)
			{
				this.va_companies_companies.RemoveVacancies(this);
			}
			if(this.ac_vacancies_accounts != null)
			{
				this.ac_vacancies_accounts.RemoveVacancies(this);
			}
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public void SaveCompositions(Meridian _meridian)
		{
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public string ProtoName
		{
			get { return "vacancies"; }
		}
		/* metafile template 
		internal class vacancies_meta
		{
			public long id { get; set; }
			public string title { get; set; }
			public long company_id { get; set; }
			public long city_id { get; set; }
			public string contact_person { get; set; }
			public string contact_phone { get; set; }
			public string contact_phone2 { get; set; }
			public int compensation1 { get; set; }
			public int compensation2 { get; set; }
			public int age1 { get; set; }
			public int age2 { get; set; }
			public int sex { get; set; }
			public string description { get; set; }
			public string responsibility { get; set; }
			public string requirements { get; set; }
			public string terms { get; set; }
			public long work_region_id { get; set; }
			public long work_city_id { get; set; }
			public string work_phone { get; set; }
			public string work_phone2 { get; set; }
			public string work_address { get; set; }
			public DateTime created { get; set; }
			public DateTime edited { get; set; }
			public long views_count { get; set; }
			public bool closed { get; set; }
			public bool show_in_banner { get; set; }
			public long account_id { get; set; }
			public bool is_publish { get; set; }
			public string url { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public string title
		{
			get
			{
				return m_title;
			}
			set
			{
				if(m_title != value)
				{
					m_title = value != null ? value : "";
					mc_title = true;
					// call update worker thread;
				}
			}
		}
		public long company_id
		{
			get
			{
				return m_company_id;
			}
			set
			{
				if(m_company_id != value)
				{
					m_company_id = value != null ? value : 0;
					mc_company_id = true;
					// call update worker thread;
				}
			}
		}
		public long city_id
		{
			get
			{
				return m_city_id;
			}
			set
			{
				if(m_city_id != value)
				{
					m_city_id = value != null ? value : 0;
					mc_city_id = true;
					// call update worker thread;
				}
			}
		}
		public string contact_person
		{
			get
			{
				return m_contact_person;
			}
			set
			{
				if(m_contact_person != value)
				{
					m_contact_person = value != null ? value : "";
					mc_contact_person = true;
					// call update worker thread;
				}
			}
		}
		public string contact_phone
		{
			get
			{
				return m_contact_phone;
			}
			set
			{
				if(m_contact_phone != value)
				{
					m_contact_phone = value != null ? value : "";
					mc_contact_phone = true;
					// call update worker thread;
				}
			}
		}
		public string contact_phone2
		{
			get
			{
				return m_contact_phone2;
			}
			set
			{
				if(m_contact_phone2 != value)
				{
					m_contact_phone2 = value != null ? value : "";
					mc_contact_phone2 = true;
					// call update worker thread;
				}
			}
		}
		public int compensation1
		{
			get
			{
				return m_compensation1;
			}
			set
			{
				if(m_compensation1 != value)
				{
					m_compensation1 = value != null ? value : 0;
					mc_compensation1 = true;
					// call update worker thread;
				}
			}
		}
		public int compensation2
		{
			get
			{
				return m_compensation2;
			}
			set
			{
				if(m_compensation2 != value)
				{
					m_compensation2 = value != null ? value : 0;
					mc_compensation2 = true;
					// call update worker thread;
				}
			}
		}
		public int age1
		{
			get
			{
				return m_age1;
			}
			set
			{
				if(m_age1 != value)
				{
					m_age1 = value != null ? value : 0;
					mc_age1 = true;
					// call update worker thread;
				}
			}
		}
		public int age2
		{
			get
			{
				return m_age2;
			}
			set
			{
				if(m_age2 != value)
				{
					m_age2 = value != null ? value : 0;
					mc_age2 = true;
					// call update worker thread;
				}
			}
		}
		public int sex
		{
			get
			{
				return m_sex;
			}
			set
			{
				if(m_sex != value)
				{
					m_sex = value != null ? value : 0;
					mc_sex = true;
					// call update worker thread;
				}
			}
		}
		public string description
		{
			get
			{
				return m_description;
			}
			set
			{
				if(m_description != value)
				{
					m_description = value != null ? value : "";
					mc_description = true;
					// call update worker thread;
				}
			}
		}
		public string responsibility
		{
			get
			{
				return m_responsibility;
			}
			set
			{
				if(m_responsibility != value)
				{
					m_responsibility = value != null ? value : "";
					mc_responsibility = true;
					// call update worker thread;
				}
			}
		}
		public string requirements
		{
			get
			{
				return m_requirements;
			}
			set
			{
				if(m_requirements != value)
				{
					m_requirements = value != null ? value : "";
					mc_requirements = true;
					// call update worker thread;
				}
			}
		}
		public string terms
		{
			get
			{
				return m_terms;
			}
			set
			{
				if(m_terms != value)
				{
					m_terms = value != null ? value : "";
					mc_terms = true;
					// call update worker thread;
				}
			}
		}
		public long work_region_id
		{
			get
			{
				return m_work_region_id;
			}
			set
			{
				if(m_work_region_id != value)
				{
					m_work_region_id = value != null ? value : 0;
					mc_work_region_id = true;
					// call update worker thread;
				}
			}
		}
		public long work_city_id
		{
			get
			{
				return m_work_city_id;
			}
			set
			{
				if(m_work_city_id != value)
				{
					m_work_city_id = value != null ? value : 0;
					mc_work_city_id = true;
					// call update worker thread;
				}
			}
		}
		public string work_phone
		{
			get
			{
				return m_work_phone;
			}
			set
			{
				if(m_work_phone != value)
				{
					m_work_phone = value != null ? value : "";
					mc_work_phone = true;
					// call update worker thread;
				}
			}
		}
		public string work_phone2
		{
			get
			{
				return m_work_phone2;
			}
			set
			{
				if(m_work_phone2 != value)
				{
					m_work_phone2 = value != null ? value : "";
					mc_work_phone2 = true;
					// call update worker thread;
				}
			}
		}
		public string work_address
		{
			get
			{
				return m_work_address;
			}
			set
			{
				if(m_work_address != value)
				{
					m_work_address = value != null ? value : "";
					mc_work_address = true;
					// call update worker thread;
				}
			}
		}
		public DateTime created
		{
			get
			{
				return m_created;
			}
			set
			{
				if(m_created != value)
				{
					m_created = value != null ? value : DateTime.MinValue;
					if(m_created.Year < 1800) value = DateTime.MinValue;
					mc_created = true;
					// call update worker thread;
				}
			}
		}
		public DateTime edited
		{
			get
			{
				return m_edited;
			}
			set
			{
				if(m_edited != value)
				{
					m_edited = value != null ? value : DateTime.MinValue;
					if(m_edited.Year < 1800) value = DateTime.MinValue;
					mc_edited = true;
					// call update worker thread;
				}
			}
		}
		public long views_count
		{
			get
			{
				return m_views_count;
			}
			set
			{
				if(m_views_count != value)
				{
					m_views_count = value != null ? value : 0;
					mc_views_count = true;
					// call update worker thread;
				}
			}
		}
		public bool closed
		{
			get
			{
				return m_closed;
			}
			set
			{
				if(m_closed != value)
				{
					m_closed = value != null ? value : false;
					mc_closed = true;
					// call update worker thread;
				}
			}
		}
		public bool show_in_banner
		{
			get
			{
				return m_show_in_banner;
			}
			set
			{
				if(m_show_in_banner != value)
				{
					m_show_in_banner = value != null ? value : false;
					mc_show_in_banner = true;
					// call update worker thread;
				}
			}
		}
		public long account_id
		{
			get
			{
				return m_account_id;
			}
			set
			{
				if(m_account_id != value)
				{
					m_account_id = value != null ? value : 0;
					mc_account_id = true;
					// call update worker thread;
				}
			}
		}
		public bool is_publish
		{
			get
			{
				return m_is_publish;
			}
			set
			{
				if(m_is_publish != value)
				{
					m_is_publish = value != null ? value : false;
					mc_is_publish = true;
					// call update worker thread;
				}
			}
		}
		public string url
		{
			get
			{
				return m_url;
			}
			set
			{
				if(m_url != value)
				{
					m_url = value != null ? value : "";
					mc_url = true;
					// call update worker thread;
				}
			}
		}
		private List<vacancies_professionals> va_professionals
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<vacancies_professionals> Profressionals
		{
			get { return va_professionals; }
		}
		public IEnumerable<vacancies_professionals> GetProfressionals()
		{
			return va_professionals;
		}
		public vacancies_professionals AddProfressionals(vacancies_professionals _item, bool _insertToStore = false)
		{
			if(va_professionals.IndexOf(_item) != -1) return _item;
			va_professionals.Add(_item);
			_item.vacancy_id = id;
			if(_insertToStore && !Meridian.Default.vacancies_professionalsStore.Exists(_item.id))
			{
				Meridian.Default.vacancies_professionalsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public vacancies_professionals RemoveProfressionals(vacancies_professionals _item, bool _complete = false)
		{
			va_professionals.Remove(_item);
			if(_complete) Meridian.Default.vacancies_professionalsStore.Delete(_item);
			return _item;
		}
		private List<vacancies_entries> va_entries
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<vacancies_entries> Entries
		{
			get { return va_entries; }
		}
		public IEnumerable<vacancies_entries> GetEntries()
		{
			return va_entries;
		}
		public vacancies_entries AddEntries(vacancies_entries _item, bool _insertToStore = false)
		{
			if(va_entries.IndexOf(_item) != -1) return _item;
			va_entries.Add(_item);
			_item.vacancy_id = id;
			if(_insertToStore && !Meridian.Default.vacancies_entriesStore.Exists(_item.id))
			{
				Meridian.Default.vacancies_entriesStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public vacancies_entries RemoveEntries(vacancies_entries _item, bool _complete = false)
		{
			va_entries.Remove(_item);
			if(_complete) Meridian.Default.vacancies_entriesStore.Delete(_item);
			return _item;
		}
		private List<vacancies_facilities> va_facilities
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<vacancies_facilities> Facilities
		{
			get { return va_facilities; }
		}
		public IEnumerable<vacancies_facilities> GetFacilities()
		{
			return va_facilities;
		}
		public vacancies_facilities AddFacilities(vacancies_facilities _item, bool _insertToStore = false)
		{
			if(va_facilities.IndexOf(_item) != -1) return _item;
			va_facilities.Add(_item);
			_item.vacancy_id = id;
			if(_insertToStore && !Meridian.Default.vacancies_facilitiesStore.Exists(_item.id))
			{
				Meridian.Default.vacancies_facilitiesStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public vacancies_facilities RemoveFacilities(vacancies_facilities _item, bool _complete = false)
		{
			va_facilities.Remove(_item);
			if(_complete) Meridian.Default.vacancies_facilitiesStore.Delete(_item);
			return _item;
		}
		private companies va_companies_companies
		{
			get; set; 
		}
		public companies GetVacanciesCompanie()
		{
			return va_companies_companies ;
		}
		private accounts ac_vacancies_accounts
		{
			get; set; 
		}
		public accounts GetVacanciesAccount()
		{
			return ac_vacancies_accounts ;
		}
	}
}
