/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.smolensk;
using meridian.smolensk.system;

namespace meridian.smolensk.proto
{
	[MetadataType(typeof(photobank_user_albums_meta))]	public partial class photobank_user_albums : admin.db.IDatabaseEntity
	{
		public photobank_user_albums()
		{
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private long m_account_id = 0;
		internal bool mc_account_id { get; private set; }
		private string m_title = "";
		internal bool mc_title { get; private set; }
		private DateTime m_shoot_date = DateTime.MinValue;
		internal bool mc_shoot_date { get; private set; }
		public ILookupValueAspect GetLookupValueAspect(string _fieldName)
		{
			switch (_fieldName)
			{
				case "account_id": return Getaccount_idLookupValueAspect(); break;
				default: throw new SystemException("Aspect LookupValue not found in photobank_user_albums");
			}
		}
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_account_id = _reader["account_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("account_id") : 0;
			mc_account_id = false;
			m_title = _reader["title"].GetType() != typeof(System.DBNull) ? _reader.GetString("title") : "";
			mc_title = false;
			m_shoot_date = _reader["shoot_date"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("shoot_date") : DateTime.MinValue;
			mc_shoot_date = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
			if((account_id > 0) && (_meridian.accountsStore.Exists(account_id)))
			{
				this.pb_user_albums_accounts = _meridian.accountsStore.Get(account_id);;
				this.pb_user_albums_accounts.AddUserAlbums(this);
			}
		}
		public void DeleteAggregations()
		{
			if(this.pb_user_albums_accounts != null)
			{
				this.pb_user_albums_accounts.RemoveUserAlbums(this);
			}
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public void SaveCompositions(Meridian _meridian)
		{
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public string ProtoName
		{
			get { return "photobank_user_albums"; }
		}
		/* metafile template 
		internal class photobank_user_albums_meta
		{
			public long id { get; set; }
			public long account_id { get; set; }
			public string title { get; set; }
			public DateTime shoot_date { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public long account_id
		{
			get
			{
				return m_account_id;
			}
			set
			{
				if(m_account_id != value)
				{
					m_account_id = value != null ? value : 0;
					mc_account_id = true;
					// call update worker thread;
				}
			}
		}
		public string title
		{
			get
			{
				return m_title;
			}
			set
			{
				if(m_title != value)
				{
					m_title = value != null ? value : "";
					mc_title = true;
					// call update worker thread;
				}
			}
		}
		public DateTime shoot_date
		{
			get
			{
				return m_shoot_date;
			}
			set
			{
				if(m_shoot_date != value)
				{
					m_shoot_date = value != null ? value : DateTime.MinValue;
					if(m_shoot_date.Year < 1800) value = DateTime.MinValue;
					mc_shoot_date = true;
					// call update worker thread;
				}
			}
		}
		private accounts pb_user_albums_accounts
		{
			get; set; 
		}
		public accounts GetUserAlbumsAccount()
		{
			return pb_user_albums_accounts ;
		}
	}
}
