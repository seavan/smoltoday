/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using MySql.Data.MySqlClient;
using meridian.smolensk;
using meridian.smolensk.system;

namespace meridian.smolensk.protoStore
{
	public partial class salesStore : Meridian.IEntityStore, admin.db.IDataService<proto.sales>
	{
		public salesStore()
		{
			m_Items = new SortedList<long, proto.sales>();
		}
		private SortedList<long, proto.sales> m_Items;
		public void Commit()
		{
			//throw new NotImplementedException();
		}
		public IQueryable<proto.sales> GetAll()
		{
			return Queryable.AsQueryable<proto.sales>(All());
		}
		public proto.sales GetById(long id)
		{
			return Get(id);
		}
		void admin.db.IDataService<proto.sales>.Insert(proto.sales item)
		{
			Insert(item);
		}
		void admin.db.IDataService<proto.sales>.Delete(proto.sales item)
		{
			Delete(item);
		}
		public proto.sales CreateItem()
		{
			return new proto.sales() {   };
		}
		public void AbortItem(proto.sales item)
		{
			Delete(item);
		}
		public void Discard()
		{
			;
		}
		void admin.db.IDataService<proto.sales>.Update(proto.sales item)
		{
			Persist(item);
		}
		public object GetObject(long _id)
		{
			return Get(_id);
		}
		public System.Type GetObjectType()
		{
			return typeof(proto.sales);
		}
		public void DeleteById(long _id)
		{
			Delete(Get(_id));
		}
		public void UpdateById(long _id)
		{
			Update(Get(_id));
		}
		public void LoadAggregations(Meridian _meridian)
		{
			foreach(var item in m_Items.Values)
			{
				item.LoadAggregations(_meridian);
			}
		}
		public void Select(MySqlConnection _connection)
		{
			var cmd = new MySqlCommand("SELECT `id`, `title`, `text`, `publish_date`, `is_main`, `category_id`, `company_id`, `sale_type_id`, `comment_count`, `start_date`, `end_date`, `percent`, `percent_max`, `site`, `phone`, `products`, `work_time`, `sales_offices`, `image`, `image_for_main` FROM sales");
			cmd.Connection = _connection;
			using(var reader = cmd.ExecuteReader())
			{
				while(reader.Read())
				{
					var item = new proto.sales();
					item.LoadFromReader(reader);
					m_Items[item.id] = item;
				}
			}
		}
		public proto.sales Insert(MySqlConnection _connection, proto.sales _item)
		{
			var cmd = new MySqlCommand("INSERT INTO sales ( `title`, `text`, `publish_date`, `is_main`, `category_id`, `company_id`, `sale_type_id`, `comment_count`, `start_date`, `end_date`, `percent`, `percent_max`, `site`, `phone`, `products`, `work_time`, `sales_offices`, `image`, `image_for_main` ) VALUES ( @title, @text, @publish_date, @is_main, @category_id, @company_id, @sale_type_id, @comment_count, @start_date, @end_date, @percent, @percent_max, @site, @phone, @products, @work_time, @sales_offices, @image, @image_for_main ); SELECT LAST_INSERT_ID();"); ;
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "title", Value = _item.title });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "text", Value = _item.text });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "publish_date", Value = (_item.publish_date != null && _item.publish_date.Year > 1800) ? _item.publish_date : new DateTime(1800, 1, 1) });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "is_main", Value = _item.is_main });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "category_id", Value = _item.category_id });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "company_id", Value = _item.company_id });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "sale_type_id", Value = _item.sale_type_id });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "comment_count", Value = _item.comment_count });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "start_date", Value = (_item.start_date != null && _item.start_date.Year > 1800) ? _item.start_date : new DateTime(1800, 1, 1) });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "end_date", Value = (_item.end_date != null && _item.end_date.Year > 1800) ? _item.end_date : new DateTime(1800, 1, 1) });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "percent", Value = _item.percent });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "percent_max", Value = _item.percent_max });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "site", Value = _item.site });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "phone", Value = _item.phone });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "products", Value = _item.products });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "work_time", Value = _item.work_time });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "sales_offices", Value = _item.sales_offices });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "image", Value = _item.image });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "image_for_main", Value = _item.image_for_main });
			cmd.Connection = _connection;
			_item.id = Convert.ToInt64(cmd.ExecuteScalar());
			m_Items.Add(_item.id, _item);
			_item.LoadAggregations(Meridian.Default);
			return _item;
		}
		public proto.sales Update(MySqlConnection _connection, proto.sales _item)
		{
			bool changed =  false;
			var cmdText =  "";
			var cmd = new MySqlCommand("UPDATE sales SET `title`= @title, `text`= @text, `publish_date`= @publish_date, `is_main`= @is_main, `category_id`= @category_id, `company_id`= @company_id, `sale_type_id`= @sale_type_id, `comment_count`= @comment_count, `start_date`= @start_date, `end_date`= @end_date, `percent`= @percent, `percent_max`= @percent_max, `site`= @site, `phone`= @phone, `products`= @products, `work_time`= @work_time, `sales_offices`= @sales_offices, `image`= @image, `image_for_main`= @image_for_main WHERE id=@id"); ;
			if(_item.mc_id)
			{
			}
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "id", Value = _item.id });
			if(_item.mc_title)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "title = @title";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "title", Value = _item.title != null ? (object)_item.title : DBNull.Value });
			}
			if(_item.mc_text)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "text = @text";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "text", Value = _item.text != null ? (object)_item.text : DBNull.Value });
			}
			if(_item.mc_publish_date)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "publish_date = @publish_date";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "publish_date", Value = _item.publish_date });
			}
			if(_item.mc_is_main)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "is_main = @is_main";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "is_main", Value = _item.is_main });
			}
			if(_item.mc_category_id)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "category_id = @category_id";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "category_id", Value = _item.category_id });
			}
			if(_item.mc_company_id)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "company_id = @company_id";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "company_id", Value = _item.company_id });
			}
			if(_item.mc_sale_type_id)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "sale_type_id = @sale_type_id";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "sale_type_id", Value = _item.sale_type_id });
			}
			if(_item.mc_comment_count)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "comment_count = @comment_count";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "comment_count", Value = _item.comment_count });
			}
			if(_item.mc_start_date)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "start_date = @start_date";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "start_date", Value = _item.start_date });
			}
			if(_item.mc_end_date)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "end_date = @end_date";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "end_date", Value = _item.end_date });
			}
			if(_item.mc_percent)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "percent = @percent";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "percent", Value = _item.percent });
			}
			if(_item.mc_percent_max)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "percent_max = @percent_max";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "percent_max", Value = _item.percent_max });
			}
			if(_item.mc_site)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "site = @site";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "site", Value = _item.site != null ? (object)_item.site : DBNull.Value });
			}
			if(_item.mc_phone)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "phone = @phone";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "phone", Value = _item.phone != null ? (object)_item.phone : DBNull.Value });
			}
			if(_item.mc_products)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "products = @products";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "products", Value = _item.products != null ? (object)_item.products : DBNull.Value });
			}
			if(_item.mc_work_time)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "work_time = @work_time";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "work_time", Value = _item.work_time != null ? (object)_item.work_time : DBNull.Value });
			}
			if(_item.mc_sales_offices)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "sales_offices = @sales_offices";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "sales_offices", Value = _item.sales_offices != null ? (object)_item.sales_offices : DBNull.Value });
			}
			if(_item.mc_image)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "image = @image";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "image", Value = _item.image != null ? (object)_item.image : DBNull.Value });
			}
			if(_item.mc_image_for_main)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "image_for_main = @image_for_main";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "image_for_main", Value = _item.image_for_main != null ? (object)_item.image_for_main : DBNull.Value });
			}
			if(changed)
			{
				cmd.CommandText =  "UPDATE sales SET " + cmdText + " WHERE id=@id";
				cmd.Connection = _connection;
				cmd.ExecuteNonQuery();
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public proto.sales Delete(MySqlConnection _connection, proto.sales _item)
		{
			var cmd = new MySqlCommand("DELETE FROM sales WHERE id=@id"); ;
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "id", Value = _item.id });
			cmd.Connection = _connection;
			cmd.ExecuteScalar();
			return _item;
		}
		public proto.sales Insert(proto.sales _item)
		{
			MeridianMonitor.Default.MySqlActionForeground((conn) => Insert(conn, _item));;
			return _item;
		}
		public proto.sales Persist(proto.sales _item)
		{
			if(_item.id <= 0)
			{
				_item = Insert(_item);
			}
			_item = Update(_item);
			return _item;
		}
		public proto.sales Delete(proto.sales _item)
		{
			_item.DeleteCompositions(Meridian.Default);
			_item.DeleteAggregations();
			m_Items.Remove(_item.id);
			MeridianMonitor.Default.MySqlActionBackground((conn) => Delete(conn, _item));;
			return _item;
		}
		public proto.sales Update(proto.sales _item)
		{
			MeridianMonitor.Default.MySqlActionBackground((conn) => Update(conn, _item));;
			return _item;
		}
		public IList<proto.sales> All()
		{
			return m_Items.Values;
		}
		public proto.sales Get(long _id)
		{
			return m_Items[_id];
		}
		public bool Exists(long _id)
		{
			return m_Items.ContainsKey(_id);
		}
		public void UpdateSync(MySqlConnection _connection, long _id, Meridian _meridian)
		{
			if (!Exists(_id))
			{
			return;
			}
			var item = Get(_id);
			var cmd = new MySqlCommand("SELECT `id`, `title`, `text`, `publish_date`, `is_main`, `category_id`, `company_id`, `sale_type_id`, `comment_count`, `start_date`, `end_date`, `percent`, `percent_max`, `site`, `phone`, `products`, `work_time`, `sales_offices`, `image`, `image_for_main` FROM sales WHERE id = " + _id.ToString());
			cmd.Connection = _connection;
			using(var reader = cmd.ExecuteReader())
			{
				while(reader.Read())
				{
					item.DeleteCompositions(Meridian.Default);
					item.DeleteAggregations();
					item.LoadFromReader(reader);
					item.LoadAggregations(_meridian);
					item.LoadCompositions(_meridian);
				}
			}
		}
		public void InsertSync(MySqlConnection _connection, long _id, Meridian _meridian)
		{
			if(Exists(_id)) return;;
			var cmd = new MySqlCommand("SELECT `id`, `title`, `text`, `publish_date`, `is_main`, `category_id`, `company_id`, `sale_type_id`, `comment_count`, `start_date`, `end_date`, `percent`, `percent_max`, `site`, `phone`, `products`, `work_time`, `sales_offices`, `image`, `image_for_main` FROM sales WHERE id = " + _id.ToString());
			cmd.Connection = _connection;
			using(var reader = cmd.ExecuteReader())
			{
				while(reader.Read())
				{
					var item = new proto.sales();
					item.LoadFromReader(reader);
					item.LoadAggregations(_meridian);
					item.LoadCompositions(_meridian);
					m_Items.Add(item.id, item);
				}
			}
		}
		public void DeleteSync(MySqlConnection _connection, long _id, Meridian _meridian)
		{
			if (!Exists(_id))
			{
			return;
			}
			var item = Get(_id);
			item.DeleteCompositions(Meridian.Default);
			item.DeleteAggregations();
			m_Items.Remove(item.id);
		}
	}
}
