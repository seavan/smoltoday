/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using MySql.Data.MySqlClient;
using meridian.smolensk;
using meridian.smolensk.system;

namespace meridian.smolensk.protoStore
{
	public partial class my_messagesStore : Meridian.IEntityStore, admin.db.IDataService<proto.my_messages>
	{
		public my_messagesStore()
		{
			m_Items = new SortedList<long, proto.my_messages>();
		}
		private SortedList<long, proto.my_messages> m_Items;
		public void Commit()
		{
			//throw new NotImplementedException();
		}
		public IQueryable<proto.my_messages> GetAll()
		{
			return Queryable.AsQueryable<proto.my_messages>(All());
		}
		public proto.my_messages GetById(long id)
		{
			return Get(id);
		}
		void admin.db.IDataService<proto.my_messages>.Insert(proto.my_messages item)
		{
			Insert(item);
		}
		void admin.db.IDataService<proto.my_messages>.Delete(proto.my_messages item)
		{
			Delete(item);
		}
		public proto.my_messages CreateItem()
		{
			return new proto.my_messages() {   };
		}
		public void AbortItem(proto.my_messages item)
		{
			Delete(item);
		}
		public void Discard()
		{
			;
		}
		void admin.db.IDataService<proto.my_messages>.Update(proto.my_messages item)
		{
			Persist(item);
		}
		public object GetObject(long _id)
		{
			return Get(_id);
		}
		public System.Type GetObjectType()
		{
			return typeof(proto.my_messages);
		}
		public void DeleteById(long _id)
		{
			Delete(Get(_id));
		}
		public void UpdateById(long _id)
		{
			Update(Get(_id));
		}
		public void LoadAggregations(Meridian _meridian)
		{
			foreach(var item in m_Items.Values)
			{
				item.LoadAggregations(_meridian);
			}
		}
		public void Select(MySqlConnection _connection)
		{
			var cmd = new MySqlCommand("SELECT `id`, `title`, `text`, `link`, `link_name`, `create_date`, `is_new`, `account_id` FROM my_messages");
			cmd.Connection = _connection;
			using(var reader = cmd.ExecuteReader())
			{
				while(reader.Read())
				{
					var item = new proto.my_messages();
					item.LoadFromReader(reader);
					m_Items[item.id] = item;
				}
			}
		}
		public proto.my_messages Insert(MySqlConnection _connection, proto.my_messages _item)
		{
			var cmd = new MySqlCommand("INSERT INTO my_messages ( `title`, `text`, `link`, `link_name`, `create_date`, `is_new`, `account_id` ) VALUES ( @title, @text, @link, @link_name, @create_date, @is_new, @account_id ); SELECT LAST_INSERT_ID();"); ;
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "title", Value = _item.title });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "text", Value = _item.text });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "link", Value = _item.link });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "link_name", Value = _item.link_name });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "create_date", Value = (_item.create_date != null && _item.create_date.Year > 1800) ? _item.create_date : new DateTime(1800, 1, 1) });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "is_new", Value = _item.is_new });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "account_id", Value = _item.account_id });
			cmd.Connection = _connection;
			_item.id = Convert.ToInt64(cmd.ExecuteScalar());
			m_Items.Add(_item.id, _item);
			_item.LoadAggregations(Meridian.Default);
			return _item;
		}
		public proto.my_messages Update(MySqlConnection _connection, proto.my_messages _item)
		{
			bool changed =  false;
			var cmdText =  "";
			var cmd = new MySqlCommand("UPDATE my_messages SET `title`= @title, `text`= @text, `link`= @link, `link_name`= @link_name, `create_date`= @create_date, `is_new`= @is_new, `account_id`= @account_id WHERE id=@id"); ;
			if(_item.mc_id)
			{
			}
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "id", Value = _item.id });
			if(_item.mc_title)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "title = @title";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "title", Value = _item.title != null ? (object)_item.title : DBNull.Value });
			}
			if(_item.mc_text)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "text = @text";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "text", Value = _item.text != null ? (object)_item.text : DBNull.Value });
			}
			if(_item.mc_link)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "link = @link";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "link", Value = _item.link != null ? (object)_item.link : DBNull.Value });
			}
			if(_item.mc_link_name)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "link_name = @link_name";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "link_name", Value = _item.link_name != null ? (object)_item.link_name : DBNull.Value });
			}
			if(_item.mc_create_date)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "create_date = @create_date";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "create_date", Value = _item.create_date });
			}
			if(_item.mc_is_new)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "is_new = @is_new";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "is_new", Value = _item.is_new });
			}
			if(_item.mc_account_id)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "account_id = @account_id";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "account_id", Value = _item.account_id });
			}
			if(changed)
			{
				cmd.CommandText =  "UPDATE my_messages SET " + cmdText + " WHERE id=@id";
				cmd.Connection = _connection;
				cmd.ExecuteNonQuery();
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public proto.my_messages Delete(MySqlConnection _connection, proto.my_messages _item)
		{
			var cmd = new MySqlCommand("DELETE FROM my_messages WHERE id=@id"); ;
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "id", Value = _item.id });
			cmd.Connection = _connection;
			cmd.ExecuteScalar();
			return _item;
		}
		public proto.my_messages Insert(proto.my_messages _item)
		{
			MeridianMonitor.Default.MySqlActionForeground((conn) => Insert(conn, _item));;
			return _item;
		}
		public proto.my_messages Persist(proto.my_messages _item)
		{
			if(_item.id <= 0)
			{
				_item = Insert(_item);
			}
			_item = Update(_item);
			return _item;
		}
		public proto.my_messages Delete(proto.my_messages _item)
		{
			_item.DeleteCompositions(Meridian.Default);
			_item.DeleteAggregations();
			m_Items.Remove(_item.id);
			MeridianMonitor.Default.MySqlActionBackground((conn) => Delete(conn, _item));;
			return _item;
		}
		public proto.my_messages Update(proto.my_messages _item)
		{
			MeridianMonitor.Default.MySqlActionBackground((conn) => Update(conn, _item));;
			return _item;
		}
		public IList<proto.my_messages> All()
		{
			return m_Items.Values;
		}
		public proto.my_messages Get(long _id)
		{
			return m_Items[_id];
		}
		public bool Exists(long _id)
		{
			return m_Items.ContainsKey(_id);
		}
		public void UpdateSync(MySqlConnection _connection, long _id, Meridian _meridian)
		{
			if (!Exists(_id))
			{
			return;
			}
			var item = Get(_id);
			var cmd = new MySqlCommand("SELECT `id`, `title`, `text`, `link`, `link_name`, `create_date`, `is_new`, `account_id` FROM my_messages WHERE id = " + _id.ToString());
			cmd.Connection = _connection;
			using(var reader = cmd.ExecuteReader())
			{
				while(reader.Read())
				{
					item.DeleteCompositions(Meridian.Default);
					item.DeleteAggregations();
					item.LoadFromReader(reader);
					item.LoadAggregations(_meridian);
					item.LoadCompositions(_meridian);
				}
			}
		}
		public void InsertSync(MySqlConnection _connection, long _id, Meridian _meridian)
		{
			if(Exists(_id)) return;;
			var cmd = new MySqlCommand("SELECT `id`, `title`, `text`, `link`, `link_name`, `create_date`, `is_new`, `account_id` FROM my_messages WHERE id = " + _id.ToString());
			cmd.Connection = _connection;
			using(var reader = cmd.ExecuteReader())
			{
				while(reader.Read())
				{
					var item = new proto.my_messages();
					item.LoadFromReader(reader);
					item.LoadAggregations(_meridian);
					item.LoadCompositions(_meridian);
					m_Items.Add(item.id, item);
				}
			}
		}
		public void DeleteSync(MySqlConnection _connection, long _id, Meridian _meridian)
		{
			if (!Exists(_id))
			{
			return;
			}
			var item = Get(_id);
			item.DeleteCompositions(Meridian.Default);
			item.DeleteAggregations();
			m_Items.Remove(item.id);
		}
	}
}
