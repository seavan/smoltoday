/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using MySql.Data.MySqlClient;
using meridian.smolensk;
using meridian.smolensk.system;

namespace meridian.smolensk.protoStore
{
	public partial class ad_advertismentsStore : Meridian.IEntityStore, admin.db.IDataService<proto.ad_advertisments>
	{
		public ad_advertismentsStore()
		{
			m_Items = new SortedList<long, proto.ad_advertisments>();
		}
		private SortedList<long, proto.ad_advertisments> m_Items;
		public void Commit()
		{
			//throw new NotImplementedException();
		}
		public IQueryable<proto.ad_advertisments> GetAll()
		{
			return Queryable.AsQueryable<proto.ad_advertisments>(All());
		}
		public proto.ad_advertisments GetById(long id)
		{
			return Get(id);
		}
		void admin.db.IDataService<proto.ad_advertisments>.Insert(proto.ad_advertisments item)
		{
			Insert(item);
		}
		public proto.ad_advertisments CreateItem()
		{
			return new proto.ad_advertisments() {   };
		}
		public void AbortItem(proto.ad_advertisments item)
		{
			Delete(item);
		}
		public void Discard()
		{
			;
		}
		void admin.db.IDataService<proto.ad_advertisments>.Update(proto.ad_advertisments item)
		{
			Persist(item);
		}
		public object GetObject(long _id)
		{
			return Get(_id);
		}
		public System.Type GetObjectType()
		{
			return typeof(proto.ad_advertisments);
		}
		public void DeleteById(long _id)
		{
			Delete(Get(_id));
		}
		public void UpdateById(long _id)
		{
			Update(Get(_id));
		}
		public void LoadAggregations(Meridian _meridian)
		{
			foreach(var item in m_Items.Values)
			{
				item.LoadAggregations(_meridian);
			}
		}
		public void Select(MySqlConnection _connection)
		{
			var cmd = new MySqlCommand("SELECT `id`, `account_id`, `category_id`, `created_date`, `title`, `description`, `price`, `name`, `phone`, `email`, `view_count`, `on_main`, `in_interesting`, `pin_to_list`, `url` FROM ad_advertisments");
			cmd.Connection = _connection;
			using(var reader = cmd.ExecuteReader())
			{
				while(reader.Read())
				{
					var item = new proto.ad_advertisments();
					item.LoadFromReader(reader);
					m_Items[item.id] = item;
				}
			}
		}
		public proto.ad_advertisments Insert(MySqlConnection _connection, proto.ad_advertisments _item)
		{
			var cmd = new MySqlCommand("INSERT INTO ad_advertisments ( `account_id`, `category_id`, `created_date`, `title`, `description`, `price`, `name`, `phone`, `email`, `view_count`, `on_main`, `in_interesting`, `pin_to_list`, `url` ) VALUES ( @account_id, @category_id, @created_date, @title, @description, @price, @name, @phone, @email, @view_count, @on_main, @in_interesting, @pin_to_list, @url ); SELECT LAST_INSERT_ID();"); ;
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "account_id", Value = _item.account_id });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "category_id", Value = _item.category_id });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "created_date", Value = (_item.created_date != null && _item.created_date.Year > 1800) ? _item.created_date : new DateTime(1800, 1, 1) });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "title", Value = _item.title });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "description", Value = _item.description });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "price", Value = _item.price });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "name", Value = _item.name });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "phone", Value = _item.phone });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "email", Value = _item.email });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "view_count", Value = _item.view_count });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "on_main", Value = _item.on_main });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "in_interesting", Value = _item.in_interesting });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "pin_to_list", Value = _item.pin_to_list });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "url", Value = _item.url });
			cmd.Connection = _connection;
			_item.id = Convert.ToInt64(cmd.ExecuteScalar());
			m_Items.Add(_item.id, _item);
			_item.LoadAggregations(Meridian.Default);
			return _item;
		}
		public proto.ad_advertisments Update(MySqlConnection _connection, proto.ad_advertisments _item)
		{
			bool changed =  false;
			var cmdText =  "";
			var cmd = new MySqlCommand("UPDATE ad_advertisments SET `account_id`= @account_id, `category_id`= @category_id, `created_date`= @created_date, `title`= @title, `description`= @description, `price`= @price, `name`= @name, `phone`= @phone, `email`= @email, `view_count`= @view_count, `on_main`= @on_main, `in_interesting`= @in_interesting, `pin_to_list`= @pin_to_list, `url`= @url WHERE id=@id"); ;
			if(_item.mc_id)
			{
			}
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "id", Value = _item.id });
			if(_item.mc_account_id)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "account_id = @account_id";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "account_id", Value = _item.account_id });
			}
			if(_item.mc_category_id)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "category_id = @category_id";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "category_id", Value = _item.category_id });
			}
			if(_item.mc_created_date)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "created_date = @created_date";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "created_date", Value = _item.created_date });
			}
			if(_item.mc_title)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "title = @title";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "title", Value = _item.title != null ? (object)_item.title : DBNull.Value });
			}
			if(_item.mc_description)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "description = @description";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "description", Value = _item.description != null ? (object)_item.description : DBNull.Value });
			}
			if(_item.mc_price)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "price = @price";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "price", Value = _item.price });
			}
			if(_item.mc_name)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "name = @name";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "name", Value = _item.name != null ? (object)_item.name : DBNull.Value });
			}
			if(_item.mc_phone)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "phone = @phone";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "phone", Value = _item.phone != null ? (object)_item.phone : DBNull.Value });
			}
			if(_item.mc_email)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "email = @email";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "email", Value = _item.email != null ? (object)_item.email : DBNull.Value });
			}
			if(_item.mc_view_count)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "view_count = @view_count";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "view_count", Value = _item.view_count });
			}
			if(_item.mc_on_main)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "on_main = @on_main";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "on_main", Value = _item.on_main });
			}
			if(_item.mc_in_interesting)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "in_interesting = @in_interesting";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "in_interesting", Value = _item.in_interesting });
			}
			if(_item.mc_pin_to_list)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "pin_to_list = @pin_to_list";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "pin_to_list", Value = _item.pin_to_list });
			}
			if(_item.mc_url)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "url = @url";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "url", Value = _item.url != null ? (object)_item.url : DBNull.Value });
			}
			if(changed)
			{
				cmd.CommandText =  "UPDATE ad_advertisments SET " + cmdText + " WHERE id=@id";
				cmd.Connection = _connection;
				cmd.ExecuteNonQuery();
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public proto.ad_advertisments Delete(MySqlConnection _connection, proto.ad_advertisments _item)
		{
			var cmd = new MySqlCommand("DELETE FROM ad_advertisments WHERE id=@id"); ;
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "id", Value = _item.id });
			cmd.Connection = _connection;
			cmd.ExecuteScalar();
			return _item;
		}
		public proto.ad_advertisments Insert(proto.ad_advertisments _item)
		{
			MeridianMonitor.Default.MySqlActionForeground((conn) => Insert(conn, _item));;
			return _item;
		}
		public proto.ad_advertisments Persist(proto.ad_advertisments _item)
		{
			if(_item.id <= 0)
			{
				_item = Insert(_item);
			}
			_item = Update(_item);
			return _item;
		}
		public proto.ad_advertisments Delete(proto.ad_advertisments _item)
		{
			_item.DeleteCompositions(Meridian.Default);
			_item.DeleteAggregations();
			m_Items.Remove(_item.id);
			MeridianMonitor.Default.MySqlActionBackground((conn) => Delete(conn, _item));;
			return _item;
		}
		public proto.ad_advertisments Update(proto.ad_advertisments _item)
		{
			MeridianMonitor.Default.MySqlActionBackground((conn) => Update(conn, _item));;
			return _item;
		}
		public IList<proto.ad_advertisments> All()
		{
			return m_Items.Values;
		}
		public proto.ad_advertisments Get(long _id)
		{
			return m_Items[_id];
		}
		public bool Exists(long _id)
		{
			return m_Items.ContainsKey(_id);
		}
		public void UpdateSync(MySqlConnection _connection, long _id, Meridian _meridian)
		{
			if (!Exists(_id))
			{
			return;
			}
			var item = Get(_id);
			var cmd = new MySqlCommand("SELECT `id`, `account_id`, `category_id`, `created_date`, `title`, `description`, `price`, `name`, `phone`, `email`, `view_count`, `on_main`, `in_interesting`, `pin_to_list`, `url` FROM ad_advertisments WHERE id = " + _id.ToString());
			cmd.Connection = _connection;
			using(var reader = cmd.ExecuteReader())
			{
				while(reader.Read())
				{
					item.DeleteCompositions(Meridian.Default);
					item.DeleteAggregations();
					item.LoadFromReader(reader);
					item.LoadAggregations(_meridian);
					item.LoadCompositions(_meridian);
				}
			}
		}
		public void InsertSync(MySqlConnection _connection, long _id, Meridian _meridian)
		{
			if(Exists(_id)) return;;
			var cmd = new MySqlCommand("SELECT `id`, `account_id`, `category_id`, `created_date`, `title`, `description`, `price`, `name`, `phone`, `email`, `view_count`, `on_main`, `in_interesting`, `pin_to_list`, `url` FROM ad_advertisments WHERE id = " + _id.ToString());
			cmd.Connection = _connection;
			using(var reader = cmd.ExecuteReader())
			{
				while(reader.Read())
				{
					var item = new proto.ad_advertisments();
					item.LoadFromReader(reader);
					item.LoadAggregations(_meridian);
					item.LoadCompositions(_meridian);
					m_Items.Add(item.id, item);
				}
			}
		}
		public void DeleteSync(MySqlConnection _connection, long _id, Meridian _meridian)
		{
			if (!Exists(_id))
			{
			return;
			}
			var item = Get(_id);
			item.DeleteCompositions(Meridian.Default);
			item.DeleteAggregations();
			m_Items.Remove(item.id);
		}
	}
}
