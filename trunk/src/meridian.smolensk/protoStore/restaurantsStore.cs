/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using MySql.Data.MySqlClient;
using meridian.smolensk;
using meridian.smolensk.system;

namespace meridian.smolensk.protoStore
{
	public partial class restaurantsStore : Meridian.IEntityStore, admin.db.IDataService<proto.restaurants>
	{
		public restaurantsStore()
		{
			m_Items = new SortedList<long, proto.restaurants>();
		}
		private SortedList<long, proto.restaurants> m_Items;
		public void Commit()
		{
			//throw new NotImplementedException();
		}
		public IQueryable<proto.restaurants> GetAll()
		{
			return Queryable.AsQueryable<proto.restaurants>(All());
		}
		public proto.restaurants GetById(long id)
		{
			return Get(id);
		}
		void admin.db.IDataService<proto.restaurants>.Insert(proto.restaurants item)
		{
			Insert(item);
		}
		public proto.restaurants CreateItem()
		{
			return new proto.restaurants() {   };
		}
		public void AbortItem(proto.restaurants item)
		{
			Delete(item);
		}
		public void Discard()
		{
			;
		}
		void admin.db.IDataService<proto.restaurants>.Update(proto.restaurants item)
		{
			Persist(item);
		}
		public object GetObject(long _id)
		{
			return Get(_id);
		}
		public System.Type GetObjectType()
		{
			return typeof(proto.restaurants);
		}
		public void DeleteById(long _id)
		{
			Delete(Get(_id));
		}
		public void UpdateById(long _id)
		{
			Update(Get(_id));
		}
		public void LoadAggregations(Meridian _meridian)
		{
			foreach(var item in m_Items.Values)
			{
				item.LoadAggregations(_meridian);
			}
		}
		public void Select(MySqlConnection _connection)
		{
			var cmd = new MySqlCommand("SELECT `id`, `title`, `description`, `phone`, `address`, `holes_count`, `work_time`, `vip`, `feedback_email`, `coordinates`, `map_title`, `map_description`, `can_book_table` FROM restaurants");
			cmd.Connection = _connection;
			using(var reader = cmd.ExecuteReader())
			{
				while(reader.Read())
				{
					var item = new proto.restaurants();
					item.LoadFromReader(reader);
					m_Items[item.id] = item;
				}
			}
		}
		public proto.restaurants Insert(MySqlConnection _connection, proto.restaurants _item)
		{
			var cmd = new MySqlCommand("INSERT INTO restaurants ( `title`, `description`, `phone`, `address`, `holes_count`, `work_time`, `vip`, `feedback_email`, `coordinates`, `map_title`, `map_description`, `can_book_table` ) VALUES ( @title, @description, @phone, @address, @holes_count, @work_time, @vip, @feedback_email, @coordinates, @map_title, @map_description, @can_book_table ); SELECT LAST_INSERT_ID();"); ;
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "title", Value = _item.title });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "description", Value = _item.description });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "phone", Value = _item.phone });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "address", Value = _item.address });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "holes_count", Value = _item.holes_count });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "work_time", Value = _item.work_time });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "vip", Value = _item.vip });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "feedback_email", Value = _item.feedback_email });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "coordinates", Value = _item.coordinates });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "map_title", Value = _item.map_title });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "map_description", Value = _item.map_description });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "can_book_table", Value = _item.can_book_table });
			cmd.Connection = _connection;
			_item.id = Convert.ToInt64(cmd.ExecuteScalar());
			m_Items.Add(_item.id, _item);
			_item.LoadAggregations(Meridian.Default);
			return _item;
		}
		public proto.restaurants Update(MySqlConnection _connection, proto.restaurants _item)
		{
			bool changed =  false;
			var cmdText =  "";
			var cmd = new MySqlCommand("UPDATE restaurants SET `title`= @title, `description`= @description, `phone`= @phone, `address`= @address, `holes_count`= @holes_count, `work_time`= @work_time, `vip`= @vip, `feedback_email`= @feedback_email, `coordinates`= @coordinates, `map_title`= @map_title, `map_description`= @map_description, `can_book_table`= @can_book_table WHERE id=@id"); ;
			if(_item.mc_id)
			{
			}
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "id", Value = _item.id });
			if(_item.mc_title)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "title = @title";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "title", Value = _item.title != null ? (object)_item.title : DBNull.Value });
			}
			if(_item.mc_description)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "description = @description";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "description", Value = _item.description != null ? (object)_item.description : DBNull.Value });
			}
			if(_item.mc_phone)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "phone = @phone";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "phone", Value = _item.phone != null ? (object)_item.phone : DBNull.Value });
			}
			if(_item.mc_address)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "address = @address";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "address", Value = _item.address != null ? (object)_item.address : DBNull.Value });
			}
			if(_item.mc_holes_count)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "holes_count = @holes_count";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "holes_count", Value = _item.holes_count != null ? (object)_item.holes_count : DBNull.Value });
			}
			if(_item.mc_work_time)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "work_time = @work_time";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "work_time", Value = _item.work_time != null ? (object)_item.work_time : DBNull.Value });
			}
			if(_item.mc_vip)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "vip = @vip";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "vip", Value = _item.vip });
			}
			if(_item.mc_feedback_email)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "feedback_email = @feedback_email";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "feedback_email", Value = _item.feedback_email != null ? (object)_item.feedback_email : DBNull.Value });
			}
			if(_item.mc_coordinates)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "coordinates = @coordinates";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "coordinates", Value = _item.coordinates != null ? (object)_item.coordinates : DBNull.Value });
			}
			if(_item.mc_map_title)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "map_title = @map_title";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "map_title", Value = _item.map_title != null ? (object)_item.map_title : DBNull.Value });
			}
			if(_item.mc_map_description)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "map_description = @map_description";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "map_description", Value = _item.map_description != null ? (object)_item.map_description : DBNull.Value });
			}
			if(_item.mc_can_book_table)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "can_book_table = @can_book_table";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "can_book_table", Value = _item.can_book_table });
			}
			if(changed)
			{
				cmd.CommandText =  "UPDATE restaurants SET " + cmdText + " WHERE id=@id";
				cmd.Connection = _connection;
				cmd.ExecuteNonQuery();
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public proto.restaurants Delete(MySqlConnection _connection, proto.restaurants _item)
		{
			var cmd = new MySqlCommand("DELETE FROM restaurants WHERE id=@id"); ;
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "id", Value = _item.id });
			cmd.Connection = _connection;
			cmd.ExecuteScalar();
			return _item;
		}
		public proto.restaurants Insert(proto.restaurants _item)
		{
			MeridianMonitor.Default.MySqlActionForeground((conn) => Insert(conn, _item));;
			return _item;
		}
		public proto.restaurants Persist(proto.restaurants _item)
		{
			if(_item.id <= 0)
			{
				_item = Insert(_item);
			}
			_item = Update(_item);
			return _item;
		}
		public proto.restaurants Delete(proto.restaurants _item)
		{
			_item.DeleteCompositions(Meridian.Default);
			_item.DeleteAggregations();
			m_Items.Remove(_item.id);
			MeridianMonitor.Default.MySqlActionBackground((conn) => Delete(conn, _item));;
			return _item;
		}
		public proto.restaurants Update(proto.restaurants _item)
		{
			MeridianMonitor.Default.MySqlActionBackground((conn) => Update(conn, _item));;
			return _item;
		}
		public IList<proto.restaurants> All()
		{
			return m_Items.Values;
		}
		public proto.restaurants Get(long _id)
		{
			return m_Items[_id];
		}
		public bool Exists(long _id)
		{
			return m_Items.ContainsKey(_id);
		}
		public void UpdateSync(MySqlConnection _connection, long _id, Meridian _meridian)
		{
			if (!Exists(_id))
			{
			return;
			}
			var item = Get(_id);
			var cmd = new MySqlCommand("SELECT `id`, `title`, `description`, `phone`, `address`, `holes_count`, `work_time`, `vip`, `feedback_email`, `coordinates`, `map_title`, `map_description`, `can_book_table` FROM restaurants WHERE id = " + _id.ToString());
			cmd.Connection = _connection;
			using(var reader = cmd.ExecuteReader())
			{
				while(reader.Read())
				{
					item.DeleteCompositions(Meridian.Default);
					item.DeleteAggregations();
					item.LoadFromReader(reader);
					item.LoadAggregations(_meridian);
					item.LoadCompositions(_meridian);
				}
			}
		}
		public void InsertSync(MySqlConnection _connection, long _id, Meridian _meridian)
		{
			if(Exists(_id)) return;;
			var cmd = new MySqlCommand("SELECT `id`, `title`, `description`, `phone`, `address`, `holes_count`, `work_time`, `vip`, `feedback_email`, `coordinates`, `map_title`, `map_description`, `can_book_table` FROM restaurants WHERE id = " + _id.ToString());
			cmd.Connection = _connection;
			using(var reader = cmd.ExecuteReader())
			{
				while(reader.Read())
				{
					var item = new proto.restaurants();
					item.LoadFromReader(reader);
					item.LoadAggregations(_meridian);
					item.LoadCompositions(_meridian);
					m_Items.Add(item.id, item);
				}
			}
		}
		public void DeleteSync(MySqlConnection _connection, long _id, Meridian _meridian)
		{
			if (!Exists(_id))
			{
			return;
			}
			var item = Get(_id);
			item.DeleteCompositions(Meridian.Default);
			item.DeleteAggregations();
			m_Items.Remove(item.id);
		}
	}
}
