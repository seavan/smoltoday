/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using MySql.Data.MySqlClient;
using meridian.smolensk;
using meridian.smolensk.system;

namespace meridian.smolensk.protoStore
{
	public partial class companiesStore : Meridian.IEntityStore, admin.db.IDataService<proto.companies>
	{
		public companiesStore()
		{
			m_Items = new SortedList<long, proto.companies>();
		}
		private SortedList<long, proto.companies> m_Items;
		public void Commit()
		{
			//throw new NotImplementedException();
		}
		public IQueryable<proto.companies> GetAll()
		{
			return Queryable.AsQueryable<proto.companies>(All());
		}
		public proto.companies GetById(long id)
		{
			return Get(id);
		}
		void admin.db.IDataService<proto.companies>.Insert(proto.companies item)
		{
			Insert(item);
		}
		void admin.db.IDataService<proto.companies>.Delete(proto.companies item)
		{
			Delete(item);
		}
		public proto.companies CreateItem()
		{
			return new proto.companies() {   };
		}
		public void AbortItem(proto.companies item)
		{
			Delete(item);
		}
		public void Discard()
		{
			;
		}
		void admin.db.IDataService<proto.companies>.Update(proto.companies item)
		{
			Persist(item);
		}
		public object GetObject(long _id)
		{
			return Get(_id);
		}
		public System.Type GetObjectType()
		{
			return typeof(proto.companies);
		}
		public void DeleteById(long _id)
		{
			Delete(Get(_id));
		}
		public void UpdateById(long _id)
		{
			Update(Get(_id));
		}
		public void LoadAggregations(Meridian _meridian)
		{
			foreach(var item in m_Items.Values)
			{
				item.LoadAggregations(_meridian);
			}
		}
		public void Select(MySqlConnection _connection)
		{
			var cmd = new MySqlCommand("SELECT `id`, `title`, `work_time`, `address`, `www`, `email`, `phones`, `leader`, `description`, `publish_date`, `category_id`, `paid_order`, `stable_order`, `views_count`, `coordinates`, `map_title`, `map_description`, `ownership_id` FROM companies");
			cmd.Connection = _connection;
			using(var reader = cmd.ExecuteReader())
			{
				while(reader.Read())
				{
					var item = new proto.companies();
					item.LoadFromReader(reader);
					m_Items[item.id] = item;
				}
			}
		}
		public proto.companies Insert(MySqlConnection _connection, proto.companies _item)
		{
			var cmd = new MySqlCommand("INSERT INTO companies ( `title`, `work_time`, `address`, `www`, `email`, `phones`, `leader`, `description`, `publish_date`, `category_id`, `paid_order`, `stable_order`, `views_count`, `coordinates`, `map_title`, `map_description`, `ownership_id` ) VALUES ( @title, @work_time, @address, @www, @email, @phones, @leader, @description, @publish_date, @category_id, @paid_order, @stable_order, @views_count, @coordinates, @map_title, @map_description, @ownership_id ); SELECT LAST_INSERT_ID();"); ;
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "title", Value = _item.title });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "work_time", Value = _item.work_time });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "address", Value = _item.address });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "www", Value = _item.www });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "email", Value = _item.email });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "phones", Value = _item.phones });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "leader", Value = _item.leader });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "description", Value = _item.description });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "publish_date", Value = (_item.publish_date != null && _item.publish_date.Year > 1800) ? _item.publish_date : new DateTime(1800, 1, 1) });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "category_id", Value = _item.category_id });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "paid_order", Value = _item.paid_order });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "stable_order", Value = _item.stable_order });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "views_count", Value = _item.views_count });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "coordinates", Value = _item.coordinates });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "map_title", Value = _item.map_title });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "map_description", Value = _item.map_description });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "ownership_id", Value = _item.ownership_id });
			cmd.Connection = _connection;
			_item.id = Convert.ToInt64(cmd.ExecuteScalar());
			m_Items.Add(_item.id, _item);
			_item.LoadAggregations(Meridian.Default);
			return _item;
		}
		public proto.companies Update(MySqlConnection _connection, proto.companies _item)
		{
			bool changed =  false;
			var cmdText =  "";
			var cmd = new MySqlCommand("UPDATE companies SET `title`= @title, `work_time`= @work_time, `address`= @address, `www`= @www, `email`= @email, `phones`= @phones, `leader`= @leader, `description`= @description, `publish_date`= @publish_date, `category_id`= @category_id, `paid_order`= @paid_order, `stable_order`= @stable_order, `views_count`= @views_count, `coordinates`= @coordinates, `map_title`= @map_title, `map_description`= @map_description, `ownership_id`= @ownership_id WHERE id=@id"); ;
			if(_item.mc_id)
			{
			}
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "id", Value = _item.id });
			if(_item.mc_title)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "title = @title";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "title", Value = _item.title != null ? (object)_item.title : DBNull.Value });
			}
			if(_item.mc_work_time)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "work_time = @work_time";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "work_time", Value = _item.work_time != null ? (object)_item.work_time : DBNull.Value });
			}
			if(_item.mc_address)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "address = @address";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "address", Value = _item.address != null ? (object)_item.address : DBNull.Value });
			}
			if(_item.mc_www)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "www = @www";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "www", Value = _item.www != null ? (object)_item.www : DBNull.Value });
			}
			if(_item.mc_email)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "email = @email";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "email", Value = _item.email != null ? (object)_item.email : DBNull.Value });
			}
			if(_item.mc_phones)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "phones = @phones";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "phones", Value = _item.phones != null ? (object)_item.phones : DBNull.Value });
			}
			if(_item.mc_leader)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "leader = @leader";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "leader", Value = _item.leader != null ? (object)_item.leader : DBNull.Value });
			}
			if(_item.mc_description)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "description = @description";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "description", Value = _item.description != null ? (object)_item.description : DBNull.Value });
			}
			if(_item.mc_publish_date)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "publish_date = @publish_date";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "publish_date", Value = _item.publish_date });
			}
			if(_item.mc_category_id)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "category_id = @category_id";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "category_id", Value = _item.category_id });
			}
			if(_item.mc_paid_order)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "paid_order = @paid_order";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "paid_order", Value = _item.paid_order });
			}
			if(_item.mc_stable_order)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "stable_order = @stable_order";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "stable_order", Value = _item.stable_order });
			}
			if(_item.mc_views_count)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "views_count = @views_count";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "views_count", Value = _item.views_count });
			}
			if(_item.mc_coordinates)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "coordinates = @coordinates";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "coordinates", Value = _item.coordinates != null ? (object)_item.coordinates : DBNull.Value });
			}
			if(_item.mc_map_title)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "map_title = @map_title";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "map_title", Value = _item.map_title != null ? (object)_item.map_title : DBNull.Value });
			}
			if(_item.mc_map_description)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "map_description = @map_description";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "map_description", Value = _item.map_description != null ? (object)_item.map_description : DBNull.Value });
			}
			if(_item.mc_ownership_id)
			{
				changed =  true;
				cmdText += (cmdText.Length > 0 ? ", " : "") + "ownership_id = @ownership_id";
				cmd.Parameters.Add( new MySqlParameter() { ParameterName = "ownership_id", Value = _item.ownership_id });
			}
			if(changed)
			{
				cmd.CommandText =  "UPDATE companies SET " + cmdText + " WHERE id=@id";
				cmd.Connection = _connection;
				cmd.ExecuteNonQuery();
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public proto.companies Delete(MySqlConnection _connection, proto.companies _item)
		{
			var cmd = new MySqlCommand("DELETE FROM companies WHERE id=@id"); ;
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "id", Value = _item.id });
			cmd.Connection = _connection;
			cmd.ExecuteScalar();
			return _item;
		}
		public proto.companies Insert(proto.companies _item)
		{
			MeridianMonitor.Default.MySqlActionForeground((conn) => Insert(conn, _item));;
			return _item;
		}
		public proto.companies Persist(proto.companies _item)
		{
			if(_item.id <= 0)
			{
				_item = Insert(_item);
			}
			_item = Update(_item);
			return _item;
		}
		public proto.companies Delete(proto.companies _item)
		{
			_item.DeleteCompositions(Meridian.Default);
			_item.DeleteAggregations();
			m_Items.Remove(_item.id);
			MeridianMonitor.Default.MySqlActionBackground((conn) => Delete(conn, _item));;
			return _item;
		}
		public proto.companies Update(proto.companies _item)
		{
			MeridianMonitor.Default.MySqlActionBackground((conn) => Update(conn, _item));;
			return _item;
		}
		public IList<proto.companies> All()
		{
			return m_Items.Values;
		}
		public proto.companies Get(long _id)
		{
			return m_Items[_id];
		}
		public bool Exists(long _id)
		{
			return m_Items.ContainsKey(_id);
		}
		public void UpdateSync(MySqlConnection _connection, long _id, Meridian _meridian)
		{
			if (!Exists(_id))
			{
			return;
			}
			var item = Get(_id);
			var cmd = new MySqlCommand("SELECT `id`, `title`, `work_time`, `address`, `www`, `email`, `phones`, `leader`, `description`, `publish_date`, `category_id`, `paid_order`, `stable_order`, `views_count`, `coordinates`, `map_title`, `map_description`, `ownership_id` FROM companies WHERE id = " + _id.ToString());
			cmd.Connection = _connection;
			using(var reader = cmd.ExecuteReader())
			{
				while(reader.Read())
				{
					item.DeleteCompositions(Meridian.Default);
					item.DeleteAggregations();
					item.LoadFromReader(reader);
					item.LoadAggregations(_meridian);
					item.LoadCompositions(_meridian);
				}
			}
		}
		public void InsertSync(MySqlConnection _connection, long _id, Meridian _meridian)
		{
			if(Exists(_id)) return;;
			var cmd = new MySqlCommand("SELECT `id`, `title`, `work_time`, `address`, `www`, `email`, `phones`, `leader`, `description`, `publish_date`, `category_id`, `paid_order`, `stable_order`, `views_count`, `coordinates`, `map_title`, `map_description`, `ownership_id` FROM companies WHERE id = " + _id.ToString());
			cmd.Connection = _connection;
			using(var reader = cmd.ExecuteReader())
			{
				while(reader.Read())
				{
					var item = new proto.companies();
					item.LoadFromReader(reader);
					item.LoadAggregations(_meridian);
					item.LoadCompositions(_meridian);
					m_Items.Add(item.id, item);
				}
			}
		}
		public void DeleteSync(MySqlConnection _connection, long _id, Meridian _meridian)
		{
			if (!Exists(_id))
			{
			return;
			}
			var item = Get(_id);
			item.DeleteCompositions(Meridian.Default);
			item.DeleteAggregations();
			m_Items.Remove(item.id);
		}
	}
}
